
5.FreeRTOS_STM32F407VG_SPI_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018eb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000130c  08019048  08019048  00029048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a354  0801a354  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  0801a354  0801a354  0002a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a35c  0801a35c  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a35c  0801a35c  0002a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a360  0801a360  0002a360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  0801a364  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030370  2**0
                  CONTENTS
 10 .bss          00016950  20000370  20000370  00030370  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20016cc0  20016cc0  00030370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d3ba  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000077bf  00000000  00000000  0006d75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000026b8  00000000  00000000  00074f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023f8  00000000  00000000  000775d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c750  00000000  00000000  000799d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000371ac  00000000  00000000  000a6120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6ff1  00000000  00000000  000dd2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c42bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b43c  00000000  00000000  001c4310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801902c 	.word	0x0801902c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	0801902c 	.word	0x0801902c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 f9ef 	bl	8002334 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d133      	bne.n	8000fca <bme280_init+0x8a>
		while (try_count) {
 8000f62:	e028      	b.n	8000fb6 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f64:	f107 010d 	add.w	r1, r7, #13
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	20d0      	movs	r0, #208	; 0xd0
 8000f6e:	f000 f832 	bl	8000fd6 <bme280_get_regs>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d114      	bne.n	8000fa8 <bme280_init+0x68>
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b60      	cmp	r3, #96	; 0x60
 8000f82:	d111      	bne.n	8000fa8 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f84:	7b7a      	ldrb	r2, [r7, #13]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f976 	bl	800127c <bme280_soft_reset>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d110      	bne.n	8000fbe <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 f83f 	bl	8002020 <get_calib_data>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fa6:	e00a      	b.n	8000fbe <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2001      	movs	r0, #1
 8000fae:	4798      	blx	r3
			--try_count;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1d3      	bne.n	8000f64 <bme280_init+0x24>
 8000fbc:	e000      	b.n	8000fc0 <bme280_init+0x80>
				break;
 8000fbe:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000fc6:	23fe      	movs	r3, #254	; 0xfe
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 f9a3 	bl	8002334 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d117      	bne.n	800102a <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d003      	beq.n	800100a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685c      	ldr	r4, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7858      	ldrb	r0, [r3, #1]
 8001012:	89bb      	ldrh	r3, [r7, #12]
 8001014:	7bf9      	ldrb	r1, [r7, #15]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	47a0      	blx	r4
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8001026:	23fc      	movs	r3, #252	; 0xfc
 8001028:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b08d      	sub	sp, #52	; 0x34
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d901      	bls.n	8001050 <bme280_set_regs+0x1a>
		len = 10;
 800104c:	230a      	movs	r3, #10
 800104e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f001 f96f 	bl	8002334 <null_ptr_check>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 800105c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001060:	2b00      	cmp	r3, #0
 8001062:	d154      	bne.n	800110e <bme280_set_regs+0xd8>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d051      	beq.n	800110e <bme280_set_regs+0xd8>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d04e      	beq.n	800110e <bme280_set_regs+0xd8>
		if (len != 0) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d047      	beq.n	8001106 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d01a      	beq.n	80010ba <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001084:	2300      	movs	r3, #0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800108a:	e011      	b.n	80010b0 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800108c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	440b      	add	r3, r1
 800109e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3e8      	bcc.n	800108c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d90b      	bls.n	80010d8 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f107 0114 	add.w	r1, r7, #20
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 ffee 	bl	80020aa <interleave_reg_addr>
				temp_len = len * 2;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010d6:	e001      	b.n	80010dc <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689c      	ldr	r4, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7858      	ldrb	r0, [r3, #1]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7819      	ldrb	r1, [r3, #0]
 80010e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ea:	f107 0214 	add.w	r2, r7, #20
 80010ee:	47a0      	blx	r4
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80010f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80010fe:	23fc      	movs	r3, #252	; 0xfc
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001104:	e007      	b.n	8001116 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8001106:	23fd      	movs	r3, #253	; 0xfd
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800110c:	e003      	b.n	8001116 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001114:	e000      	b.n	8001118 <bme280_set_regs+0xe2>
		if (len != 0) {
 8001116:	bf00      	nop
	}


	return rslt;
 8001118:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800111c:	4618      	mov	r0, r3
 800111e:	3734      	adds	r7, #52	; 0x34
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f001 f8ff 	bl	8002334 <null_ptr_check>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d13f      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001142:	f107 030e 	add.w	r3, r7, #14
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f874 	bl	8001236 <bme280_get_sensor_mode>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <bme280_set_sensor_settings+0x46>
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f000 fb4e 	bl	8001802 <put_device_to_sleep>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d127      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2007      	movs	r0, #7
 8001178:	f001 f8c0 	bl	80022fc <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f98a 	bl	80014a6 <set_osr_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4619      	mov	r1, r3
 80011a2:	2018      	movs	r0, #24
 80011a4:	f001 f8aa 	bl	80022fc <are_settings_changed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa11 	bl	80015e0 <set_filter_standby_settings>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f001 f8aa 	bl	8002334 <null_ptr_check>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11e      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011ec:	f107 030e 	add.w	r3, r7, #14
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f81f 	bl	8001236 <bme280_get_sensor_mode>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <bme280_set_sensor_mode+0x46>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f000 faf9 	bl	8001802 <put_device_to_sleep>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fabb 	bl	800179c <write_power_mode>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f001 f877 	bl	8002334 <null_ptr_check>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10e      	bne.n	8001270 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	20f4      	movs	r0, #244	; 0xf4
 800125a:	f7ff febc 	bl	8000fd6 <bme280_get_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001284:	23e0      	movs	r3, #224	; 0xe0
 8001286:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001288:	23b6      	movs	r3, #182	; 0xb6
 800128a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f851 	bl	8002334 <null_ptr_check>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10d      	bne.n	80012ba <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800129e:	f107 010d 	add.w	r1, r7, #13
 80012a2:	f107 000e 	add.w	r0, r7, #14
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f7ff fec4 	bl	8001036 <bme280_set_regs>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2002      	movs	r0, #2
 80012b8:	4798      	blx	r3
	}

	return rslt;
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b08a      	sub	sp, #40	; 0x28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 f823 	bl	8002334 <null_ptr_check>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80012f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d124      	bne.n	8001346 <bme280_get_sensor_data+0x80>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d021      	beq.n	8001346 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001302:	f107 011c 	add.w	r1, r7, #28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2208      	movs	r2, #8
 800130a:	20f7      	movs	r0, #247	; 0xf7
 800130c:	f7ff fe63 	bl	8000fd6 <bme280_get_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8001316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f815 	bl	8001358 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3310      	adds	r3, #16
 8001332:	f107 0110 	add.w	r1, r7, #16
 8001336:	7bf8      	ldrb	r0, [r7, #15]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	f000 f853 	bl	80013e4 <bme280_compensate_data>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001344:	e002      	b.n	800134c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 800134c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001350:	4618      	mov	r0, r3
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b2db      	uxtb	r3, r3
 800137e:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	431a      	orrs	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	031b      	lsls	r3, r3, #12
 8001396:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3305      	adds	r3, #5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3306      	adds	r3, #6
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3307      	adds	r3, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d04b      	beq.n	8001496 <bme280_compensate_data+0xb2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d048      	beq.n	8001496 <bme280_compensate_data+0xb2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d045      	beq.n	8001496 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f000 fa2b 	bl	800189c <compensate_temperature>
 8001446:	eeb0 7a40 	vmov.f32	s14, s0
 800144a:	eef0 7a60 	vmov.f32	s15, s1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 faed 	bl	8001a40 <compensate_pressure>
 8001466:	eeb0 7a40 	vmov.f32	s14, s0
 800146a:	eef0 7a60 	vmov.f32	s15, s1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fcad 	bl	8001de0 <compensate_humidity>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8001494:	e001      	b.n	800149a <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800149a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014b4:	2301      	movs	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 f815 	bl	80014f4 <set_osr_humidity_settings>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f842 	bl	8001568 <set_osr_press_temp_settings>
 80014e4:	4603      	mov	r3, r0
 80014e6:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014fe:	23f2      	movs	r3, #242	; 0xf2
 8001500:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800150e:	f107 010e 	add.w	r1, r7, #14
 8001512:	f107 000c 	add.w	r0, r7, #12
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	f7ff fd8c 	bl	8001036 <bme280_set_regs>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800152a:	23f4      	movs	r3, #244	; 0xf4
 800152c:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800152e:	7b38      	ldrb	r0, [r7, #12]
 8001530:	f107 010d 	add.w	r1, r7, #13
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	f7ff fd4d 	bl	8000fd6 <bme280_get_regs>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001548:	f107 010d 	add.w	r1, r7, #13
 800154c:	f107 000c 	add.w	r0, r7, #12
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	f7ff fd6f 	bl	8001036 <bme280_set_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001576:	23f4      	movs	r3, #244	; 0xf4
 8001578:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800157a:	7db8      	ldrb	r0, [r7, #22]
 800157c:	f107 0115 	add.w	r1, r7, #21
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f7ff fd27 	bl	8000fd6 <bme280_get_regs>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800158c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11f      	bne.n	80015d4 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800159e:	f107 0315 	add.w	r3, r7, #21
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f88e 	bl	80016c6 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80015b4:	f107 0315 	add.w	r3, r7, #21
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f8a0 	bl	8001700 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015c0:	f107 0115 	add.w	r1, r7, #21
 80015c4:	f107 0016 	add.w	r0, r7, #22
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff fd33 	bl	8001036 <bme280_set_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80015ee:	23f5      	movs	r3, #245	; 0xf5
 80015f0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015f2:	7db8      	ldrb	r0, [r7, #22]
 80015f4:	f107 0115 	add.w	r1, r7, #21
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fceb 	bl	8000fd6 <bme280_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11f      	bne.n	800164c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001616:	f107 0315 	add.w	r3, r7, #21
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f81b 	bl	8001658 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 800162c:	f107 0315 	add.w	r3, r7, #21
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f82d 	bl	8001692 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	f107 0016 	add.w	r0, r7, #22
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fcf7 	bl	8001036 <bme280_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f023 031c 	bic.w	r3, r3, #28
 800166c:	b25a      	sxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f003 031c 	and.w	r3, r3, #28
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	f023 031c 	bic.w	r3, r3, #28
 80016da:	b25a      	sxtb	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f003 031c 	and.w	r3, r3, #28
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	b25a      	sxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	b2da      	uxtb	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3302      	adds	r3, #2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	109b      	asrs	r3, r3, #2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2da      	uxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3303      	adds	r3, #3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	109b      	asrs	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	b2da      	uxtb	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	b2da      	uxtb	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	711a      	strb	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017a8:	23f4      	movs	r3, #244	; 0xf4
 80017aa:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017ac:	7bb8      	ldrb	r0, [r7, #14]
 80017ae:	f107 010d 	add.w	r1, r7, #13
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f7ff fc0e 	bl	8000fd6 <bme280_get_regs>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d117      	bne.n	80017f6 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017e2:	f107 010d 	add.w	r1, r7, #13
 80017e6:	f107 000e 	add.w	r0, r7, #14
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f7ff fc22 	bl	8001036 <bme280_set_regs>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800180a:	f107 0110 	add.w	r1, r7, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	20f2      	movs	r0, #242	; 0xf2
 8001814:	f7ff fbdf 	bl	8000fd6 <bme280_get_regs>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd21 	bl	800127c <bme280_soft_reset>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800183e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f808 	bl	8001862 <reload_device_settings>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	201f      	movs	r0, #31
 8001872:	f7ff fe18 	bl	80014a6 <set_osr_settings>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	201f      	movs	r0, #31
 8001888:	f7ff feaa 	bl	80015e0 <set_filter_standby_settings>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <compensate_temperature+0x18c>)
 80018ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <compensate_temperature+0x190>)
 80018b6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe20 	bl	8000504 <__aeabi_ui2d>
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <compensate_temperature+0x194>)
 80018ca:	f7fe ffbf 	bl	800084c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe12 	bl	8000504 <__aeabi_ui2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <compensate_temperature+0x198>)
 80018e6:	f7fe ffb1 	bl	800084c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fcc9 	bl	8000288 <__aeabi_dsub>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe0d 	bl	8000524 <__aeabi_i2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001912:	f7fe fe71 	bl	80005f8 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdee 	bl	8000504 <__aeabi_ui2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001930:	f7fe ff8c 	bl	800084c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fddf 	bl	8000504 <__aeabi_ui2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <compensate_temperature+0x19c>)
 800194c:	f7fe ff7e 	bl	800084c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc96 	bl	8000288 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdd0 	bl	8000524 <__aeabi_i2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fe34 	bl	80005f8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8001998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800199c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a0:	f7fe fc74 	bl	800028c <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f8d4 	bl	8000b58 <__aeabi_d2iz>
 80019b0:	4602      	mov	r2, r0
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80019b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	f7fe fc65 	bl	800028c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <compensate_temperature+0x1a0>)
 80019d0:	f7fe ff3c 	bl	800084c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80019dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e4:	f7ff f87a 	bl	8000adc <__aeabi_dcmplt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019f6:	e00c      	b.n	8001a12 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a00:	f7ff f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <compensate_temperature+0x176>
		temperature = temperature_max;
 8001a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8001a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a16:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1e:	eef0 0a67 	vmov.f32	s1, s15
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	c0440000 	.word	0xc0440000
 8001a2c:	40554000 	.word	0x40554000
 8001a30:	40d00000 	.word	0x40d00000
 8001a34:	40900000 	.word	0x40900000
 8001a38:	40c00000 	.word	0x40c00000
 8001a3c:	40b40000 	.word	0x40b40000

08001a40 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8001a4a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001db0 <compensate_pressure+0x370>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8001a54:	a3d8      	add	r3, pc, #864	; (adr r3, 8001db8 <compensate_pressure+0x378>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd5e 	bl	8000524 <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	f7fe feec 	bl	800084c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4bc1      	ldr	r3, [pc, #772]	; (8001d88 <compensate_pressure+0x348>)
 8001a82:	f7fe fc01 	bl	8000288 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a96:	f7fe fdaf 	bl	80005f8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd3b 	bl	8000524 <__aeabi_i2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fd9f 	bl	80005f8 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4bb1      	ldr	r3, [pc, #708]	; (8001d8c <compensate_pressure+0x34c>)
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd22 	bl	8000524 <__aeabi_i2d>
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	f7fe fbca 	bl	800028c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b00:	f7fe fbc4 	bl	800028c <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b9f      	ldr	r3, [pc, #636]	; (8001d90 <compensate_pressure+0x350>)
 8001b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcfb 	bl	8000524 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <compensate_pressure+0x354>)
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <compensate_pressure+0x358>)
 8001b7e:	f7fe fe65 	bl	800084c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcc7 	bl	8000524 <__aeabi_i2d>
 8001b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9a:	f7fe fd2d 	bl	80005f8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001baa:	f7fe fb6f 	bl	800028c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <compensate_pressure+0x358>)
 8001bbc:	f7fe fe46 	bl	800084c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <compensate_pressure+0x34c>)
 8001bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bd2:	f7fe fe3b 	bl	800084c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <compensate_pressure+0x35c>)
 8001be4:	f7fe fb52 	bl	800028c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	88db      	ldrh	r3, [r3, #6]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc85 	bl	8000504 <__aeabi_ui2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fcf9 	bl	80005f8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c1a:	f7fe ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 80cd 	bne.w	8001dc0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc6a 	bl	8000504 <__aeabi_ui2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <compensate_pressure+0x360>)
 8001c3a:	f7fe fb25 	bl	8000288 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <compensate_pressure+0x364>)
 8001c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c50:	f7fe fdfc 	bl	800084c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c5c:	f7fe fb14 	bl	8000288 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	a345      	add	r3, pc, #276	; (adr r3, 8001d80 <compensate_pressure+0x340>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fde5 	bl	800084c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc47 	bl	8000524 <__aeabi_i2d>
 8001c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c9a:	f7fe fcad 	bl	80005f8 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <compensate_pressure+0x368>)
 8001cbc:	f7fe fdc6 	bl	800084c <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc28 	bl	8000524 <__aeabi_i2d>
 8001cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <compensate_pressure+0x34c>)
 8001cea:	f7fe fdaf 	bl	800084c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cfe:	f7fe fac5 	bl	800028c <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	461d      	mov	r5, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc07 	bl	8000524 <__aeabi_i2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fab5 	bl	800028c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <compensate_pressure+0x36c>)
 8001d30:	f7fe fd8c 	bl	800084c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d3c:	f7fe faa6 	bl	800028c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d50:	f7fe fec4 	bl	8000adc <__aeabi_dcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <compensate_pressure+0x324>
			pressure = pressure_min;
 8001d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d62:	e031      	b.n	8001dc8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8001d64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d6c:	f7fe fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d028      	beq.n	8001dc8 <compensate_pressure+0x388>
			pressure = pressure_max;
 8001d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d7e:	e023      	b.n	8001dc8 <compensate_pressure+0x388>
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40b86a00 	.word	0x40b86a00
 8001d88:	40ef4000 	.word	0x40ef4000
 8001d8c:	40e00000 	.word	0x40e00000
 8001d90:	40100000 	.word	0x40100000
 8001d94:	40f00000 	.word	0x40f00000
 8001d98:	41200000 	.word	0x41200000
 8001d9c:	3ff00000 	.word	0x3ff00000
 8001da0:	41300000 	.word	0x41300000
 8001da4:	40b00000 	.word	0x40b00000
 8001da8:	41e00000 	.word	0x41e00000
 8001dac:	40300000 	.word	0x40300000
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40dd4c00 	.word	0x40dd4c00
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dcc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd4:	eef0 0a67 	vmov.f32	s1, s15
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dde:	bf00      	nop

08001de0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <compensate_humidity+0x220>)
 8001dfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b7d      	ldr	r3, [pc, #500]	; (8002004 <compensate_humidity+0x224>)
 8001e10:	f7fe fa3a 	bl	8000288 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <compensate_humidity+0x228>)
 8001e2e:	f7fe fbe3 	bl	80005f8 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4614      	mov	r4, r2
 8001e38:	461d      	mov	r5, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <compensate_humidity+0x22c>)
 8001e4c:	f7fe fcfe 	bl	800084c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fa10 	bl	800028c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb43 	bl	8000504 <__aeabi_ui2d>
 8001e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e82:	f7fe fa01 	bl	8000288 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <compensate_humidity+0x230>)
 8001ea0:	f7fe fcd4 	bl	800084c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb27 	bl	8000504 <__aeabi_ui2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <compensate_humidity+0x234>)
 8001ebc:	f7fe fcc6 	bl	800084c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ecc:	f7fe fb94 	bl	80005f8 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <compensate_humidity+0x238>)
 8001ede:	f7fe f9d5 	bl	800028c <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb17 	bl	8000524 <__aeabi_i2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <compensate_humidity+0x234>)
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f1c:	f7fe fb6c 	bl	80005f8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <compensate_humidity+0x238>)
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f42:	f7fe fb59 	bl	80005f8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f56:	f7fe fb4f 	bl	80005f8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fb49 	bl	80005f8 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7c:	f7fe fb3c 	bl	80005f8 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <compensate_humidity+0x23c>)
 8001f8e:	f7fe fc5d 	bl	800084c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	f04f 0000 	mov.w	r0, #0
 8001f9a:	491f      	ldr	r1, [pc, #124]	; (8002018 <compensate_humidity+0x238>)
 8001f9c:	f7fe f974 	bl	8000288 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa8:	f7fe fb26 	bl	80005f8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fbc:	f7fe fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8001fc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fce:	e00c      	b.n	8001fea <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8001fd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fd4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd8:	f7fe fd80 	bl	8000adc <__aeabi_dcmplt>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <compensate_humidity+0x20a>
		humidity = humidity_min;
 8001fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8001fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	40590000 	.word	0x40590000
 8002004:	40f2c000 	.word	0x40f2c000
 8002008:	40500000 	.word	0x40500000
 800200c:	40d00000 	.word	0x40d00000
 8002010:	40f00000 	.word	0x40f00000
 8002014:	41900000 	.word	0x41900000
 8002018:	3ff00000 	.word	0x3ff00000
 800201c:	41200000 	.word	0x41200000

08002020 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002028:	2388      	movs	r3, #136	; 0x88
 800202a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	221a      	movs	r2, #26
 8002050:	f7fe ffc1 	bl	8000fd6 <bme280_get_regs>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800205a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f84a 	bl	8002102 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800206e:	23e1      	movs	r3, #225	; 0xe1
 8002070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002074:	f107 010c 	add.w	r1, r7, #12
 8002078:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2207      	movs	r2, #7
 8002080:	f7fe ffa9 	bl	8000fd6 <bme280_get_regs>
 8002084:	4603      	mov	r3, r0
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800208a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f8e1 	bl	8002260 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
 80020bc:	e016      	b.n	80020ec <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	441a      	add	r2, r3
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	440b      	add	r3, r1
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	441a      	add	r2, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	440b      	add	r3, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	3301      	adds	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	7dfa      	ldrb	r2, [r7, #23]
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3e4      	bcc.n	80020be <interleave_reg_addr+0x14>
	}
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3310      	adds	r3, #16
 8002110:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3303      	adds	r3, #3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3305      	adds	r3, #5
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21a      	sxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3307      	adds	r3, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3306      	adds	r3, #6
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3309      	adds	r3, #9
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3308      	adds	r3, #8
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	330b      	adds	r3, #11
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	330a      	adds	r3, #10
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	330d      	adds	r3, #13
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	330c      	adds	r3, #12
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330f      	adds	r3, #15
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	330e      	adds	r3, #14
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b21a      	sxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3311      	adds	r3, #17
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3310      	adds	r3, #16
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3313      	adds	r3, #19
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b21a      	sxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3312      	adds	r3, #18
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21a      	sxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3315      	adds	r3, #21
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3314      	adds	r3, #20
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21a      	sxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3317      	adds	r3, #23
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3316      	adds	r3, #22
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21a      	sxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e5a      	ldrb	r2, [r3, #25]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	761a      	strb	r2, [r3, #24]

}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3310      	adds	r3, #16
 800226e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21a      	sxth	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	789a      	ldrb	r2, [r3, #2]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3303      	adds	r3, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b25b      	sxtb	r3, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	b29b      	uxth	r3, r3
 800229e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022ae:	8a7a      	ldrh	r2, [r7, #18]
 80022b0:	8a3b      	ldrh	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3305      	adds	r3, #5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80022d6:	89fa      	ldrh	r2, [r7, #14]
 80022d8:	89bb      	ldrh	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21a      	sxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3306      	adds	r3, #6
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4013      	ands	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e001      	b.n	8002326 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <null_ptr_check+0x26>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <null_ptr_check+0x26>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <null_ptr_check+0x26>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800235a:	23ff      	movs	r3, #255	; 0xff
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e001      	b.n	8002364 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

	// Передати в чергу !!!!!!!!!!  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);   // was 1
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <Mount_SD+0x38>)
 8002396:	f00e f98d 	bl	80106b4 <f_mount>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <Mount_SD+0x3c>)
 80023a0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <Mount_SD+0x3c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <Mount_SD+0x2a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <Mount_SD+0x40>)
 80023ac:	f7ff ffe2 	bl	8002374 <Send_Uart>
	}
	else
	{
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 80023b0:	e002      	b.n	80023b8 <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <Mount_SD+0x44>)
 80023b4:	f7ff ffde 	bl	8002374 <Send_Uart>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20005f34 	.word	0x20005f34
 80023c4:	20006f80 	.word	0x20006f80
 80023c8:	08019048 	.word	0x08019048
 80023cc:	0801906c 	.word	0x0801906c

080023d0 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80023d8:	2201      	movs	r2, #1
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	2000      	movs	r0, #0
 80023de:	f00e f969 	bl	80106b4 <f_mount>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <Unmount_SD+0x38>)
 80023e8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <Unmount_SD+0x38>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <Unmount_SD+0x2a>
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <Unmount_SD+0x3c>)
 80023f4:	f7ff ffbe 	bl	8002374 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 80023f8:	e002      	b.n	8002400 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <Unmount_SD+0x40>)
 80023fc:	f7ff ffba 	bl	8002374 <Send_Uart>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20006f80 	.word	0x20006f80
 800240c:	08019090 	.word	0x08019090
 8002410:	080190b8 	.word	0x080190b8

08002414 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800241c:	4940      	ldr	r1, [pc, #256]	; (8002520 <Create_File+0x10c>)
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f00e fe8a 	bl	8011138 <f_stat>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <Create_File+0x110>)
 800242a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800242c:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <Create_File+0x110>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d111      	bne.n	8002458 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f012 ff2f 	bl	8015298 <pvPortMalloc>
 800243a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	493a      	ldr	r1, [pc, #232]	; (8002528 <Create_File+0x114>)
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f014 fd39 	bl	8016eb8 <siprintf>
		Send_Uart(buf);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff ff94 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f012 ffef 	bl	8015430 <vPortFree>
	    return fresult;
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <Create_File+0x110>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	e05f      	b.n	8002518 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8002458:	220b      	movs	r2, #11
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4833      	ldr	r0, [pc, #204]	; (800252c <Create_File+0x118>)
 800245e:	f00e f98d 	bl	801077c <f_open>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <Create_File+0x110>)
 8002468:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <Create_File+0x110>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8002472:	2064      	movs	r0, #100	; 0x64
 8002474:	f012 ff10 	bl	8015298 <pvPortMalloc>
 8002478:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <Create_File+0x110>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	492b      	ldr	r1, [pc, #172]	; (8002530 <Create_File+0x11c>)
 8002484:	6938      	ldr	r0, [r7, #16]
 8002486:	f014 fd17 	bl	8016eb8 <siprintf>
			Send_Uart(buf);
 800248a:	6938      	ldr	r0, [r7, #16]
 800248c:	f7ff ff72 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f012 ffcd 	bl	8015430 <vPortFree>
		    return fresult;
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <Create_File+0x110>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	e03d      	b.n	8002518 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800249c:	2064      	movs	r0, #100	; 0x64
 800249e:	f012 fefb 	bl	8015298 <pvPortMalloc>
 80024a2:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4923      	ldr	r1, [pc, #140]	; (8002534 <Create_File+0x120>)
 80024a8:	69f8      	ldr	r0, [r7, #28]
 80024aa:	f014 fd05 	bl	8016eb8 <siprintf>
			Send_Uart(buf);
 80024ae:	69f8      	ldr	r0, [r7, #28]
 80024b0:	f7ff ff60 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024b4:	69f8      	ldr	r0, [r7, #28]
 80024b6:	f012 ffbb 	bl	8015430 <vPortFree>
		}

		fresult = f_close(&fil);
 80024ba:	481c      	ldr	r0, [pc, #112]	; (800252c <Create_File+0x118>)
 80024bc:	f00e fe0d 	bl	80110da <f_close>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <Create_File+0x110>)
 80024c6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <Create_File+0x110>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f012 fee1 	bl	8015298 <pvPortMalloc>
 80024d6:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <Create_File+0x110>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4915      	ldr	r1, [pc, #84]	; (8002538 <Create_File+0x124>)
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f014 fce8 	bl	8016eb8 <siprintf>
			Send_Uart(buf);
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7ff ff43 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f012 ff9e 	bl	8015430 <vPortFree>
 80024f4:	e00e      	b.n	8002514 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024f6:	2064      	movs	r0, #100	; 0x64
 80024f8:	f012 fece 	bl	8015298 <pvPortMalloc>
 80024fc:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <Create_File+0x128>)
 8002502:	69b8      	ldr	r0, [r7, #24]
 8002504:	f014 fcd8 	bl	8016eb8 <siprintf>
			Send_Uart(buf);
 8002508:	69b8      	ldr	r0, [r7, #24]
 800250a:	f7ff ff33 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f012 ff8e 	bl	8015430 <vPortFree>
		}
	}
    return fresult;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <Create_File+0x110>)
 8002516:	781b      	ldrb	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20005e1c 	.word	0x20005e1c
 8002524:	20006f80 	.word	0x20006f80
 8002528:	08019288 	.word	0x08019288
 800252c:	20006f88 	.word	0x20006f88
 8002530:	080192c0 	.word	0x080192c0
 8002534:	080192e8 	.word	0x080192e8
 8002538:	08019328 	.word	0x08019328
 800253c:	08019268 	.word	0x08019268

08002540 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800254a:	4953      	ldr	r1, [pc, #332]	; (8002698 <Update_File+0x158>)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f00e fdf3 	bl	8011138 <f_stat>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <Update_File+0x15c>)
 8002558:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <Update_File+0x15c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d011      	beq.n	8002586 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	f012 fe98 	bl	8015298 <pvPortMalloc>
 8002568:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	494c      	ldr	r1, [pc, #304]	; (80026a0 <Update_File+0x160>)
 800256e:	68b8      	ldr	r0, [r7, #8]
 8002570:	f014 fca2 	bl	8016eb8 <siprintf>
		Send_Uart (buf);
 8002574:	68b8      	ldr	r0, [r7, #8]
 8002576:	f7ff fefd 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800257a:	68b8      	ldr	r0, [r7, #8]
 800257c:	f012 ff58 	bl	8015430 <vPortFree>
	    return fresult;
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <Update_File+0x15c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	e083      	b.n	800268e <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8002586:	2232      	movs	r2, #50	; 0x32
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4846      	ldr	r0, [pc, #280]	; (80026a4 <Update_File+0x164>)
 800258c:	f00e f8f6 	bl	801077c <f_open>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <Update_File+0x15c>)
 8002596:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <Update_File+0x15c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d014      	beq.n	80025ca <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	f012 fe79 	bl	8015298 <pvPortMalloc>
 80025a6:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <Update_File+0x15c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	493d      	ldr	r1, [pc, #244]	; (80026a8 <Update_File+0x168>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f014 fc80 	bl	8016eb8 <siprintf>
	    	Send_Uart(buf);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff fedb 	bl	8002374 <Send_Uart>
	        vPortFree(buf);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f012 ff36 	bl	8015430 <vPortFree>
	        return fresult;
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <Update_File+0x15c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	e061      	b.n	800268e <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f7fd fe00 	bl	80001d0 <strlen>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <Update_File+0x16c>)
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	4833      	ldr	r0, [pc, #204]	; (80026a4 <Update_File+0x164>)
 80025d8:	f00e fb33 	bl	8010c42 <f_write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b2e      	ldr	r3, [pc, #184]	; (800269c <Update_File+0x15c>)
 80025e2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <Update_File+0x15c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	f012 fe53 	bl	8015298 <pvPortMalloc>
 80025f2:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <Update_File+0x15c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	492c      	ldr	r1, [pc, #176]	; (80026b0 <Update_File+0x170>)
 80025fe:	69b8      	ldr	r0, [r7, #24]
 8002600:	f014 fc5a 	bl	8016eb8 <siprintf>
	    	Send_Uart(buf);
 8002604:	69b8      	ldr	r0, [r7, #24]
 8002606:	f7ff feb5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800260a:	69b8      	ldr	r0, [r7, #24]
 800260c:	f012 ff10 	bl	8015430 <vPortFree>
 8002610:	e00e      	b.n	8002630 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002612:	2064      	movs	r0, #100	; 0x64
 8002614:	f012 fe40 	bl	8015298 <pvPortMalloc>
 8002618:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4925      	ldr	r1, [pc, #148]	; (80026b4 <Update_File+0x174>)
 800261e:	69f8      	ldr	r0, [r7, #28]
 8002620:	f014 fc4a 	bl	8016eb8 <siprintf>
	    	Send_Uart(buf);
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f7ff fea5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f012 ff00 	bl	8015430 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8002630:	481c      	ldr	r0, [pc, #112]	; (80026a4 <Update_File+0x164>)
 8002632:	f00e fd52 	bl	80110da <f_close>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <Update_File+0x15c>)
 800263c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <Update_File+0x15c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002646:	2064      	movs	r0, #100	; 0x64
 8002648:	f012 fe26 	bl	8015298 <pvPortMalloc>
 800264c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <Update_File+0x15c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4918      	ldr	r1, [pc, #96]	; (80026b8 <Update_File+0x178>)
 8002658:	6938      	ldr	r0, [r7, #16]
 800265a:	f014 fc2d 	bl	8016eb8 <siprintf>
	    	Send_Uart(buf);
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f7ff fe88 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002664:	6938      	ldr	r0, [r7, #16]
 8002666:	f012 fee3 	bl	8015430 <vPortFree>
 800266a:	e00e      	b.n	800268a <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f012 fe13 	bl	8015298 <pvPortMalloc>
 8002672:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4911      	ldr	r1, [pc, #68]	; (80026bc <Update_File+0x17c>)
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f014 fc1d 	bl	8016eb8 <siprintf>
	    	Send_Uart(buf);
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff fe78 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f012 fed3 	bl	8015430 <vPortFree>
	     }
	}
    return fresult;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <Update_File+0x15c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20005e1c 	.word	0x20005e1c
 800269c:	20006f80 	.word	0x20006f80
 80026a0:	08019110 	.word	0x08019110
 80026a4:	20006f88 	.word	0x20006f88
 80026a8:	08019130 	.word	0x08019130
 80026ac:	20006f78 	.word	0x20006f78
 80026b0:	0801934c 	.word	0x0801934c
 80026b4:	08019374 	.word	0x08019374
 80026b8:	08019240 	.word	0x08019240
 80026bc:	08019268 	.word	0x08019268

080026c0 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f00e fd82 	bl	80111d2 <f_mkdir>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <Create_Dir+0x70>)
 80026d4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <Create_Dir+0x70>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026de:	2064      	movs	r0, #100	; 0x64
 80026e0:	f012 fdda 	bl	8015298 <pvPortMalloc>
 80026e4:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4912      	ldr	r1, [pc, #72]	; (8002734 <Create_Dir+0x74>)
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f014 fbe4 	bl	8016eb8 <siprintf>
    	Send_Uart (buf);
 80026f0:	68b8      	ldr	r0, [r7, #8]
 80026f2:	f7ff fe3f 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 80026f6:	68b8      	ldr	r0, [r7, #8]
 80026f8:	f012 fe9a 	bl	8015430 <vPortFree>
 80026fc:	e011      	b.n	8002722 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	f012 fdca 	bl	8015298 <pvPortMalloc>
 8002704:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <Create_Dir+0x70>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <Create_Dir+0x78>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f014 fbd1 	bl	8016eb8 <siprintf>
    	Send_Uart(buf);
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fe2c 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f012 fe87 	bl	8015430 <vPortFree>
    }
    return fresult;
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <Create_Dir+0x70>)
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20006f80 	.word	0x20006f80
 8002734:	080193d4 	.word	0x080193d4
 8002738:	080193f8 	.word	0x080193f8

0800273c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <SELECT+0x14>)
 8002746:	f003 fd2d 	bl	80061a4 <HAL_GPIO_WritePin>
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020800 	.word	0x40020800

08002754 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002758:	2201      	movs	r2, #1
 800275a:	2140      	movs	r1, #64	; 0x40
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <DESELECT+0x14>)
 800275e:	f003 fd21 	bl	80061a4 <HAL_GPIO_WritePin>
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020800 	.word	0x40020800

0800276c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002776:	bf00      	nop
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <SPI_TxByte+0x30>)
 800277a:	f007 fe92 	bl	800a4a2 <HAL_SPI_GetState>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d1f9      	bne.n	8002778 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002784:	1df9      	adds	r1, r7, #7
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	2201      	movs	r2, #1
 800278c:	4803      	ldr	r0, [pc, #12]	; (800279c <SPI_TxByte+0x30>)
 800278e:	f007 fbaa 	bl	8009ee6 <HAL_SPI_Transmit>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20010ff0 	.word	0x20010ff0

080027a0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80027a6:	23ff      	movs	r3, #255	; 0xff
 80027a8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80027ae:	bf00      	nop
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <SPI_RxByte+0x38>)
 80027b2:	f007 fe76 	bl	800a4a2 <HAL_SPI_GetState>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d1f9      	bne.n	80027b0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027bc:	1dba      	adds	r2, r7, #6
 80027be:	1df9      	adds	r1, r7, #7
 80027c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <SPI_RxByte+0x38>)
 80027ca:	f007 fcc8 	bl	800a15e <HAL_SPI_TransmitReceive>
  
  return data;
 80027ce:	79bb      	ldrb	r3, [r7, #6]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20010ff0 	.word	0x20010ff0

080027dc <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80027e4:	f7ff ffdc 	bl	80027a0 <SPI_RxByte>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <SD_ReadyWait+0x34>)
 8002800:	2232      	movs	r2, #50	; 0x32
 8002802:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002804:	f7ff ffcc 	bl	80027a0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8002808:	f7ff ffca 	bl	80027a0 <SPI_RxByte>
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d004      	beq.n	8002820 <SD_ReadyWait+0x28>
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <SD_ReadyWait+0x34>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f3      	bne.n	8002808 <SD_ReadyWait+0x10>
  
  return res;
 8002820:	79fb      	ldrb	r3, [r7, #7]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20010fe8 	.word	0x20010fe8

08002830 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8002836:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800283a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800283c:	f7ff ff8a 	bl	8002754 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e005      	b.n	8002852 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002846:	20ff      	movs	r0, #255	; 0xff
 8002848:	f7ff ff90 	bl	800276c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	3301      	adds	r3, #1
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b09      	cmp	r3, #9
 8002856:	ddf6      	ble.n	8002846 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002858:	f7ff ff70 	bl	800273c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800285c:	2340      	movs	r3, #64	; 0x40
 800285e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002870:	2395      	movs	r3, #149	; 0x95
 8002872:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e009      	b.n	800288e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800287a:	1d3a      	adds	r2, r7, #4
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff72 	bl	800276c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b05      	cmp	r3, #5
 8002892:	ddf2      	ble.n	800287a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8002894:	e002      	b.n	800289c <SD_PowerOn+0x6c>
  {
    Count--;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3b01      	subs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800289c:	f7ff ff80 	bl	80027a0 <SPI_RxByte>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d002      	beq.n	80028ac <SD_PowerOn+0x7c>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f4      	bne.n	8002896 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80028ac:	f7ff ff52 	bl	8002754 <DESELECT>
  SPI_TxByte(0XFF);
 80028b0:	20ff      	movs	r0, #255	; 0xff
 80028b2:	f7ff ff5b 	bl	800276c <SPI_TxByte>
  
  PowerFlag = 1;
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <SD_PowerOn+0x94>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000038d 	.word	0x2000038d

080028c8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <SD_PowerOff+0x14>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	2000038d 	.word	0x2000038d

080028e0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <SD_CheckPower+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000038d 	.word	0x2000038d

080028f8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <SD_RxDataBlock+0x68>)
 8002904:	220a      	movs	r2, #10
 8002906:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8002908:	f7ff ff4a 	bl	80027a0 <SPI_RxByte>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d104      	bne.n	8002920 <SD_RxDataBlock+0x28>
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <SD_RxDataBlock+0x68>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f3      	bne.n	8002908 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2bfe      	cmp	r3, #254	; 0xfe
 8002924:	d001      	beq.n	800292a <SD_RxDataBlock+0x32>
    return FALSE;
 8002926:	2300      	movs	r3, #0
 8002928:	e016      	b.n	8002958 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff53 	bl	80027dc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff4d 	bl	80027dc <SPI_RxBytePtr>
  } while(btr -= 2);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3b02      	subs	r3, #2
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ed      	bne.n	800292a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800294e:	f7ff ff27 	bl	80027a0 <SPI_RxByte>
  SPI_RxByte();
 8002952:	f7ff ff25 	bl	80027a0 <SPI_RxByte>
  
  return TRUE;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20012150 	.word	0x20012150

08002964 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002974:	f7ff ff40 	bl	80027f8 <SD_ReadyWait>
 8002978:	4603      	mov	r3, r0
 800297a:	2bff      	cmp	r3, #255	; 0xff
 800297c:	d001      	beq.n	8002982 <SD_TxDataBlock+0x1e>
    return FALSE;
 800297e:	2300      	movs	r3, #0
 8002980:	e040      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fef1 	bl	800276c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	2bfd      	cmp	r3, #253	; 0xfd
 800298e:	d031      	beq.n	80029f4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fee5 	bl	800276c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fede 	bl	800276c <SPI_TxByte>
    } while (--wc);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	73bb      	strb	r3, [r7, #14]
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1eb      	bne.n	8002994 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80029bc:	f7ff fef0 	bl	80027a0 <SPI_RxByte>
    SPI_RxByte();
 80029c0:	f7ff feee 	bl	80027a0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80029c4:	e00b      	b.n	80029de <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80029c6:	f7ff feeb 	bl	80027a0 <SPI_RxByte>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d006      	beq.n	80029e6 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80029d8:	7b7b      	ldrb	r3, [r7, #13]
 80029da:	3301      	adds	r3, #1
 80029dc:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80029de:	7b7b      	ldrb	r3, [r7, #13]
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d9f0      	bls.n	80029c6 <SD_TxDataBlock+0x62>
 80029e4:	e000      	b.n	80029e8 <SD_TxDataBlock+0x84>
        break;
 80029e6:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80029e8:	bf00      	nop
 80029ea:	f7ff fed9 	bl	80027a0 <SPI_RxByte>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0fa      	beq.n	80029ea <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d101      	bne.n	8002a02 <SD_TxDataBlock+0x9e>
    return TRUE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002a18:	f7ff feee 	bl	80027f8 <SD_ReadyWait>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d001      	beq.n	8002a26 <SD_SendCmd+0x1a>
    return 0xFF;
 8002a22:	23ff      	movs	r3, #255	; 0xff
 8002a24:	e040      	b.n	8002aa8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fe9f 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	0e1b      	lsrs	r3, r3, #24
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe99 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fe93 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fe8d 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fe88 	bl	800276c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d101      	bne.n	8002a6a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002a66:	2395      	movs	r3, #149	; 0x95
 8002a68:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b48      	cmp	r3, #72	; 0x48
 8002a6e:	d101      	bne.n	8002a74 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002a70:	2387      	movs	r3, #135	; 0x87
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe78 	bl	800276c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b4c      	cmp	r3, #76	; 0x4c
 8002a80:	d101      	bne.n	8002a86 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002a82:	f7ff fe8d 	bl	80027a0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8002a86:	230a      	movs	r3, #10
 8002a88:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8002a8a:	f7ff fe89 	bl	80027a0 <SPI_RxByte>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002a92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da05      	bge.n	8002aa6 <SD_SendCmd+0x9a>
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	73bb      	strb	r3, [r7, #14]
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f1      	bne.n	8002a8a <SD_SendCmd+0x7e>
  
  return res;
 8002aa6:	7b7b      	ldrb	r3, [r7, #13]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d5      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002ac4:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <SD_disk_initialize+0x2a>
    return Stat;        
 8002ad2:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e0ca      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8002ada:	f7ff fea9 	bl	8002830 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002ade:	f7ff fe2d 	bl	800273c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2040      	movs	r0, #64	; 0x40
 8002aea:	f7ff ff8f 	bl	8002a0c <SD_SendCmd>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	f040 80a5 	bne.w	8002c40 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8002af6:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002af8:	2264      	movs	r2, #100	; 0x64
 8002afa:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002afc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b00:	2048      	movs	r0, #72	; 0x48
 8002b02:	f7ff ff83 	bl	8002a0c <SD_SendCmd>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d158      	bne.n	8002bbe <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e00c      	b.n	8002b2c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002b12:	7bfc      	ldrb	r4, [r7, #15]
 8002b14:	f7ff fe44 	bl	80027a0 <SPI_RxByte>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4423      	add	r3, r4
 8002b22:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d9ef      	bls.n	8002b12 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002b32:	7abb      	ldrb	r3, [r7, #10]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 8083 	bne.w	8002c40 <SD_disk_initialize+0x190>
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	2baa      	cmp	r3, #170	; 0xaa
 8002b3e:	d17f      	bne.n	8002c40 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002b40:	2100      	movs	r1, #0
 8002b42:	2077      	movs	r0, #119	; 0x77
 8002b44:	f7ff ff62 	bl	8002a0c <SD_SendCmd>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d807      	bhi.n	8002b5e <SD_disk_initialize+0xae>
 8002b4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b52:	2069      	movs	r0, #105	; 0x69
 8002b54:	f7ff ff5a 	bl	8002a0c <SD_SendCmd>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1eb      	bne.n	8002b40 <SD_disk_initialize+0x90>
 8002b68:	e000      	b.n	8002b6c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002b6a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d064      	beq.n	8002c40 <SD_disk_initialize+0x190>
 8002b76:	2100      	movs	r1, #0
 8002b78:	207a      	movs	r0, #122	; 0x7a
 8002b7a:	f7ff ff47 	bl	8002a0c <SD_SendCmd>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d15d      	bne.n	8002c40 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	e00c      	b.n	8002ba4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002b8a:	7bfc      	ldrb	r4, [r7, #15]
 8002b8c:	f7ff fe08 	bl	80027a0 <SPI_RxByte>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	4423      	add	r3, r4
 8002b9a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d9ef      	bls.n	8002b8a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002baa:	7a3b      	ldrb	r3, [r7, #8]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SD_disk_initialize+0x108>
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	e000      	b.n	8002bba <SD_disk_initialize+0x10a>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	73bb      	strb	r3, [r7, #14]
 8002bbc:	e040      	b.n	8002c40 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2077      	movs	r0, #119	; 0x77
 8002bc2:	f7ff ff23 	bl	8002a0c <SD_SendCmd>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d808      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2069      	movs	r0, #105	; 0x69
 8002bd0:	f7ff ff1c 	bl	8002a0c <SD_SendCmd>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d801      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e000      	b.n	8002be0 <SD_disk_initialize+0x130>
 8002bde:	2301      	movs	r3, #1
 8002be0:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d10e      	bne.n	8002c06 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002be8:	2100      	movs	r1, #0
 8002bea:	2077      	movs	r0, #119	; 0x77
 8002bec:	f7ff ff0e 	bl	8002a0c <SD_SendCmd>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d80e      	bhi.n	8002c14 <SD_disk_initialize+0x164>
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2069      	movs	r0, #105	; 0x69
 8002bfa:	f7ff ff07 	bl	8002a0c <SD_SendCmd>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002c04:	e00d      	b.n	8002c22 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8002c06:	2100      	movs	r1, #0
 8002c08:	2041      	movs	r0, #65	; 0x41
 8002c0a:	f7ff feff 	bl	8002a0c <SD_SendCmd>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e1      	bne.n	8002be2 <SD_disk_initialize+0x132>
 8002c1e:	e000      	b.n	8002c22 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002c20:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <SD_disk_initialize+0x18c>
 8002c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c30:	2050      	movs	r0, #80	; 0x50
 8002c32:	f7ff feeb 	bl	8002a0c <SD_SendCmd>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <SD_disk_initialize+0x1d0>)
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8002c46:	f7ff fd85 	bl	8002754 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002c4a:	f7ff fda9 	bl	80027a0 <SPI_RxByte>
  
  if (type) 
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e001      	b.n	8002c6a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002c66:	f7ff fe2f 	bl	80028c8 <SD_PowerOff>
  }
  
  return Stat;
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20012150 	.word	0x20012150
 8002c80:	2000038c 	.word	0x2000038c

08002c84 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002c94:	2301      	movs	r3, #1
 8002c96:	e002      	b.n	8002c9e <SD_disk_status+0x1a>
  
  return Stat;
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SD_disk_status+0x28>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <SD_disk_read+0x1c>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <SD_disk_read+0x20>
    return RES_PARERR;
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e051      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <SD_disk_read+0xcc>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e048      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <SD_disk_read+0xd0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	025b      	lsls	r3, r3, #9
 8002cf2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002cf4:	f7ff fd22 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d111      	bne.n	8002d22 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	2051      	movs	r0, #81	; 0x51
 8002d02:	f7ff fe83 	bl	8002a0c <SD_SendCmd>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d129      	bne.n	8002d60 <SD_disk_read+0xb0>
 8002d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	f7ff fdf1 	bl	80028f8 <SD_RxDataBlock>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d021      	beq.n	8002d60 <SD_disk_read+0xb0>
      count = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	e01e      	b.n	8002d60 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	2052      	movs	r0, #82	; 0x52
 8002d26:	f7ff fe71 	bl	8002a0c <SD_SendCmd>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d117      	bne.n	8002d60 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	f7ff fddf 	bl	80028f8 <SD_RxDataBlock>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d46:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ed      	bne.n	8002d30 <SD_disk_read+0x80>
 8002d54:	e000      	b.n	8002d58 <SD_disk_read+0xa8>
          break;
 8002d56:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002d58:	2100      	movs	r1, #0
 8002d5a:	204c      	movs	r0, #76	; 0x4c
 8002d5c:	f7ff fe56 	bl	8002a0c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002d60:	f7ff fcf8 	bl	8002754 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002d64:	f7ff fd1c 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	2000038c 	.word	0x2000038c

08002d84 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <SD_disk_write+0x1c>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <SD_disk_write+0x20>
    return RES_PARERR;
 8002da0:	2304      	movs	r3, #4
 8002da2:	e06b      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <SD_disk_write+0x100>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e062      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <SD_disk_write+0x100>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e059      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <SD_disk_write+0x104>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002dda:	f7ff fcaf 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d110      	bne.n	8002e06 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	2058      	movs	r0, #88	; 0x58
 8002de8:	f7ff fe10 	bl	8002a0c <SD_SendCmd>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13a      	bne.n	8002e68 <SD_disk_write+0xe4>
 8002df2:	21fe      	movs	r1, #254	; 0xfe
 8002df4:	68b8      	ldr	r0, [r7, #8]
 8002df6:	f7ff fdb5 	bl	8002964 <SD_TxDataBlock>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d033      	beq.n	8002e68 <SD_disk_write+0xe4>
      count = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	e030      	b.n	8002e68 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <SD_disk_write+0x104>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002e12:	2100      	movs	r1, #0
 8002e14:	2077      	movs	r0, #119	; 0x77
 8002e16:	f7ff fdf9 	bl	8002a0c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	2057      	movs	r0, #87	; 0x57
 8002e1e:	f7ff fdf5 	bl	8002a0c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	2059      	movs	r0, #89	; 0x59
 8002e26:	f7ff fdf1 	bl	8002a0c <SD_SendCmd>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11b      	bne.n	8002e68 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002e30:	21fc      	movs	r1, #252	; 0xfc
 8002e32:	68b8      	ldr	r0, [r7, #8]
 8002e34:	f7ff fd96 	bl	8002964 <SD_TxDataBlock>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e44:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ee      	bne.n	8002e30 <SD_disk_write+0xac>
 8002e52:	e000      	b.n	8002e56 <SD_disk_write+0xd2>
          break;
 8002e54:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002e56:	21fd      	movs	r1, #253	; 0xfd
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7ff fd83 	bl	8002964 <SD_TxDataBlock>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002e64:	2301      	movs	r3, #1
 8002e66:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002e68:	f7ff fc74 	bl	8002754 <DESELECT>
  SPI_RxByte();
 8002e6c:	f7ff fc98 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf14      	ite	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000000 	.word	0x20000000
 8002e88:	2000038c 	.word	0x2000038c

08002e8c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b08b      	sub	sp, #44	; 0x2c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	603a      	str	r2, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e11b      	b.n	80030e2 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d129      	bne.n	8002f0a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d017      	beq.n	8002eee <SD_disk_ioctl+0x62>
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	dc1f      	bgt.n	8002f02 <SD_disk_ioctl+0x76>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <SD_disk_ioctl+0x40>
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00b      	beq.n	8002ee2 <SD_disk_ioctl+0x56>
 8002eca:	e01a      	b.n	8002f02 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002ecc:	f7ff fd08 	bl	80028e0 <SD_CheckPower>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002ed6:	f7ff fcf7 	bl	80028c8 <SD_PowerOff>
      res = RES_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002ee0:	e0fd      	b.n	80030de <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002ee2:	f7ff fca5 	bl	8002830 <SD_PowerOn>
      res = RES_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002eec:	e0f7      	b.n	80030de <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	1c5c      	adds	r4, r3, #1
 8002ef2:	f7ff fcf5 	bl	80028e0 <SD_CheckPower>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002f00:	e0ed      	b.n	80030de <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002f02:	2304      	movs	r3, #4
 8002f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f08:	e0e9      	b.n	80030de <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002f0a:	4b78      	ldr	r3, [pc, #480]	; (80030ec <SD_disk_ioctl+0x260>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0e2      	b.n	80030e2 <SD_disk_ioctl+0x256>
    
    SELECT();
 8002f1c:	f7ff fc0e 	bl	800273c <SELECT>
    
    switch (ctrl) 
 8002f20:	79bb      	ldrb	r3, [r7, #6]
 8002f22:	2b0d      	cmp	r3, #13
 8002f24:	f200 80cc 	bhi.w	80030c0 <SD_disk_ioctl+0x234>
 8002f28:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <SD_disk_ioctl+0xa4>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	0800302b 	.word	0x0800302b
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	0800301b 	.word	0x0800301b
 8002f3c:	080030c1 	.word	0x080030c1
 8002f40:	080030c1 	.word	0x080030c1
 8002f44:	080030c1 	.word	0x080030c1
 8002f48:	080030c1 	.word	0x080030c1
 8002f4c:	080030c1 	.word	0x080030c1
 8002f50:	080030c1 	.word	0x080030c1
 8002f54:	080030c1 	.word	0x080030c1
 8002f58:	080030c1 	.word	0x080030c1
 8002f5c:	0800303d 	.word	0x0800303d
 8002f60:	08003061 	.word	0x08003061
 8002f64:	08003085 	.word	0x08003085
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2049      	movs	r0, #73	; 0x49
 8002f6c:	f7ff fd4e 	bl	8002a0c <SD_SendCmd>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 80a8 	bne.w	80030c8 <SD_disk_ioctl+0x23c>
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fcba 	bl	80028f8 <SD_RxDataBlock>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 809e 	beq.w	80030c8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8002f8c:	7b3b      	ldrb	r3, [r7, #12]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10e      	bne.n	8002fb4 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002f96:	7d7b      	ldrb	r3, [r7, #21]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	7d3b      	ldrb	r3, [r7, #20]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002faa:	8bfb      	ldrh	r3, [r7, #30]
 8002fac:	029a      	lsls	r2, r3, #10
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e02e      	b.n	8003012 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002fb4:	7c7b      	ldrb	r3, [r7, #17]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	7dbb      	ldrb	r3, [r7, #22]
 8002fbe:	09db      	lsrs	r3, r3, #7
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	7d7b      	ldrb	r3, [r7, #21]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0306 	and.w	r3, r3, #6
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002fdc:	7d3b      	ldrb	r3, [r7, #20]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	7cbb      	ldrb	r3, [r7, #18]
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003004:	8bfa      	ldrh	r2, [r7, #30]
 8003006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800300a:	3b09      	subs	r3, #9
 800300c:	409a      	lsls	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8003018:	e056      	b.n	80030c8 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003028:	e055      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800302a:	f7ff fbe5 	bl	80027f8 <SD_ReadyWait>
 800302e:	4603      	mov	r3, r0
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d14b      	bne.n	80030cc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800303a:	e047      	b.n	80030cc <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800303c:	2100      	movs	r1, #0
 800303e:	2049      	movs	r0, #73	; 0x49
 8003040:	f7ff fce4 	bl	8002a0c <SD_SendCmd>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d142      	bne.n	80030d0 <SD_disk_ioctl+0x244>
 800304a:	2110      	movs	r1, #16
 800304c:	6a38      	ldr	r0, [r7, #32]
 800304e:	f7ff fc53 	bl	80028f8 <SD_RxDataBlock>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d03b      	beq.n	80030d0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800305e:	e037      	b.n	80030d0 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003060:	2100      	movs	r1, #0
 8003062:	204a      	movs	r0, #74	; 0x4a
 8003064:	f7ff fcd2 	bl	8002a0c <SD_SendCmd>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d132      	bne.n	80030d4 <SD_disk_ioctl+0x248>
 800306e:	2110      	movs	r1, #16
 8003070:	6a38      	ldr	r0, [r7, #32]
 8003072:	f7ff fc41 	bl	80028f8 <SD_RxDataBlock>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02b      	beq.n	80030d4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003082:	e027      	b.n	80030d4 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8003084:	2100      	movs	r1, #0
 8003086:	207a      	movs	r0, #122	; 0x7a
 8003088:	f7ff fcc0 	bl	8002a0c <SD_SendCmd>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003098:	e00b      	b.n	80030b2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800309a:	6a3c      	ldr	r4, [r7, #32]
 800309c:	1c63      	adds	r3, r4, #1
 800309e:	623b      	str	r3, [r7, #32]
 80030a0:	f7ff fb7e 	bl	80027a0 <SPI_RxByte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80030a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030ac:	3301      	adds	r3, #1
 80030ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d9ef      	bls.n	800309a <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80030c0:	2304      	movs	r3, #4
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030c6:	e006      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d4:	bf00      	nop
    }
    
    DESELECT();
 80030d6:	f7ff fb3d 	bl	8002754 <DESELECT>
    SPI_RxByte();
 80030da:	f7ff fb61 	bl	80027a0 <SPI_RxByte>
  }
  
  return res;
 80030de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	372c      	adds	r7, #44	; 0x2c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000000 	.word	0x20000000

080030f0 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	603a      	str	r2, [r7, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	460b      	mov	r3, r1
 8003100:	71bb      	strb	r3, [r7, #6]
 8003102:	4613      	mov	r3, r2
 8003104:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	b29b      	uxth	r3, r3
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	b299      	uxth	r1, r3
 800310e:	1dba      	adds	r2, r7, #6
 8003110:	230a      	movs	r3, #10
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	4811      	ldr	r0, [pc, #68]	; (800315c <user_i2c_read+0x6c>)
 8003118:	f003 f9bc 	bl	8006494 <HAL_I2C_Master_Transmit>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <user_i2c_read+0x38>
 8003122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003126:	e014      	b.n	8003152 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	b21b      	sxth	r3, r3
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	b21b      	sxth	r3, r3
 8003134:	b299      	uxth	r1, r3
 8003136:	88bb      	ldrh	r3, [r7, #4]
 8003138:	220a      	movs	r2, #10
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4807      	ldr	r0, [pc, #28]	; (800315c <user_i2c_read+0x6c>)
 8003140:	f003 faa6 	bl	8006690 <HAL_I2C_Master_Receive>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <user_i2c_read+0x60>
 800314a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800314e:	e000      	b.n	8003152 <user_i2c_read+0x62>

  return 0;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200080bc 	.word	0x200080bc

08003160 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f002 fd79 	bl	8005c60 <HAL_Delay>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af02      	add	r7, sp, #8
 800317e:	603a      	str	r2, [r7, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	460b      	mov	r3, r1
 8003188:	71bb      	strb	r3, [r7, #6]
 800318a:	4613      	mov	r3, r2
 800318c:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800318e:	88bb      	ldrh	r3, [r7, #4]
 8003190:	3301      	adds	r3, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f013 f8dc 	bl	8016350 <malloc>
 8003198:	4603      	mov	r3, r0
 800319a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 800319c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	88ba      	ldrh	r2, [r7, #4]
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f013 f8df 	bl	8016370 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	b299      	uxth	r1, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	3301      	adds	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4808      	ldr	r0, [pc, #32]	; (80031ec <user_i2c_write+0x74>)
 80031ca:	f003 f963 	bl	8006494 <HAL_I2C_Master_Transmit>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <user_i2c_write+0x62>
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d8:	e003      	b.n	80031e2 <user_i2c_write+0x6a>

  free(buf);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f013 f8c0 	bl	8016360 <free>
  return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200080bc 	.word	0x200080bc

080031f0 <delay_us>:
//
//}


bool delay_us(uint16_t us)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <delay_us+0x50>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <delay_us+0x54>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <delay_us+0x58>)
 8003212:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8003214:	480a      	ldr	r0, [pc, #40]	; (8003240 <delay_us+0x50>)
 8003216:	f007 fa6d 	bl	800a6f4 <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 800321a:	bf00      	nop
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <delay_us+0x58>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1fb      	bne.n	800321c <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8003224:	4806      	ldr	r0, [pc, #24]	; (8003240 <delay_us+0x50>)
 8003226:	f007 fad5 	bl	800a7d4 <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <delay_us+0x58>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
	int s = 99;
 8003230:	2363      	movs	r3, #99	; 0x63
 8003232:	60fb      	str	r3, [r7, #12]
	return true;
 8003234:	2301      	movs	r3, #1
//	{
//
//	}
//	//HAL_TIM_Base_Stop_IT(&htim10);
//	return true;
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200091d8 	.word	0x200091d8
 8003244:	cccccccd 	.word	0xcccccccd
 8003248:	2000077c 	.word	0x2000077c

0800324c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003250:	f002 fcc4 	bl	8005bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003254:	f000 f8a2 	bl	800339c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003258:	f000 fb42 	bl	80038e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800325c:	f000 fad0 	bl	8003800 <MX_TIM3_Init>
  MX_I2C3_Init();
 8003260:	f000 f908 	bl	8003474 <MX_I2C3_Init>
  MX_TIM2_Init();
 8003264:	f000 fa80 	bl	8003768 <MX_TIM2_Init>
  MX_TIM10_Init();
 8003268:	f000 fb18 	bl	800389c <MX_TIM10_Init>
  MX_SPI1_Init();
 800326c:	f000 f9be 	bl	80035ec <MX_SPI1_Init>
  MX_FATFS_Init();
 8003270:	f009 fa1a 	bl	800c6a8 <MX_FATFS_Init>
  MX_TIM1_Init();
 8003274:	f000 fa26 	bl	80036c4 <MX_TIM1_Init>
  MX_RTC_Init();
 8003278:	f000 f92a 	bl	80034d0 <MX_RTC_Init>
  MX_SPI2_Init();
 800327c:	f000 f9ec 	bl	8003658 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8003280:	482a      	ldr	r0, [pc, #168]	; (800332c <main+0xe0>)
 8003282:	f007 fa37 	bl	800a6f4 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim10);			// Using for generate us delays
  HAL_TIM_Base_Start_IT(&htim1);			// Blink Green LED
 8003286:	482a      	ldr	r0, [pc, #168]	; (8003330 <main+0xe4>)
 8003288:	f007 fa34 	bl	800a6f4 <HAL_TIM_Base_Start_IT>


  LCD_init();
 800328c:	f002 fc6c 	bl	8005b68 <LCD_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003290:	f00e faaa 	bl	80117e8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <main+0xe8>)
 8003296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800329a:	200a      	movs	r0, #10
 800329c:	f00e fcde 	bl	8011c5c <osMessageQueueNew>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4a25      	ldr	r2, [pc, #148]	; (8003338 <main+0xec>)
 80032a4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80032a6:	4a25      	ldr	r2, [pc, #148]	; (800333c <main+0xf0>)
 80032a8:	2100      	movs	r1, #0
 80032aa:	4825      	ldr	r0, [pc, #148]	; (8003340 <main+0xf4>)
 80032ac:	f00e fae6 	bl	801187c <osThreadNew>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4a24      	ldr	r2, [pc, #144]	; (8003344 <main+0xf8>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* creation of Blue_LED_Blink */
  Blue_LED_BlinkHandle = osThreadNew(Start_Blue_LED_Blink, NULL, &Blue_LED_Blink_attributes);
 80032b6:	4a24      	ldr	r2, [pc, #144]	; (8003348 <main+0xfc>)
 80032b8:	2100      	movs	r1, #0
 80032ba:	4824      	ldr	r0, [pc, #144]	; (800334c <main+0x100>)
 80032bc:	f00e fade 	bl	801187c <osThreadNew>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4a23      	ldr	r2, [pc, #140]	; (8003350 <main+0x104>)
 80032c4:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80032c6:	4a23      	ldr	r2, [pc, #140]	; (8003354 <main+0x108>)
 80032c8:	2100      	movs	r1, #0
 80032ca:	4823      	ldr	r0, [pc, #140]	; (8003358 <main+0x10c>)
 80032cc:	f00e fad6 	bl	801187c <osThreadNew>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4a22      	ldr	r2, [pc, #136]	; (800335c <main+0x110>)
 80032d4:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 80032d6:	4a22      	ldr	r2, [pc, #136]	; (8003360 <main+0x114>)
 80032d8:	2100      	movs	r1, #0
 80032da:	4822      	ldr	r0, [pc, #136]	; (8003364 <main+0x118>)
 80032dc:	f00e face 	bl	801187c <osThreadNew>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4a21      	ldr	r2, [pc, #132]	; (8003368 <main+0x11c>)
 80032e4:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <main+0x120>)
 80032e8:	2100      	movs	r1, #0
 80032ea:	4821      	ldr	r0, [pc, #132]	; (8003370 <main+0x124>)
 80032ec:	f00e fac6 	bl	801187c <osThreadNew>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4a20      	ldr	r2, [pc, #128]	; (8003374 <main+0x128>)
 80032f4:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 80032f6:	4a20      	ldr	r2, [pc, #128]	; (8003378 <main+0x12c>)
 80032f8:	2100      	movs	r1, #0
 80032fa:	4820      	ldr	r0, [pc, #128]	; (800337c <main+0x130>)
 80032fc:	f00e fabe 	bl	801187c <osThreadNew>
 8003300:	4603      	mov	r3, r0
 8003302:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <main+0x134>)
 8003304:	6013      	str	r3, [r2, #0]

  /* creation of SD_CARD */
  SD_CARDHandle = osThreadNew(Start_SD_CARD, NULL, &SD_CARD_attributes);
 8003306:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <main+0x138>)
 8003308:	2100      	movs	r1, #0
 800330a:	481f      	ldr	r0, [pc, #124]	; (8003388 <main+0x13c>)
 800330c:	f00e fab6 	bl	801187c <osThreadNew>
 8003310:	4603      	mov	r3, r0
 8003312:	4a1e      	ldr	r2, [pc, #120]	; (800338c <main+0x140>)
 8003314:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 8003316:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <main+0x144>)
 8003318:	2100      	movs	r1, #0
 800331a:	481e      	ldr	r0, [pc, #120]	; (8003394 <main+0x148>)
 800331c:	f00e faae 	bl	801187c <osThreadNew>
 8003320:	4603      	mov	r3, r0
 8003322:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <main+0x14c>)
 8003324:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003326:	f00e fa83 	bl	8011830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800332a:	e7fe      	b.n	800332a <main+0xde>
 800332c:	2000dba8 	.word	0x2000dba8
 8003330:	20010d98 	.word	0x20010d98
 8003334:	08019898 	.word	0x08019898
 8003338:	2000a3a4 	.word	0x2000a3a4
 800333c:	08019778 	.word	0x08019778
 8003340:	08003bdd 	.word	0x08003bdd
 8003344:	20008078 	.word	0x20008078
 8003348:	0801979c 	.word	0x0801979c
 800334c:	08003c31 	.word	0x08003c31
 8003350:	200091b8 	.word	0x200091b8
 8003354:	080197c0 	.word	0x080197c0
 8003358:	08003ead 	.word	0x08003ead
 800335c:	20010fec 	.word	0x20010fec
 8003360:	080197e4 	.word	0x080197e4
 8003364:	0800411d 	.word	0x0800411d
 8003368:	2000dbf0 	.word	0x2000dbf0
 800336c:	08019808 	.word	0x08019808
 8003370:	08004179 	.word	0x08004179
 8003374:	200132d4 	.word	0x200132d4
 8003378:	0801982c 	.word	0x0801982c
 800337c:	080044f1 	.word	0x080044f1
 8003380:	20010fe4 	.word	0x20010fe4
 8003384:	08019850 	.word	0x08019850
 8003388:	080048ad 	.word	0x080048ad
 800338c:	2000a220 	.word	0x2000a220
 8003390:	08019874 	.word	0x08019874
 8003394:	08004969 	.word	0x08004969
 8003398:	2000fbf4 	.word	0x2000fbf4

0800339c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b094      	sub	sp, #80	; 0x50
 80033a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033a2:	f107 0320 	add.w	r3, r7, #32
 80033a6:	2230      	movs	r2, #48	; 0x30
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f012 ffee 	bl	801638c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033b0:	f107 030c 	add.w	r3, r7, #12
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	4b29      	ldr	r3, [pc, #164]	; (800346c <SystemClock_Config+0xd0>)
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	4a28      	ldr	r2, [pc, #160]	; (800346c <SystemClock_Config+0xd0>)
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	6413      	str	r3, [r2, #64]	; 0x40
 80033d0:	4b26      	ldr	r3, [pc, #152]	; (800346c <SystemClock_Config+0xd0>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033dc:	2300      	movs	r3, #0
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <SystemClock_Config+0xd4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a22      	ldr	r2, [pc, #136]	; (8003470 <SystemClock_Config+0xd4>)
 80033e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b20      	ldr	r3, [pc, #128]	; (8003470 <SystemClock_Config+0xd4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80033f8:	2305      	movs	r3, #5
 80033fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003402:	2301      	movs	r3, #1
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003406:	2302      	movs	r3, #2
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800340a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800340e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003410:	2308      	movs	r3, #8
 8003412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003414:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800341a:	2302      	movs	r3, #2
 800341c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800341e:	2307      	movs	r3, #7
 8003420:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003422:	f107 0320 	add.w	r3, r7, #32
 8003426:	4618      	mov	r0, r3
 8003428:	f005 fb16 	bl	8008a58 <HAL_RCC_OscConfig>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003432:	f001 fb05 	bl	8004a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003436:	230f      	movs	r3, #15
 8003438:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800343a:	2302      	movs	r3, #2
 800343c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003442:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003446:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	2105      	movs	r1, #5
 8003454:	4618      	mov	r0, r3
 8003456:	f005 fd77 	bl	8008f48 <HAL_RCC_ClockConfig>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003460:	f001 faee 	bl	8004a40 <Error_Handler>
  }
}
 8003464:	bf00      	nop
 8003466:	3750      	adds	r7, #80	; 0x50
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	40007000 	.word	0x40007000

08003474 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <MX_I2C3_Init+0x50>)
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <MX_I2C3_Init+0x54>)
 800347c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <MX_I2C3_Init+0x50>)
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <MX_I2C3_Init+0x58>)
 8003482:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <MX_I2C3_Init+0x50>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <MX_I2C3_Init+0x50>)
 800348c:	2200      	movs	r2, #0
 800348e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <MX_I2C3_Init+0x50>)
 8003492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003496:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <MX_I2C3_Init+0x50>)
 800349a:	2200      	movs	r2, #0
 800349c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <MX_I2C3_Init+0x50>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <MX_I2C3_Init+0x50>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <MX_I2C3_Init+0x50>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034b0:	4804      	ldr	r0, [pc, #16]	; (80034c4 <MX_I2C3_Init+0x50>)
 80034b2:	f002 feab 	bl	800620c <HAL_I2C_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80034bc:	f001 fac0 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	200080bc 	.word	0x200080bc
 80034c8:	40005c00 	.word	0x40005c00
 80034cc:	000186a0 	.word	0x000186a0

080034d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b090      	sub	sp, #64	; 0x40
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80034d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	605a      	str	r2, [r3, #4]
 80034e0:	609a      	str	r2, [r3, #8]
 80034e2:	60da      	str	r2, [r3, #12]
 80034e4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80034e6:	2300      	movs	r3, #0
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80034ea:	463b      	mov	r3, r7
 80034ec:	2228      	movs	r2, #40	; 0x28
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f012 ff4b 	bl	801638c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <MX_RTC_Init+0x114>)
 80034f8:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <MX_RTC_Init+0x118>)
 80034fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034fc:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <MX_RTC_Init+0x114>)
 80034fe:	2200      	movs	r2, #0
 8003500:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003502:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <MX_RTC_Init+0x114>)
 8003504:	227f      	movs	r2, #127	; 0x7f
 8003506:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003508:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <MX_RTC_Init+0x114>)
 800350a:	22ff      	movs	r2, #255	; 0xff
 800350c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800350e:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <MX_RTC_Init+0x114>)
 8003510:	2200      	movs	r2, #0
 8003512:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003514:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <MX_RTC_Init+0x114>)
 8003516:	2200      	movs	r2, #0
 8003518:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800351a:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <MX_RTC_Init+0x114>)
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003520:	4830      	ldr	r0, [pc, #192]	; (80035e4 <MX_RTC_Init+0x114>)
 8003522:	f006 f80d 	bl	8009540 <HAL_RTC_Init>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800352c:	f001 fa88 	bl	8004a40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8003530:	2323      	movs	r3, #35	; 0x23
 8003532:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 8003536:	2359      	movs	r3, #89	; 0x59
 8003538:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 800353c:	2345      	movs	r3, #69	; 0x45
 800353e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003542:	2300      	movs	r3, #0
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800354a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800354e:	2201      	movs	r2, #1
 8003550:	4619      	mov	r1, r3
 8003552:	4824      	ldr	r0, [pc, #144]	; (80035e4 <MX_RTC_Init+0x114>)
 8003554:	f006 f885 	bl	8009662 <HAL_RTC_SetTime>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800355e:	f001 fa6f 	bl	8004a40 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003562:	2302      	movs	r3, #2
 8003564:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 8003568:	2312      	movs	r3, #18
 800356a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 800356e:	2328      	movs	r3, #40	; 0x28
 8003570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003574:	2300      	movs	r3, #0
 8003576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800357a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800357e:	2201      	movs	r2, #1
 8003580:	4619      	mov	r1, r3
 8003582:	4818      	ldr	r0, [pc, #96]	; (80035e4 <MX_RTC_Init+0x114>)
 8003584:	f006 f988 	bl	8009898 <HAL_RTC_SetDate>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800358e:	f001 fa57 	bl	8004a40 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003592:	2300      	movs	r3, #0
 8003594:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003596:	2300      	movs	r3, #0
 8003598:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800359a:	2310      	movs	r3, #16
 800359c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80035b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035b6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80035be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80035c4:	463b      	mov	r3, r7
 80035c6:	2201      	movs	r2, #1
 80035c8:	4619      	mov	r1, r3
 80035ca:	4806      	ldr	r0, [pc, #24]	; (80035e4 <MX_RTC_Init+0x114>)
 80035cc:	f006 fa5a 	bl	8009a84 <HAL_RTC_SetAlarm>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80035d6:	f001 fa33 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80035da:	bf00      	nop
 80035dc:	3740      	adds	r7, #64	; 0x40
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	2000fbf8 	.word	0x2000fbf8
 80035e8:	40002800 	.word	0x40002800

080035ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035f0:	4b17      	ldr	r3, [pc, #92]	; (8003650 <MX_SPI1_Init+0x64>)
 80035f2:	4a18      	ldr	r2, [pc, #96]	; (8003654 <MX_SPI1_Init+0x68>)
 80035f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035f6:	4b16      	ldr	r3, [pc, #88]	; (8003650 <MX_SPI1_Init+0x64>)
 80035f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035fe:	4b14      	ldr	r3, [pc, #80]	; (8003650 <MX_SPI1_Init+0x64>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003604:	4b12      	ldr	r3, [pc, #72]	; (8003650 <MX_SPI1_Init+0x64>)
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <MX_SPI1_Init+0x64>)
 800360c:	2200      	movs	r2, #0
 800360e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <MX_SPI1_Init+0x64>)
 8003612:	2200      	movs	r2, #0
 8003614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <MX_SPI1_Init+0x64>)
 8003618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <MX_SPI1_Init+0x64>)
 8003620:	2220      	movs	r2, #32
 8003622:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <MX_SPI1_Init+0x64>)
 8003626:	2200      	movs	r2, #0
 8003628:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <MX_SPI1_Init+0x64>)
 800362c:	2200      	movs	r2, #0
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <MX_SPI1_Init+0x64>)
 8003632:	2200      	movs	r2, #0
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <MX_SPI1_Init+0x64>)
 8003638:	220a      	movs	r2, #10
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800363c:	4804      	ldr	r0, [pc, #16]	; (8003650 <MX_SPI1_Init+0x64>)
 800363e:	f006 fbc9 	bl	8009dd4 <HAL_SPI_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003648:	f001 f9fa 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20010ff0 	.word	0x20010ff0
 8003654:	40013000 	.word	0x40013000

08003658 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <MX_SPI2_Init+0x64>)
 800365e:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <MX_SPI2_Init+0x68>)
 8003660:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <MX_SPI2_Init+0x64>)
 8003664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003668:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <MX_SPI2_Init+0x64>)
 800366c:	2200      	movs	r2, #0
 800366e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <MX_SPI2_Init+0x64>)
 8003672:	2200      	movs	r2, #0
 8003674:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <MX_SPI2_Init+0x64>)
 8003678:	2200      	movs	r2, #0
 800367a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <MX_SPI2_Init+0x64>)
 800367e:	2200      	movs	r2, #0
 8003680:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <MX_SPI2_Init+0x64>)
 8003684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003688:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <MX_SPI2_Init+0x64>)
 800368c:	2200      	movs	r2, #0
 800368e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <MX_SPI2_Init+0x64>)
 8003692:	2200      	movs	r2, #0
 8003694:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <MX_SPI2_Init+0x64>)
 8003698:	2200      	movs	r2, #0
 800369a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <MX_SPI2_Init+0x64>)
 800369e:	2200      	movs	r2, #0
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <MX_SPI2_Init+0x64>)
 80036a4:	220a      	movs	r2, #10
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036a8:	4804      	ldr	r0, [pc, #16]	; (80036bc <MX_SPI2_Init+0x64>)
 80036aa:	f006 fb93 	bl	8009dd4 <HAL_SPI_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80036b4:	f001 f9c4 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80036b8:	bf00      	nop
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20009160 	.word	0x20009160
 80036c0:	40003800 	.word	0x40003800

080036c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	609a      	str	r2, [r3, #8]
 80036d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d8:	463b      	mov	r3, r7
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <MX_TIM1_Init+0x9c>)
 80036e2:	4a20      	ldr	r2, [pc, #128]	; (8003764 <MX_TIM1_Init+0xa0>)
 80036e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <MX_TIM1_Init+0x9c>)
 80036e8:	f244 129f 	movw	r2, #16799	; 0x419f
 80036ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <MX_TIM1_Init+0x9c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <MX_TIM1_Init+0x9c>)
 80036f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80036fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <MX_TIM1_Init+0x9c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <MX_TIM1_Init+0x9c>)
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <MX_TIM1_Init+0x9c>)
 800370a:	2200      	movs	r2, #0
 800370c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800370e:	4814      	ldr	r0, [pc, #80]	; (8003760 <MX_TIM1_Init+0x9c>)
 8003710:	f006 ffa0 	bl	800a654 <HAL_TIM_Base_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800371a:	f001 f991 	bl	8004a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800371e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003724:	f107 0308 	add.w	r3, r7, #8
 8003728:	4619      	mov	r1, r3
 800372a:	480d      	ldr	r0, [pc, #52]	; (8003760 <MX_TIM1_Init+0x9c>)
 800372c:	f007 f989 	bl	800aa42 <HAL_TIM_ConfigClockSource>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003736:	f001 f983 	bl	8004a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800373a:	2320      	movs	r3, #32
 800373c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003742:	463b      	mov	r3, r7
 8003744:	4619      	mov	r1, r3
 8003746:	4806      	ldr	r0, [pc, #24]	; (8003760 <MX_TIM1_Init+0x9c>)
 8003748:	f007 fba4 	bl	800ae94 <HAL_TIMEx_MasterConfigSynchronization>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003752:	f001 f975 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20010d98 	.word	0x20010d98
 8003764:	40010000 	.word	0x40010000

08003768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800377c:	463b      	mov	r3, r7
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <MX_TIM2_Init+0x94>)
 8003786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800378a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <MX_TIM2_Init+0x94>)
 800378e:	220a      	movs	r2, #10
 8003790:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003792:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <MX_TIM2_Init+0x94>)
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <MX_TIM2_Init+0x94>)
 800379a:	220a      	movs	r2, #10
 800379c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800379e:	4b17      	ldr	r3, [pc, #92]	; (80037fc <MX_TIM2_Init+0x94>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a4:	4b15      	ldr	r3, [pc, #84]	; (80037fc <MX_TIM2_Init+0x94>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037aa:	4814      	ldr	r0, [pc, #80]	; (80037fc <MX_TIM2_Init+0x94>)
 80037ac:	f006 ff52 	bl	800a654 <HAL_TIM_Base_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80037b6:	f001 f943 	bl	8004a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037c0:	f107 0308 	add.w	r3, r7, #8
 80037c4:	4619      	mov	r1, r3
 80037c6:	480d      	ldr	r0, [pc, #52]	; (80037fc <MX_TIM2_Init+0x94>)
 80037c8:	f007 f93b 	bl	800aa42 <HAL_TIM_ConfigClockSource>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80037d2:	f001 f935 	bl	8004a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037de:	463b      	mov	r3, r7
 80037e0:	4619      	mov	r1, r3
 80037e2:	4806      	ldr	r0, [pc, #24]	; (80037fc <MX_TIM2_Init+0x94>)
 80037e4:	f007 fb56 	bl	800ae94 <HAL_TIMEx_MasterConfigSynchronization>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80037ee:	f001 f927 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20011108 	.word	0x20011108

08003800 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	609a      	str	r2, [r3, #8]
 8003812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003814:	463b      	mov	r3, r7
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <MX_TIM3_Init+0x94>)
 800381e:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <MX_TIM3_Init+0x98>)
 8003820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <MX_TIM3_Init+0x94>)
 8003824:	f240 3247 	movw	r2, #839	; 0x347
 8003828:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <MX_TIM3_Init+0x94>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <MX_TIM3_Init+0x94>)
 8003832:	220a      	movs	r2, #10
 8003834:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <MX_TIM3_Init+0x94>)
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <MX_TIM3_Init+0x94>)
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003842:	4814      	ldr	r0, [pc, #80]	; (8003894 <MX_TIM3_Init+0x94>)
 8003844:	f006 ff06 	bl	800a654 <HAL_TIM_Base_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800384e:	f001 f8f7 	bl	8004a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003858:	f107 0308 	add.w	r3, r7, #8
 800385c:	4619      	mov	r1, r3
 800385e:	480d      	ldr	r0, [pc, #52]	; (8003894 <MX_TIM3_Init+0x94>)
 8003860:	f007 f8ef 	bl	800aa42 <HAL_TIM_ConfigClockSource>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800386a:	f001 f8e9 	bl	8004a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003876:	463b      	mov	r3, r7
 8003878:	4619      	mov	r1, r3
 800387a:	4806      	ldr	r0, [pc, #24]	; (8003894 <MX_TIM3_Init+0x94>)
 800387c:	f007 fb0a 	bl	800ae94 <HAL_TIMEx_MasterConfigSynchronization>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003886:	f001 f8db 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	2000dba8 	.word	0x2000dba8
 8003898:	40000400 	.word	0x40000400

0800389c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <MX_TIM10_Init+0x3c>)
 80038a2:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <MX_TIM10_Init+0x40>)
 80038a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <MX_TIM10_Init+0x3c>)
 80038a8:	22a7      	movs	r2, #167	; 0xa7
 80038aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <MX_TIM10_Init+0x3c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <MX_TIM10_Init+0x3c>)
 80038b4:	2209      	movs	r2, #9
 80038b6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <MX_TIM10_Init+0x3c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <MX_TIM10_Init+0x3c>)
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80038c4:	4804      	ldr	r0, [pc, #16]	; (80038d8 <MX_TIM10_Init+0x3c>)
 80038c6:	f006 fec5 	bl	800a654 <HAL_TIM_Base_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80038d0:	f001 f8b6 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	200091d8 	.word	0x200091d8
 80038dc:	40014400 	.word	0x40014400

080038e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e6:	f107 031c 	add.w	r3, r7, #28
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	60da      	str	r2, [r3, #12]
 80038f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	4bb2      	ldr	r3, [pc, #712]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4ab1      	ldr	r2, [pc, #708]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003900:	f043 0310 	orr.w	r3, r3, #16
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4baf      	ldr	r3, [pc, #700]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	4bab      	ldr	r3, [pc, #684]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4aaa      	ldr	r2, [pc, #680]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4ba8      	ldr	r3, [pc, #672]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	4ba4      	ldr	r3, [pc, #656]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4aa3      	ldr	r2, [pc, #652]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4ba1      	ldr	r3, [pc, #644]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b9d      	ldr	r3, [pc, #628]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a9c      	ldr	r2, [pc, #624]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b9a      	ldr	r3, [pc, #616]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	4b96      	ldr	r3, [pc, #600]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a95      	ldr	r2, [pc, #596]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003970:	f043 0302 	orr.w	r3, r3, #2
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b93      	ldr	r3, [pc, #588]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	4b8f      	ldr	r3, [pc, #572]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a8e      	ldr	r2, [pc, #568]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 800398c:	f043 0308 	orr.w	r3, r3, #8
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b8c      	ldr	r3, [pc, #560]	; (8003bc4 <MX_GPIO_Init+0x2e4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800399e:	2200      	movs	r2, #0
 80039a0:	217c      	movs	r1, #124	; 0x7c
 80039a2:	4889      	ldr	r0, [pc, #548]	; (8003bc8 <MX_GPIO_Init+0x2e8>)
 80039a4:	f002 fbfe 	bl	80061a4 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80039a8:	2201      	movs	r2, #1
 80039aa:	2101      	movs	r1, #1
 80039ac:	4887      	ldr	r0, [pc, #540]	; (8003bcc <MX_GPIO_Init+0x2ec>)
 80039ae:	f002 fbf9 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 80039b2:	2200      	movs	r2, #0
 80039b4:	2142      	movs	r1, #66	; 0x42
 80039b6:	4885      	ldr	r0, [pc, #532]	; (8003bcc <MX_GPIO_Init+0x2ec>)
 80039b8:	f002 fbf4 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80039bc:	2200      	movs	r2, #0
 80039be:	f24f 0110 	movw	r1, #61456	; 0xf010
 80039c2:	4883      	ldr	r0, [pc, #524]	; (8003bd0 <MX_GPIO_Init+0x2f0>)
 80039c4:	f002 fbee 	bl	80061a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80039c8:	2200      	movs	r2, #0
 80039ca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80039ce:	4881      	ldr	r0, [pc, #516]	; (8003bd4 <MX_GPIO_Init+0x2f4>)
 80039d0:	f002 fbe8 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 80039d4:	231c      	movs	r3, #28
 80039d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d8:	2301      	movs	r3, #1
 80039da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039e4:	f107 031c 	add.w	r3, r7, #28
 80039e8:	4619      	mov	r1, r3
 80039ea:	4877      	ldr	r0, [pc, #476]	; (8003bc8 <MX_GPIO_Init+0x2e8>)
 80039ec:	f002 fa3e 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 80039f0:	2360      	movs	r3, #96	; 0x60
 80039f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f4:	2301      	movs	r3, #1
 80039f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fc:	2303      	movs	r3, #3
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a00:	f107 031c 	add.w	r3, r7, #28
 8003a04:	4619      	mov	r1, r3
 8003a06:	4870      	ldr	r0, [pc, #448]	; (8003bc8 <MX_GPIO_Init+0x2e8>)
 8003a08:	f002 fa30 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8003a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a12:	2300      	movs	r3, #0
 8003a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003a1a:	f107 031c 	add.w	r3, r7, #28
 8003a1e:	4619      	mov	r1, r3
 8003a20:	486a      	ldr	r0, [pc, #424]	; (8003bcc <MX_GPIO_Init+0x2ec>)
 8003a22:	f002 fa23 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 8003a26:	2303      	movs	r3, #3
 8003a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a36:	f107 031c 	add.w	r3, r7, #28
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4863      	ldr	r0, [pc, #396]	; (8003bcc <MX_GPIO_Init+0x2ec>)
 8003a3e:	f002 fa15 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003a42:	2308      	movs	r3, #8
 8003a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a52:	2305      	movs	r3, #5
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	485b      	ldr	r0, [pc, #364]	; (8003bcc <MX_GPIO_Init+0x2ec>)
 8003a5e:	f002 fa05 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003a66:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	4619      	mov	r1, r3
 8003a76:	4858      	ldr	r0, [pc, #352]	; (8003bd8 <MX_GPIO_Init+0x2f8>)
 8003a78:	f002 f9f8 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	2302      	movs	r3, #2
 8003a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a8c:	2306      	movs	r3, #6
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	4619      	mov	r1, r3
 8003a96:	4850      	ldr	r0, [pc, #320]	; (8003bd8 <MX_GPIO_Init+0x2f8>)
 8003a98:	f002 f9e8 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003aa8:	f107 031c 	add.w	r3, r7, #28
 8003aac:	4619      	mov	r1, r3
 8003aae:	4849      	ldr	r0, [pc, #292]	; (8003bd4 <MX_GPIO_Init+0x2f4>)
 8003ab0:	f002 f9dc 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003aca:	f107 031c 	add.w	r3, r7, #28
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4840      	ldr	r0, [pc, #256]	; (8003bd4 <MX_GPIO_Init+0x2f4>)
 8003ad2:	f002 f9cb 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003ad6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003ada:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003adc:	2301      	movs	r3, #1
 8003ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ae8:	f107 031c 	add.w	r3, r7, #28
 8003aec:	4619      	mov	r1, r3
 8003aee:	4838      	ldr	r0, [pc, #224]	; (8003bd0 <MX_GPIO_Init+0x2f0>)
 8003af0:	f002 f9bc 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 8003af4:	2340      	movs	r3, #64	; 0x40
 8003af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af8:	2301      	movs	r3, #1
 8003afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b00:	2302      	movs	r3, #2
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 8003b04:	f107 031c 	add.w	r3, r7, #28
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4830      	ldr	r0, [pc, #192]	; (8003bcc <MX_GPIO_Init+0x2ec>)
 8003b0c:	f002 f9ae 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003b10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b16:	2302      	movs	r3, #2
 8003b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b22:	2306      	movs	r3, #6
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b26:	f107 031c 	add.w	r3, r7, #28
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4827      	ldr	r0, [pc, #156]	; (8003bcc <MX_GPIO_Init+0x2ec>)
 8003b2e:	f002 f99d 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003b32:	2320      	movs	r3, #32
 8003b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b36:	2300      	movs	r3, #0
 8003b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b3e:	f107 031c 	add.w	r3, r7, #28
 8003b42:	4619      	mov	r1, r3
 8003b44:	4822      	ldr	r0, [pc, #136]	; (8003bd0 <MX_GPIO_Init+0x2f0>)
 8003b46:	f002 f991 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003b4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b50:	2312      	movs	r3, #18
 8003b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b54:	2301      	movs	r3, #1
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b60:	f107 031c 	add.w	r3, r7, #28
 8003b64:	4619      	mov	r1, r3
 8003b66:	481b      	ldr	r0, [pc, #108]	; (8003bd4 <MX_GPIO_Init+0x2f4>)
 8003b68:	f002 f980 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8003b6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b72:	2301      	movs	r3, #1
 8003b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7e:	f107 031c 	add.w	r3, r7, #28
 8003b82:	4619      	mov	r1, r3
 8003b84:	4813      	ldr	r0, [pc, #76]	; (8003bd4 <MX_GPIO_Init+0x2f4>)
 8003b86:	f002 f971 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8003b96:	f107 031c 	add.w	r3, r7, #28
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	480a      	ldr	r0, [pc, #40]	; (8003bc8 <MX_GPIO_Init+0x2e8>)
 8003b9e:	f002 f965 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003ba6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4804      	ldr	r0, [pc, #16]	; (8003bc8 <MX_GPIO_Init+0x2e8>)
 8003bb8:	f002 f958 	bl	8005e6c <HAL_GPIO_Init>

}
 8003bbc:	bf00      	nop
 8003bbe:	3730      	adds	r7, #48	; 0x30
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40020800 	.word	0x40020800
 8003bd0:	40020c00 	.word	0x40020c00
 8003bd4:	40020400 	.word	0x40020400
 8003bd8:	40020000 	.word	0x40020000

08003bdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003be4:	f011 fd4e 	bl	8015684 <MX_USB_DEVICE_Init>

//  LCD_init();

  for(;;)
  {
	  osDelay(1000);
 8003be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bec:	f00d fed8 	bl	80119a0 <osDelay>
	  ILI9341_Draw_Text( "TEST 1234567890 !!!", 5,0, WHITE, 2, BLACK);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2105      	movs	r1, #5
 8003c00:	480a      	ldr	r0, [pc, #40]	; (8003c2c <StartDefaultTask+0x50>)
 8003c02:	f001 fb73 	bl	80052ec <ILI9341_Draw_Text>

	  ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 150, 150, RED);
 8003c06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2396      	movs	r3, #150	; 0x96
 8003c0e:	2296      	movs	r2, #150	; 0x96
 8003c10:	2114      	movs	r1, #20
 8003c12:	2014      	movs	r0, #20
 8003c14:	f001 fa76 	bl	8005104 <ILI9341_Draw_Filled_Rectangle_Coord>
	  ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 100, 100, BLUE);
 8003c18:	231f      	movs	r3, #31
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2364      	movs	r3, #100	; 0x64
 8003c1e:	2264      	movs	r2, #100	; 0x64
 8003c20:	2114      	movs	r1, #20
 8003c22:	2014      	movs	r0, #20
 8003c24:	f001 fa6e 	bl	8005104 <ILI9341_Draw_Filled_Rectangle_Coord>
	  osDelay(1000);
 8003c28:	e7de      	b.n	8003be8 <StartDefaultTask+0xc>
 8003c2a:	bf00      	nop
 8003c2c:	080194c0 	.word	0x080194c0

08003c30 <Start_Blue_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blue_LED_Blink */
void Start_Blue_LED_Blink(void *argument)
{
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	6018      	str	r0, [r3, #0]
	 * For STM32F407 discovery dev board needs remove R26, and connect battery to VBAT (near R26).
	 * Also, need solder the LF Crystal and two capacitors.
	 */

	// 1. Set time
	  RTC_TimeTypeDef sTime = {0};
 8003c3c:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
//	  sTime.Minutes = 33;
//	  sTime.Seconds = 00;
//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	  // Set date

	  RTC_DateTypeDef sDate = {0};
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
	  /////////////////////////////////////////////////////////////////////

	QUEUE_t msg;												// Make a queue

	char buff[50] = {0};
 8003c52:	f107 0314 	add.w	r3, r7, #20
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	222e      	movs	r2, #46	; 0x2e
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f012 fb93 	bl	801638c <memset>
	char buf[5] = {0};
 8003c66:	f107 030c 	add.w	r3, r7, #12
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	711a      	strb	r2, [r3, #4]
	char str_end_of_line[4] = {'\r','\n','\0'};
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	f640 220d 	movw	r2, #2573	; 0xa0d
 8003c7a:	601a      	str	r2, [r3, #0]
	for(;;)
	{
		//lcd_test_print();

		// Blue LED blink
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c82:	4883      	ldr	r0, [pc, #524]	; (8003e90 <Start_Blue_LED_Blink+0x260>)
 8003c84:	f002 fa8e 	bl	80061a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8003c88:	2064      	movs	r0, #100	; 0x64
 8003c8a:	f00d fe89 	bl	80119a0 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c94:	487e      	ldr	r0, [pc, #504]	; (8003e90 <Start_Blue_LED_Blink+0x260>)
 8003c96:	f002 fa85 	bl	80061a4 <HAL_GPIO_WritePin>
		osDelay(900);
 8003c9a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003c9e:	f00d fe7f 	bl	80119a0 <osDelay>

		// RTC part
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);						// Get time (write in sDime struct)
 8003ca2:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	4619      	mov	r1, r3
 8003caa:	487a      	ldr	r0, [pc, #488]	; (8003e94 <Start_Blue_LED_Blink+0x264>)
 8003cac:	f005 fd96 	bl	80097dc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);						// Get data (write in sDime struct)
 8003cb0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4876      	ldr	r0, [pc, #472]	; (8003e94 <Start_Blue_LED_Blink+0x264>)
 8003cba:	f005 fe94 	bl	80099e6 <HAL_RTC_GetDate>

		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8003cbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f012 fb5f 	bl	801638c <memset>
		memset(buff, 0, sizeof(buff));
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	2232      	movs	r2, #50	; 0x32
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f012 fb58 	bl	801638c <memset>

		strcat(msg.Buf, "RTC DATA AND TIME >>>>>>>    " );
 8003cdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fa75 	bl	80001d0 <strlen>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cee:	4413      	add	r3, r2
 8003cf0:	4a69      	ldr	r2, [pc, #420]	; (8003e98 <Start_Blue_LED_Blink+0x268>)
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf8:	6028      	str	r0, [r5, #0]
 8003cfa:	6069      	str	r1, [r5, #4]
 8003cfc:	60aa      	str	r2, [r5, #8]
 8003cfe:	60eb      	str	r3, [r5, #12]
 8003d00:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003d02:	6128      	str	r0, [r5, #16]
 8003d04:	6169      	str	r1, [r5, #20]
 8003d06:	61aa      	str	r2, [r5, #24]
 8003d08:	8823      	ldrh	r3, [r4, #0]
 8003d0a:	83ab      	strh	r3, [r5, #28]

		// Date
		itoa(sDate.Year, buf, 10);
 8003d0c:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8003d10:	4618      	mov	r0, r3
 8003d12:	f107 030c 	add.w	r3, r7, #12
 8003d16:	220a      	movs	r2, #10
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f012 fb13 	bl	8016344 <itoa>
		strcat(msg.Buf, buf);
 8003d1e:	f107 020c 	add.w	r2, r7, #12
 8003d22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f013 f928 	bl	8016f7e <strcat>

		itoa(sDate.Month, buf, 10);
 8003d2e:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 8003d32:	4618      	mov	r0, r3
 8003d34:	f107 030c 	add.w	r3, r7, #12
 8003d38:	220a      	movs	r2, #10
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f012 fb02 	bl	8016344 <itoa>
		strcat(msg.Buf, "-");
 8003d40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fc fa43 	bl	80001d0 <strlen>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d52:	4413      	add	r3, r2
 8003d54:	4951      	ldr	r1, [pc, #324]	; (8003e9c <Start_Blue_LED_Blink+0x26c>)
 8003d56:	461a      	mov	r2, r3
 8003d58:	460b      	mov	r3, r1
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003d5e:	f107 020c 	add.w	r2, r7, #12
 8003d62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f013 f908 	bl	8016f7e <strcat>

		itoa(sDate.Date, buf, 10);
 8003d6e:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8003d72:	4618      	mov	r0, r3
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	220a      	movs	r2, #10
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f012 fae2 	bl	8016344 <itoa>
		strcat(msg.Buf, "-");
 8003d80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fa23 	bl	80001d0 <strlen>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d92:	4413      	add	r3, r2
 8003d94:	4941      	ldr	r1, [pc, #260]	; (8003e9c <Start_Blue_LED_Blink+0x26c>)
 8003d96:	461a      	mov	r2, r3
 8003d98:	460b      	mov	r3, r1
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003d9e:	f107 020c 	add.w	r2, r7, #12
 8003da2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f013 f8e8 	bl	8016f7e <strcat>

		strcat(msg.Buf, " | ");
 8003dae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fa0c 	bl	80001d0 <strlen>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dc0:	4413      	add	r3, r2
 8003dc2:	4a37      	ldr	r2, [pc, #220]	; (8003ea0 <Start_Blue_LED_Blink+0x270>)
 8003dc4:	6810      	ldr	r0, [r2, #0]
 8003dc6:	6018      	str	r0, [r3, #0]

		// Time
		itoa(sTime.Hours, buf, 10);
 8003dc8:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f107 030c 	add.w	r3, r7, #12
 8003dd2:	220a      	movs	r2, #10
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f012 fab5 	bl	8016344 <itoa>
		strcat(msg.Buf, buf);
 8003dda:	f107 020c 	add.w	r2, r7, #12
 8003dde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f013 f8ca 	bl	8016f7e <strcat>

		itoa(sTime.Minutes, buf, 10);
 8003dea:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003dee:	4618      	mov	r0, r3
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	220a      	movs	r2, #10
 8003df6:	4619      	mov	r1, r3
 8003df8:	f012 faa4 	bl	8016344 <itoa>
		strcat(msg.Buf, ":");
 8003dfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc f9e5 	bl	80001d0 <strlen>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e0e:	4413      	add	r3, r2
 8003e10:	4924      	ldr	r1, [pc, #144]	; (8003ea4 <Start_Blue_LED_Blink+0x274>)
 8003e12:	461a      	mov	r2, r3
 8003e14:	460b      	mov	r3, r1
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003e1a:	f107 020c 	add.w	r2, r7, #12
 8003e1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f013 f8aa 	bl	8016f7e <strcat>

		itoa(sTime.Seconds, buf, 10);
 8003e2a:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f107 030c 	add.w	r3, r7, #12
 8003e34:	220a      	movs	r2, #10
 8003e36:	4619      	mov	r1, r3
 8003e38:	f012 fa84 	bl	8016344 <itoa>
		strcat(msg.Buf, ":");
 8003e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc f9c5 	bl	80001d0 <strlen>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e4e:	4413      	add	r3, r2
 8003e50:	4914      	ldr	r1, [pc, #80]	; (8003ea4 <Start_Blue_LED_Blink+0x274>)
 8003e52:	461a      	mov	r2, r3
 8003e54:	460b      	mov	r3, r1
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003e5a:	f107 020c 	add.w	r2, r7, #12
 8003e5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f013 f88a 	bl	8016f7e <strcat>

		strcat(msg.Buf, str_end_of_line);
 8003e6a:	f107 0208 	add.w	r2, r7, #8
 8003e6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f013 f882 	bl	8016f7e <strcat>
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <Start_Blue_LED_Blink+0x278>)
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e86:	2200      	movs	r2, #0
 8003e88:	f00d ff5c 	bl	8011d44 <osMessageQueuePut>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003e8c:	e6f6      	b.n	8003c7c <Start_Blue_LED_Blink+0x4c>
 8003e8e:	bf00      	nop
 8003e90:	40020c00 	.word	0x40020c00
 8003e94:	2000fbf8 	.word	0x2000fbf8
 8003e98:	080194d4 	.word	0x080194d4
 8003e9c:	080194f4 	.word	0x080194f4
 8003ea0:	080194f8 	.word	0x080194f8
 8003ea4:	080194fc 	.word	0x080194fc
 8003ea8:	2000a3a4 	.word	0x2000a3a4

08003eac <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8003eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eae:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8003eb8:	f241 3088 	movw	r0, #5000	; 0x1388
 8003ebc:	f00d fd70 	bl	80119a0 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8003ec0:	4a8d      	ldr	r2, [pc, #564]	; (80040f8 <Start_Show_Resources+0x24c>)
 8003ec2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	4611      	mov	r1, r2
 8003eca:	8019      	strh	r1, [r3, #0]
 8003ecc:	3302      	adds	r3, #2
 8003ece:	0c12      	lsrs	r2, r2, #16
 8003ed0:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003ed2:	232d      	movs	r3, #45	; 0x2d
 8003ed4:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8003ede:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003ee8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f012 fa4a 	bl	801638c <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8003ef8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fc f967 	bl	80001d0 <strlen>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a7b      	ldr	r2, [pc, #492]	; (80040fc <Start_Show_Resources+0x250>)
 8003f0e:	461d      	mov	r5, r3
 8003f10:	4614      	mov	r4, r2
 8003f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f14:	6028      	str	r0, [r5, #0]
 8003f16:	6069      	str	r1, [r5, #4]
 8003f18:	60aa      	str	r2, [r5, #8]
 8003f1a:	60eb      	str	r3, [r5, #12]
 8003f1c:	cc03      	ldmia	r4!, {r0, r1}
 8003f1e:	6128      	str	r0, [r5, #16]
 8003f20:	6169      	str	r1, [r5, #20]
 8003f22:	7823      	ldrb	r3, [r4, #0]
 8003f24:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8003f26:	f011 fae5 	bl	80154f4 <xPortGetFreeHeapSize>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b74      	ldr	r3, [pc, #464]	; (8004100 <Start_Show_Resources+0x254>)
 8003f30:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8003f32:	4b73      	ldr	r3, [pc, #460]	; (8004100 <Start_Show_Resources+0x254>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8003f3a:	220a      	movs	r2, #10
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f012 fa01 	bl	8016344 <itoa>
	  strcat(msg.Buf, buff);
 8003f42:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8003f46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f013 f816 	bl	8016f7e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8003f52:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8003f56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f013 f80e 	bl	8016f7e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8003f62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc f932 	bl	80001d0 <strlen>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f74:	4413      	add	r3, r2
 8003f76:	4a63      	ldr	r2, [pc, #396]	; (8004104 <Start_Show_Resources+0x258>)
 8003f78:	4618      	mov	r0, r3
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	2341      	movs	r3, #65	; 0x41
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f012 f9f6 	bl	8016370 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8003f84:	4860      	ldr	r0, [pc, #384]	; (8004108 <Start_Show_Resources+0x25c>)
 8003f86:	f010 fa65 	bl	8014454 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8003f90:	e004      	b.n	8003f9c <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8003f92:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003f96:	3301      	adds	r3, #1
 8003f98:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8003f9c:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003fa0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003fa4:	5cd3      	ldrb	r3, [r2, r3]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f3      	bne.n	8003f92 <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003fb6:	e011      	b.n	8003fdc <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003fb8:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8003fbc:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fc0:	4413      	add	r3, r2
 8003fc2:	4951      	ldr	r1, [pc, #324]	; (8004108 <Start_Show_Resources+0x25c>)
 8003fc4:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003fc8:	440a      	add	r2, r1
 8003fca:	7811      	ldrb	r1, [r2, #0]
 8003fcc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003fd0:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003fd2:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003fdc:	4a4a      	ldr	r2, [pc, #296]	; (8004108 <Start_Show_Resources+0x25c>)
 8003fde:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fe2:	4413      	add	r3, r2
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e6      	bne.n	8003fb8 <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8003fea:	4b48      	ldr	r3, [pc, #288]	; (800410c <Start_Show_Resources+0x260>)
 8003fec:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8003ff0:	461d      	mov	r5, r3
 8003ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ffa:	c403      	stmia	r4!, {r0, r1}
 8003ffc:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8003ffe:	f107 030c 	add.w	r3, r7, #12
 8004002:	4a43      	ldr	r2, [pc, #268]	; (8004110 <Start_Show_Resources+0x264>)
 8004004:	461c      	mov	r4, r3
 8004006:	4615      	mov	r5, r2
 8004008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800400a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800400c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800400e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004014:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004018:	c407      	stmia	r4!, {r0, r1, r2}
 800401a:	8023      	strh	r3, [r4, #0]
 800401c:	3402      	adds	r4, #2
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 8004022:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8004026:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f012 ffa6 	bl	8016f7e <strcat>
	  strcat(msg.Buf, str_head_2);
 8004032:	f107 020c 	add.w	r2, r7, #12
 8004036:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f012 ff9e 	bl	8016f7e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8004042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004046:	2100      	movs	r1, #0
 8004048:	482f      	ldr	r0, [pc, #188]	; (8004108 <Start_Show_Resources+0x25c>)
 800404a:	f012 f99f 	bl	801638c <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 800404e:	482e      	ldr	r0, [pc, #184]	; (8004108 <Start_Show_Resources+0x25c>)
 8004050:	f010 fa96 	bl	8014580 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8004054:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004058:	b29a      	uxth	r2, r3
 800405a:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 800405e:	4413      	add	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	3357      	adds	r3, #87	; 0x57
 8004064:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800406e:	e011      	b.n	8004094 <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8004070:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8004074:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004078:	4413      	add	r3, r2
 800407a:	4923      	ldr	r1, [pc, #140]	; (8004108 <Start_Show_Resources+0x25c>)
 800407c:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8004080:	440a      	add	r2, r1
 8004082:	7811      	ldrb	r1, [r2, #0]
 8004084:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004088:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 800408a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800408e:	3301      	adds	r3, #1
 8004090:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8004094:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <Start_Show_Resources+0x25c>)
 8004096:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800409a:	4413      	add	r3, r2
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e6      	bne.n	8004070 <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 80040a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc f892 	bl	80001d0 <strlen>
 80040ac:	4603      	mov	r3, r0
 80040ae:	461a      	mov	r2, r3
 80040b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040b4:	4413      	add	r3, r2
 80040b6:	4a17      	ldr	r2, [pc, #92]	; (8004114 <Start_Show_Resources+0x268>)
 80040b8:	4614      	mov	r4, r2
 80040ba:	469c      	mov	ip, r3
 80040bc:	f104 0e20 	add.w	lr, r4, #32
 80040c0:	4665      	mov	r5, ip
 80040c2:	4626      	mov	r6, r4
 80040c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80040c6:	6028      	str	r0, [r5, #0]
 80040c8:	6069      	str	r1, [r5, #4]
 80040ca:	60aa      	str	r2, [r5, #8]
 80040cc:	60eb      	str	r3, [r5, #12]
 80040ce:	3410      	adds	r4, #16
 80040d0:	f10c 0c10 	add.w	ip, ip, #16
 80040d4:	4574      	cmp	r4, lr
 80040d6:	d1f3      	bne.n	80040c0 <Start_Show_Resources+0x214>
 80040d8:	4665      	mov	r5, ip
 80040da:	4623      	mov	r3, r4
 80040dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80040de:	6028      	str	r0, [r5, #0]
 80040e0:	6069      	str	r1, [r5, #4]
 80040e2:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <Start_Show_Resources+0x26c>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80040ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f0:	2200      	movs	r2, #0
 80040f2:	f00d fe27 	bl	8011d44 <osMessageQueuePut>
  {
 80040f6:	e6df      	b.n	8003eb8 <Start_Show_Resources+0xc>
 80040f8:	0801958c 	.word	0x0801958c
 80040fc:	08019500 	.word	0x08019500
 8004100:	20000778 	.word	0x20000778
 8004104:	0801951c 	.word	0x0801951c
 8004108:	20000390 	.word	0x20000390
 800410c:	08019590 	.word	0x08019590
 8004110:	080195ac 	.word	0x080195ac
 8004114:	08019560 	.word	0x08019560
 8004118:	2000a3a4 	.word	0x2000a3a4

0800411c <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8004122:	af00      	add	r7, sp, #0
 8004124:	1d3b      	adds	r3, r7, #4
 8004126:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <Start_UART_Task+0x58>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	f107 010c 	add.w	r1, r7, #12
 8004130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004134:	2200      	movs	r2, #0
 8004136:	f00d fe65 	bl	8011e04 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8004140:	e004      	b.n	800414c <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8004142:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8004146:	3301      	adds	r3, #1
 8004148:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 800414c:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8004150:	f107 020c 	add.w	r2, r7, #12
 8004154:	5cd3      	ldrb	r3, [r2, r3]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f3      	bne.n	8004142 <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 800415a:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 800415e:	f107 030c 	add.w	r3, r7, #12
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f011 fb4b 	bl	8015800 <CDC_Transmit_FS>
    osDelay(1);
 800416a:	2001      	movs	r0, #1
 800416c:	f00d fc18 	bl	80119a0 <osDelay>
  {
 8004170:	e7da      	b.n	8004128 <Start_UART_Task+0xc>
 8004172:	bf00      	nop
 8004174:	2000a3a4 	.word	0x2000a3a4

08004178 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 8004178:	b5b0      	push	{r4, r5, r7, lr}
 800417a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800417e:	af04      	add	r7, sp, #16
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	6018      	str	r0, [r3, #0]
  /* Infinite loop */

	QUEUE_t msg;												// Make a queue
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 8004184:	2300      	movs	r3, #0
 8004186:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
	uint16_t addres_device = 0x76;  		 	// BME280
 800418a:	2376      	movs	r3, #118	; 0x76
 800418c:	f8a7 345c 	strh.w	r3, [r7, #1116]	; 0x45c
	uint16_t id_addr = 0xD0;
 8004190:	23d0      	movs	r3, #208	; 0xd0
 8004192:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
	uint8_t id = 96;							// in hex form
 8004196:	2360      	movs	r3, #96	; 0x60
 8004198:	f887 3459 	strb.w	r3, [r7, #1113]	; 0x459
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 800419c:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80041a4:	f8b7 345c 	ldrh.w	r3, [r7, #1116]	; 0x45c
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	b299      	uxth	r1, r3
 80041ac:	f8b7 245a 	ldrh.w	r2, [r7, #1114]	; 0x45a
 80041b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041b4:	9302      	str	r3, [sp, #8]
 80041b6:	2301      	movs	r3, #1
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2301      	movs	r3, #1
 80041c2:	48bb      	ldr	r0, [pc, #748]	; (80044b0 <Start_bme280+0x338>)
 80041c4:	f002 fc8a 	bl	8006adc <HAL_I2C_Mem_Read>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 80041ce:	4bb9      	ldr	r3, [pc, #740]	; (80044b4 <Start_bme280+0x33c>)
 80041d0:	2276      	movs	r2, #118	; 0x76
 80041d2:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 80041d4:	4bb7      	ldr	r3, [pc, #732]	; (80044b4 <Start_bme280+0x33c>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 80041da:	4bb6      	ldr	r3, [pc, #728]	; (80044b4 <Start_bme280+0x33c>)
 80041dc:	4ab6      	ldr	r2, [pc, #728]	; (80044b8 <Start_bme280+0x340>)
 80041de:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 80041e0:	4bb4      	ldr	r3, [pc, #720]	; (80044b4 <Start_bme280+0x33c>)
 80041e2:	4ab6      	ldr	r2, [pc, #728]	; (80044bc <Start_bme280+0x344>)
 80041e4:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 80041e6:	4bb3      	ldr	r3, [pc, #716]	; (80044b4 <Start_bme280+0x33c>)
 80041e8:	4ab5      	ldr	r2, [pc, #724]	; (80044c0 <Start_bme280+0x348>)
 80041ea:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 80041ec:	48b1      	ldr	r0, [pc, #708]	; (80044b4 <Start_bme280+0x33c>)
 80041ee:	f7fc fea7 	bl	8000f40 <bme280_init>
 80041f2:	4603      	mov	r3, r0
 80041f4:	461a      	mov	r2, r3
 80041f6:	4bb3      	ldr	r3, [pc, #716]	; (80044c4 <Start_bme280+0x34c>)
 80041f8:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80041fa:	4bae      	ldr	r3, [pc, #696]	; (80044b4 <Start_bme280+0x33c>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8004202:	4bac      	ldr	r3, [pc, #688]	; (80044b4 <Start_bme280+0x33c>)
 8004204:	2205      	movs	r2, #5
 8004206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 800420a:	4baa      	ldr	r3, [pc, #680]	; (80044b4 <Start_bme280+0x33c>)
 800420c:	2202      	movs	r2, #2
 800420e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8004212:	4ba8      	ldr	r3, [pc, #672]	; (80044b4 <Start_bme280+0x33c>)
 8004214:	2204      	movs	r2, #4
 8004216:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 800421a:	49a6      	ldr	r1, [pc, #664]	; (80044b4 <Start_bme280+0x33c>)
 800421c:	200f      	movs	r0, #15
 800421e:	f7fc ff81 	bl	8001124 <bme280_set_sensor_settings>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	4ba7      	ldr	r3, [pc, #668]	; (80044c4 <Start_bme280+0x34c>)
 8004228:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 800422a:	49a2      	ldr	r1, [pc, #648]	; (80044b4 <Start_bme280+0x33c>)
 800422c:	2003      	movs	r0, #3
 800422e:	f7fc ffce 	bl	80011ce <bme280_set_sensor_mode>
 8004232:	4603      	mov	r3, r0
 8004234:	461a      	mov	r2, r3
 8004236:	4ba3      	ldr	r3, [pc, #652]	; (80044c4 <Start_bme280+0x34c>)
 8004238:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 800423a:	4b9e      	ldr	r3, [pc, #632]	; (80044b4 <Start_bme280+0x33c>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2028      	movs	r0, #40	; 0x28
 8004240:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 8004242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004246:	f00d fbab 	bl	80119a0 <osDelay>

	  char str_t_h_and_p[50] = {0};
 800424a:	f107 0308 	add.w	r3, r7, #8
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	3304      	adds	r3, #4
 8004254:	222e      	movs	r2, #46	; 0x2e
 8004256:	2100      	movs	r1, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f012 f897 	bl	801638c <memset>
	  char str_thp_buffer[12] = {0};
 800425e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	3304      	adds	r3, #4
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]

	  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 800426e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f012 f887 	bl	801638c <memset>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 800427e:	4a8d      	ldr	r2, [pc, #564]	; (80044b4 <Start_bme280+0x33c>)
 8004280:	4991      	ldr	r1, [pc, #580]	; (80044c8 <Start_bme280+0x350>)
 8004282:	2007      	movs	r0, #7
 8004284:	f7fd f81f 	bl	80012c6 <bme280_get_sensor_data>
 8004288:	4603      	mov	r3, r0
 800428a:	461a      	mov	r2, r3
 800428c:	4b8d      	ldr	r3, [pc, #564]	; (80044c4 <Start_bme280+0x34c>)
 800428e:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8004290:	4b8c      	ldr	r3, [pc, #560]	; (80044c4 <Start_bme280+0x34c>)
 8004292:	f993 3000 	ldrsb.w	r3, [r3]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f040 80e5 	bne.w	8004466 <Start_bme280+0x2ee>
	  {
	  		// Save data variables
	  		float BME280_temperature = comp_data.temperature;
 800429c:	4b8a      	ldr	r3, [pc, #552]	; (80044c8 <Start_bme280+0x350>)
 800429e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	f7fc fc7f 	bl	8000ba8 <__aeabi_d2f>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80042b0:	6013      	str	r3, [r2, #0]
	  		float BME280_humidity = comp_data.humidity;
 80042b2:	4b85      	ldr	r3, [pc, #532]	; (80044c8 <Start_bme280+0x350>)
 80042b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	f7fc fc74 	bl	8000ba8 <__aeabi_d2f>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80042c6:	6013      	str	r3, [r2, #0]
	  		float BME280_preasure = comp_data.pressure;
 80042c8:	4b7f      	ldr	r3, [pc, #508]	; (80044c8 <Start_bme280+0x350>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	f7fc fc69 	bl	8000ba8 <__aeabi_d2f>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80042dc:	6013      	str	r3, [r2, #0]

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_h_and_p, "BEE280: \n\r");
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fb ff74 	bl	80001d0 <strlen>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	4413      	add	r3, r2
 80042f2:	4976      	ldr	r1, [pc, #472]	; (80044cc <Start_bme280+0x354>)
 80042f4:	461a      	mov	r2, r3
 80042f6:	460b      	mov	r3, r1
 80042f8:	cb03      	ldmia	r3!, {r0, r1}
 80042fa:	6010      	str	r0, [r2, #0]
 80042fc:	6051      	str	r1, [r2, #4]
 80042fe:	8819      	ldrh	r1, [r3, #0]
 8004300:	789b      	ldrb	r3, [r3, #2]
 8004302:	8111      	strh	r1, [r2, #8]
 8004304:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_h_and_p, "T: ");
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	4618      	mov	r0, r3
 800430c:	f7fb ff60 	bl	80001d0 <strlen>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	f107 0308 	add.w	r3, r7, #8
 8004318:	4413      	add	r3, r2
 800431a:	4a6d      	ldr	r2, [pc, #436]	; (80044d0 <Start_bme280+0x358>)
 800431c:	6810      	ldr	r0, [r2, #0]
 800431e:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_temperature);
 8004320:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	f7fc f90f 	bl	8000548 <__aeabi_f2d>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004332:	4968      	ldr	r1, [pc, #416]	; (80044d4 <Start_bme280+0x35c>)
 8004334:	f012 fdc0 	bl	8016eb8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8004338:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800433c:	f107 0308 	add.w	r3, r7, #8
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f012 fe1b 	bl	8016f7e <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 8004348:	f107 0308 	add.w	r3, r7, #8
 800434c:	4618      	mov	r0, r3
 800434e:	f7fb ff3f 	bl	80001d0 <strlen>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	f107 0308 	add.w	r3, r7, #8
 800435a:	4413      	add	r3, r2
 800435c:	4a5e      	ldr	r2, [pc, #376]	; (80044d8 <Start_bme280+0x360>)
 800435e:	6810      	ldr	r0, [r2, #0]
 8004360:	6018      	str	r0, [r3, #0]
 8004362:	7912      	ldrb	r2, [r2, #4]
 8004364:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 8004366:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800436a:	220c      	movs	r2, #12
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f012 f80c 	bl	801638c <memset>
	  		strcat(str_t_h_and_p, "H: ");
 8004374:	f107 0308 	add.w	r3, r7, #8
 8004378:	4618      	mov	r0, r3
 800437a:	f7fb ff29 	bl	80001d0 <strlen>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	f107 0308 	add.w	r3, r7, #8
 8004386:	4413      	add	r3, r2
 8004388:	4a54      	ldr	r2, [pc, #336]	; (80044dc <Start_bme280+0x364>)
 800438a:	6810      	ldr	r0, [r2, #0]
 800438c:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_humidity);
 800438e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	f7fc f8d8 	bl	8000548 <__aeabi_f2d>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80043a0:	494c      	ldr	r1, [pc, #304]	; (80044d4 <Start_bme280+0x35c>)
 80043a2:	f012 fd89 	bl	8016eb8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 80043a6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80043aa:	f107 0308 	add.w	r3, r7, #8
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f012 fde4 	bl	8016f7e <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 80043b6:	f107 0308 	add.w	r3, r7, #8
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fb ff08 	bl	80001d0 <strlen>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	f107 0308 	add.w	r3, r7, #8
 80043c8:	4413      	add	r3, r2
 80043ca:	4a43      	ldr	r2, [pc, #268]	; (80044d8 <Start_bme280+0x360>)
 80043cc:	6810      	ldr	r0, [r2, #0]
 80043ce:	6018      	str	r0, [r3, #0]
 80043d0:	7912      	ldrb	r2, [r2, #4]
 80043d2:	711a      	strb	r2, [r3, #4]

	  		// Write PRERASURE
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 80043d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043d8:	220c      	movs	r2, #12
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f011 ffd5 	bl	801638c <memset>
	  		strcat(str_t_h_and_p, "P: ");
 80043e2:	f107 0308 	add.w	r3, r7, #8
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fb fef2 	bl	80001d0 <strlen>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	f107 0308 	add.w	r3, r7, #8
 80043f4:	4413      	add	r3, r2
 80043f6:	4a3a      	ldr	r2, [pc, #232]	; (80044e0 <Start_bme280+0x368>)
 80043f8:	6810      	ldr	r0, [r2, #0]
 80043fa:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_preasure);
 80043fc:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	f7fc f8a1 	bl	8000548 <__aeabi_f2d>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800440e:	4931      	ldr	r1, [pc, #196]	; (80044d4 <Start_bme280+0x35c>)
 8004410:	f012 fd52 	bl	8016eb8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8004414:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004418:	f107 0308 	add.w	r3, r7, #8
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f012 fdad 	bl	8016f7e <strcat>
	  		strcat(str_t_h_and_p, " mm\n\r\0");
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	4618      	mov	r0, r3
 800442a:	f7fb fed1 	bl	80001d0 <strlen>
 800442e:	4603      	mov	r3, r0
 8004430:	461a      	mov	r2, r3
 8004432:	f107 0308 	add.w	r3, r7, #8
 8004436:	4413      	add	r3, r2
 8004438:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <Start_bme280+0x36c>)
 800443a:	6810      	ldr	r0, [r2, #0]
 800443c:	6018      	str	r0, [r3, #0]
 800443e:	8892      	ldrh	r2, [r2, #4]
 8004440:	809a      	strh	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
 8004442:	f107 0208 	add.w	r2, r7, #8
 8004446:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f012 fd96 	bl	8016f7e <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8004452:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <Start_bme280+0x370>)
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800445a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800445e:	2200      	movs	r2, #0
 8004460:	f00d fc70 	bl	8011d44 <osMessageQueuePut>
 8004464:	e6ed      	b.n	8004242 <Start_bme280+0xca>

	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!! BME280 didn't found\n\r");
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	4618      	mov	r0, r3
 800446c:	f7fb feb0 	bl	80001d0 <strlen>
 8004470:	4603      	mov	r3, r0
 8004472:	461a      	mov	r2, r3
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	4413      	add	r3, r2
 800447a:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <Start_bme280+0x374>)
 800447c:	461d      	mov	r5, r3
 800447e:	4614      	mov	r4, r2
 8004480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004482:	6028      	str	r0, [r5, #0]
 8004484:	6069      	str	r1, [r5, #4]
 8004486:	60aa      	str	r2, [r5, #8]
 8004488:	60eb      	str	r3, [r5, #12]
 800448a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800448c:	6128      	str	r0, [r5, #16]
 800448e:	6169      	str	r1, [r5, #20]
 8004490:	61aa      	str	r2, [r5, #24]
 8004492:	8823      	ldrh	r3, [r4, #0]
 8004494:	78a2      	ldrb	r2, [r4, #2]
 8004496:	83ab      	strh	r3, [r5, #28]
 8004498:	4613      	mov	r3, r2
 800449a:	77ab      	strb	r3, [r5, #30]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 800449c:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <Start_bme280+0x370>)
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044a8:	2200      	movs	r2, #0
 80044aa:	f00d fc4b 	bl	8011d44 <osMessageQueuePut>
  {
 80044ae:	e6c8      	b.n	8004242 <Start_bme280+0xca>
 80044b0:	200080bc 	.word	0x200080bc
 80044b4:	2000807c 	.word	0x2000807c
 80044b8:	080030f1 	.word	0x080030f1
 80044bc:	08003179 	.word	0x08003179
 80044c0:	08003161 	.word	0x08003161
 80044c4:	200091bc 	.word	0x200091bc
 80044c8:	200091c0 	.word	0x200091c0
 80044cc:	080195ec 	.word	0x080195ec
 80044d0:	080195f8 	.word	0x080195f8
 80044d4:	080195fc 	.word	0x080195fc
 80044d8:	08019600 	.word	0x08019600
 80044dc:	08019608 	.word	0x08019608
 80044e0:	0801960c 	.word	0x0801960c
 80044e4:	08019610 	.word	0x08019610
 80044e8:	2000a3a4 	.word	0x2000a3a4
 80044ec:	08019618 	.word	0x08019618

080044f0 <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	1d3b      	adds	r3, r7, #4
 80044fa:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 80044fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f011 ff40 	bl	801638c <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 800450c:	4b48      	ldr	r3, [pc, #288]	; (8004630 <Start_AM2302+0x140>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a47      	ldr	r2, [pc, #284]	; (8004630 <Start_AM2302+0x140>)
 8004512:	f043 0304 	orr.w	r3, r3, #4
 8004516:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8004518:	4b45      	ldr	r3, [pc, #276]	; (8004630 <Start_AM2302+0x140>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a44      	ldr	r2, [pc, #272]	; (8004630 <Start_AM2302+0x140>)
 800451e:	f023 0302 	bic.w	r3, r3, #2
 8004522:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8004524:	4b42      	ldr	r3, [pc, #264]	; (8004630 <Start_AM2302+0x140>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a41      	ldr	r2, [pc, #260]	; (8004630 <Start_AM2302+0x140>)
 800452a:	f043 0302 	orr.w	r3, r3, #2
 800452e:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8004530:	4b3f      	ldr	r3, [pc, #252]	; (8004630 <Start_AM2302+0x140>)
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	4a3e      	ldr	r2, [pc, #248]	; (8004630 <Start_AM2302+0x140>)
 8004536:	f083 0302 	eor.w	r3, r3, #2
 800453a:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 800453c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004540:	f00d fa2e 	bl	80119a0 <osDelay>

  for(;;)
  {
	  osDelay(3000);			// Measure every 3 seconds
 8004544:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004548:	f00d fa2a 	bl	80119a0 <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 800454c:	2300      	movs	r3, #0
 800454e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	int j = 0;   							// Counter bytes
 8004552:	2300      	movs	r3, #0
 8004554:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	  	int i = 0;								// Counter bits
 8004558:	2300      	movs	r3, #0
 800455a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 800455e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8004566:	4b32      	ldr	r3, [pc, #200]	; (8004630 <Start_AM2302+0x140>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a31      	ldr	r2, [pc, #196]	; (8004630 <Start_AM2302+0x140>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8004572:	4b2f      	ldr	r3, [pc, #188]	; (8004630 <Start_AM2302+0x140>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4a2e      	ldr	r2, [pc, #184]	; (8004630 <Start_AM2302+0x140>)
 8004578:	f023 0302 	bic.w	r3, r3, #2
 800457c:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 800457e:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <Start_AM2302+0x140>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	4a2b      	ldr	r2, [pc, #172]	; (8004630 <Start_AM2302+0x140>)
 8004584:	f043 0302 	orr.w	r3, r3, #2
 8004588:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 800458a:	4b29      	ldr	r3, [pc, #164]	; (8004630 <Start_AM2302+0x140>)
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	4a28      	ldr	r2, [pc, #160]	; (8004630 <Start_AM2302+0x140>)
 8004590:	f023 0302 	bic.w	r3, r3, #2
 8004594:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 8004596:	2012      	movs	r0, #18
 8004598:	f00d fa02 	bl	80119a0 <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 800459c:	4b24      	ldr	r3, [pc, #144]	; (8004630 <Start_AM2302+0x140>)
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	4a23      	ldr	r2, [pc, #140]	; (8004630 <Start_AM2302+0x140>)
 80045a2:	f083 0302 	eor.w	r3, r3, #2
 80045a6:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 80045a8:	2028      	movs	r0, #40	; 0x28
 80045aa:	f7fe fe21 	bl	80031f0 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <Start_AM2302+0x140>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <Start_AM2302+0x140>)
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <Start_AM2302+0x140>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <Start_AM2302+0x140>)
 80045c0:	f023 0304 	bic.w	r3, r3, #4
 80045c4:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <Start_AM2302+0x140>)
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 80045d2:	2300      	movs	r3, #0
 80045d4:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 80045d8:	e002      	b.n	80045e0 <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}

	  	delay_us(80);
 80045e0:	2050      	movs	r0, #80	; 0x50
 80045e2:	f7fe fe05 	bl	80031f0 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <Start_AM2302+0x140>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 80045f8:	e002      	b.n	8004600 <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}
	  	delay_us(80);
 8004600:	2050      	movs	r0, #80	; 0x50
 8004602:	f7fe fdf5 	bl	80031f0 <delay_us>

	  	if(get_data_status == true)
 8004606:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800460a:	2b00      	cmp	r3, #0
 800460c:	d09a      	beq.n	8004544 <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 800460e:	2300      	movs	r3, #0
 8004610:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8004614:	e050      	b.n	80046b8 <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 8004616:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800461a:	f1c3 0304 	rsb	r3, r3, #4
 800461e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004622:	2100      	movs	r1, #0
 8004624:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 8004626:	2300      	movs	r3, #0
 8004628:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800462c:	e038      	b.n	80046a0 <Start_AM2302+0x1b0>
 800462e:	bf00      	nop
 8004630:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 8004634:	bf00      	nop
 8004636:	4b95      	ldr	r3, [pc, #596]	; (800488c <Start_AM2302+0x39c>)
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f9      	beq.n	8004636 <Start_AM2302+0x146>
	  				delay_us(30);
 8004642:	201e      	movs	r0, #30
 8004644:	f7fe fdd4 	bl	80031f0 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8004648:	4b90      	ldr	r3, [pc, #576]	; (800488c <Start_AM2302+0x39c>)
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d019      	beq.n	8004688 <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8004654:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004658:	f1c3 0304 	rsb	r3, r3, #4
 800465c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004660:	5cd3      	ldrb	r3, [r2, r3]
 8004662:	b25a      	sxtb	r2, r3
 8004664:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8004668:	f1c3 0307 	rsb	r3, r3, #7
 800466c:	2101      	movs	r1, #1
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	b25b      	sxtb	r3, r3
 8004674:	4313      	orrs	r3, r2
 8004676:	b25a      	sxtb	r2, r3
 8004678:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800467c:	f1c3 0304 	rsb	r3, r3, #4
 8004680:	b2d1      	uxtb	r1, r2
 8004682:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004686:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 8004688:	bf00      	nop
 800468a:	4b80      	ldr	r3, [pc, #512]	; (800488c <Start_AM2302+0x39c>)
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f9      	bne.n	800468a <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 8004696:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800469a:	3301      	adds	r3, #1
 800469c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80046a0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80046a4:	2b07      	cmp	r3, #7
 80046a6:	ddc5      	ble.n	8004634 <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 80046ae:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80046b2:	3301      	adds	r3, #1
 80046b4:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80046b8:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80046bc:	2b04      	cmp	r3, #4
 80046be:	ddaa      	ble.n	8004616 <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80046c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046c4:	3301      	adds	r3, #1
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046d4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80046d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046dc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80046e0:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 80046e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046e8:	3301      	adds	r3, #1
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b21b      	sxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	da13      	bge.n	800471a <Start_AM2302+0x22a>
 80046f2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	f7fb ff26 	bl	8000548 <__aeabi_f2d>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	f7fc fa50 	bl	8000ba8 <__aeabi_d2f>
 8004708:	4603      	mov	r3, r0
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef1 7a67 	vneg.f32	s15, s15
 8004712:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004716:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 800471a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800471e:	3303      	adds	r3, #3
 8004720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800472c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004734:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004738:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[50] = {0};
 800473c:	f107 0308 	add.w	r3, r7, #8
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	3304      	adds	r3, #4
 8004746:	222e      	movs	r2, #46	; 0x2e
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f011 fe1e 	bl	801638c <memset>
	  		char str_t_and_h_buffer[12] = {0};
 8004750:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	3304      	adds	r3, #4
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8004760:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f011 fe0e 	bl	801638c <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "AM2302: \n\r");
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fd2b 	bl	80001d0 <strlen>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	4413      	add	r3, r2
 8004784:	4942      	ldr	r1, [pc, #264]	; (8004890 <Start_AM2302+0x3a0>)
 8004786:	461a      	mov	r2, r3
 8004788:	460b      	mov	r3, r1
 800478a:	cb03      	ldmia	r3!, {r0, r1}
 800478c:	6010      	str	r0, [r2, #0]
 800478e:	6051      	str	r1, [r2, #4]
 8004790:	8819      	ldrh	r1, [r3, #0]
 8004792:	789b      	ldrb	r3, [r3, #2]
 8004794:	8111      	strh	r1, [r2, #8]
 8004796:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_and_h, "T: ");
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	4618      	mov	r0, r3
 800479e:	f7fb fd17 	bl	80001d0 <strlen>
 80047a2:	4603      	mov	r3, r0
 80047a4:	461a      	mov	r2, r3
 80047a6:	f107 0308 	add.w	r3, r7, #8
 80047aa:	4413      	add	r3, r2
 80047ac:	4a39      	ldr	r2, [pc, #228]	; (8004894 <Start_AM2302+0x3a4>)
 80047ae:	6810      	ldr	r0, [r2, #0]
 80047b0:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 80047b2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	f7fb fec6 	bl	8000548 <__aeabi_f2d>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80047c4:	4934      	ldr	r1, [pc, #208]	; (8004898 <Start_AM2302+0x3a8>)
 80047c6:	f012 fb77 	bl	8016eb8 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80047ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80047ce:	f107 0308 	add.w	r3, r7, #8
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f012 fbd2 	bl	8016f7e <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 80047da:	f107 0308 	add.w	r3, r7, #8
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fb fcf6 	bl	80001d0 <strlen>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461a      	mov	r2, r3
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	4413      	add	r3, r2
 80047ee:	4a2b      	ldr	r2, [pc, #172]	; (800489c <Start_AM2302+0x3ac>)
 80047f0:	6810      	ldr	r0, [r2, #0]
 80047f2:	6018      	str	r0, [r3, #0]
 80047f4:	7912      	ldrb	r2, [r2, #4]
 80047f6:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 80047f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047fc:	220c      	movs	r2, #12
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f011 fdc3 	bl	801638c <memset>

	  		strcat(str_t_and_h, "H: ");
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	4618      	mov	r0, r3
 800480c:	f7fb fce0 	bl	80001d0 <strlen>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	f107 0308 	add.w	r3, r7, #8
 8004818:	4413      	add	r3, r2
 800481a:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <Start_AM2302+0x3b0>)
 800481c:	6810      	ldr	r0, [r2, #0]
 800481e:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 8004820:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	f7fb fe8f 	bl	8000548 <__aeabi_f2d>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004832:	4919      	ldr	r1, [pc, #100]	; (8004898 <Start_AM2302+0x3a8>)
 8004834:	f012 fb40 	bl	8016eb8 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 8004838:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800483c:	f107 0308 	add.w	r3, r7, #8
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f012 fb9b 	bl	8016f7e <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 8004848:	f107 0308 	add.w	r3, r7, #8
 800484c:	4618      	mov	r0, r3
 800484e:	f7fb fcbf 	bl	80001d0 <strlen>
 8004852:	4603      	mov	r3, r0
 8004854:	461a      	mov	r2, r3
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	4413      	add	r3, r2
 800485c:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <Start_AM2302+0x3b4>)
 800485e:	6810      	ldr	r0, [r2, #0]
 8004860:	6018      	str	r0, [r3, #0]
 8004862:	7912      	ldrb	r2, [r2, #4]
 8004864:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 8004866:	f107 0208 	add.w	r2, r7, #8
 800486a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f012 fb84 	bl	8016f7e <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <Start_AM2302+0x3b8>)
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800487e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004882:	2200      	movs	r2, #0
 8004884:	f00d fa5e 	bl	8011d44 <osMessageQueuePut>
  {
 8004888:	e65c      	b.n	8004544 <Start_AM2302+0x54>
 800488a:	bf00      	nop
 800488c:	40020800 	.word	0x40020800
 8004890:	08019638 	.word	0x08019638
 8004894:	080195f8 	.word	0x080195f8
 8004898:	080195fc 	.word	0x080195fc
 800489c:	08019600 	.word	0x08019600
 80048a0:	08019608 	.word	0x08019608
 80048a4:	08019644 	.word	0x08019644
 80048a8:	2000a3a4 	.word	0x2000a3a4

080048ac <Start_SD_CARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_CARD */
void Start_SD_CARD(void *argument)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_CARD */
  /* Infinite loop */

	Mount_SD("/");
 80048b4:	4823      	ldr	r0, [pc, #140]	; (8004944 <Start_SD_CARD+0x98>)
 80048b6:	f7fd fd67 	bl	8002388 <Mount_SD>

	Create_File("test_data_1.txt");
 80048ba:	4823      	ldr	r0, [pc, #140]	; (8004948 <Start_SD_CARD+0x9c>)
 80048bc:	f7fd fdaa 	bl	8002414 <Create_File>
	Update_File("test_data_1.txt","\n\rStart recording\r\n");	// Add data to the end of file
 80048c0:	4922      	ldr	r1, [pc, #136]	; (800494c <Start_SD_CARD+0xa0>)
 80048c2:	4821      	ldr	r0, [pc, #132]	; (8004948 <Start_SD_CARD+0x9c>)
 80048c4:	f7fd fe3c 	bl	8002540 <Update_File>

	// Create folders
	Create_Dir("test_folder_1");
 80048c8:	4821      	ldr	r0, [pc, #132]	; (8004950 <Start_SD_CARD+0xa4>)
 80048ca:	f7fd fef9 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_2");
 80048ce:	4821      	ldr	r0, [pc, #132]	; (8004954 <Start_SD_CARD+0xa8>)
 80048d0:	f7fd fef6 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_3");
 80048d4:	4820      	ldr	r0, [pc, #128]	; (8004958 <Start_SD_CARD+0xac>)
 80048d6:	f7fd fef3 	bl	80026c0 <Create_Dir>

	Unmount_SD("/");
 80048da:	481a      	ldr	r0, [pc, #104]	; (8004944 <Start_SD_CARD+0x98>)
 80048dc:	f7fd fd78 	bl	80023d0 <Unmount_SD>
	static int i = 0;											// Test data for write

  for(;;)
  {
	  // Log data ewery one second
	  osDelay(1000);
 80048e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048e4:	f00d f85c 	bl	80119a0 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);			// LED ON
 80048e8:	2201      	movs	r2, #1
 80048ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048ee:	481b      	ldr	r0, [pc, #108]	; (800495c <Start_SD_CARD+0xb0>)
 80048f0:	f001 fc58 	bl	80061a4 <HAL_GPIO_WritePin>

	  Mount_SD("/");
 80048f4:	4813      	ldr	r0, [pc, #76]	; (8004944 <Start_SD_CARD+0x98>)
 80048f6:	f7fd fd47 	bl	8002388 <Mount_SD>

	  char data[10] = {0};
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	f107 0310 	add.w	r3, r7, #16
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	809a      	strh	r2, [r3, #4]
	  sprintf(data, "%d\n", i);
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <Start_SD_CARD+0xb4>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	f107 030c 	add.w	r3, r7, #12
 8004910:	4914      	ldr	r1, [pc, #80]	; (8004964 <Start_SD_CARD+0xb8>)
 8004912:	4618      	mov	r0, r3
 8004914:	f012 fad0 	bl	8016eb8 <siprintf>
	  Update_File("test_data_1.txt", data);						// Add data to the end of file
 8004918:	f107 030c 	add.w	r3, r7, #12
 800491c:	4619      	mov	r1, r3
 800491e:	480a      	ldr	r0, [pc, #40]	; (8004948 <Start_SD_CARD+0x9c>)
 8004920:	f7fd fe0e 	bl	8002540 <Update_File>
	  i++;
 8004924:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <Start_SD_CARD+0xb4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	4a0d      	ldr	r2, [pc, #52]	; (8004960 <Start_SD_CARD+0xb4>)
 800492c:	6013      	str	r3, [r2, #0]

	  Unmount_SD("/");
 800492e:	4805      	ldr	r0, [pc, #20]	; (8004944 <Start_SD_CARD+0x98>)
 8004930:	f7fd fd4e 	bl	80023d0 <Unmount_SD>

	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);		// LED OFF
 8004934:	2200      	movs	r2, #0
 8004936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800493a:	4808      	ldr	r0, [pc, #32]	; (800495c <Start_SD_CARD+0xb0>)
 800493c:	f001 fc32 	bl	80061a4 <HAL_GPIO_WritePin>
  {
 8004940:	e7ce      	b.n	80048e0 <Start_SD_CARD+0x34>
 8004942:	bf00      	nop
 8004944:	0801964c 	.word	0x0801964c
 8004948:	08019650 	.word	0x08019650
 800494c:	08019660 	.word	0x08019660
 8004950:	08019674 	.word	0x08019674
 8004954:	08019684 	.word	0x08019684
 8004958:	08019694 	.word	0x08019694
 800495c:	40020c00 	.word	0x40020c00
 8004960:	20000780 	.word	0x20000780
 8004964:	080196a4 	.word	0x080196a4

08004968 <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004970:	2001      	movs	r0, #1
 8004972:	f00d f815 	bl	80119a0 <osDelay>
 8004976:	e7fb      	b.n	8004970 <Start_LCD+0x8>

08004978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Handler for generate us dalay 			( FOR AM2302 )
	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a25      	ldr	r2, [pc, #148]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d10c      	bne.n	80049a4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 800498a:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 8004992:	4b23      	ldr	r3, [pc, #140]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3b01      	subs	r3, #1
 8004998:	4a21      	ldr	r2, [pc, #132]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e002      	b.n	80049a4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else									// For avoid overflow variable
		{
			tim_val = 0;
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
		}
	}

	// Handler for SD
	if(htim->Instance == TIM1) 					//check if the interrupt comes from TIM1 (Blink LED)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);		// Green LED
 80049ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049b2:	481d      	ldr	r0, [pc, #116]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80049b4:	f001 fc0f 	bl	80061d6 <HAL_GPIO_TogglePin>
	}

	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d104      	bne.n	80049cc <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a19      	ldr	r2, [pc, #100]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80049ca:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_TIM_PeriodElapsedCallback+0x62>
    HAL_IncTick();
 80049d6:	f001 f923 	bl	8005c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM14)		// For SD works (use in fatfs_sd.c file)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d117      	bne.n	8004a14 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		if(Timer1 > 0)
 80049e4:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d006      	beq.n	80049fc <HAL_TIM_PeriodElapsedCallback+0x84>
		    Timer1--;
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80049fa:	701a      	strb	r2, [r3, #0]

		  if(Timer2 > 0)
 80049fc:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <HAL_TIM_PeriodElapsedCallback+0x9c>
		    Timer2--;
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004a12:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	2000077c 	.word	0x2000077c
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40020c00 	.word	0x40020c00
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	20010fe0 	.word	0x20010fe0
 8004a34:	40002000 	.word	0x40002000
 8004a38:	20012150 	.word	0x20012150
 8004a3c:	20010fe8 	.word	0x20010fe8

08004a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a44:	b672      	cpsid	i
}
 8004a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a48:	e7fe      	b.n	8004a48 <Error_Handler+0x8>
	...

08004a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_MspInit+0x54>)
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <HAL_MspInit+0x54>)
 8004a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a60:	6453      	str	r3, [r2, #68]	; 0x44
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_MspInit+0x54>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_MspInit+0x54>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <HAL_MspInit+0x54>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <HAL_MspInit+0x54>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	210f      	movs	r1, #15
 8004a8e:	f06f 0001 	mvn.w	r0, #1
 8004a92:	f001 f9c1 	bl	8005e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800

08004aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	60da      	str	r2, [r3, #12]
 8004aba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a29      	ldr	r2, [pc, #164]	; (8004b68 <HAL_I2C_MspInit+0xc4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d14b      	bne.n	8004b5e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	4b28      	ldr	r3, [pc, #160]	; (8004b6c <HAL_I2C_MspInit+0xc8>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a27      	ldr	r2, [pc, #156]	; (8004b6c <HAL_I2C_MspInit+0xc8>)
 8004ad0:	f043 0304 	orr.w	r3, r3, #4
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <HAL_I2C_MspInit+0xc8>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_I2C_MspInit+0xc8>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <HAL_I2C_MspInit+0xc8>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6313      	str	r3, [r2, #48]	; 0x30
 8004af2:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <HAL_I2C_MspInit+0xc8>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b04:	2312      	movs	r3, #18
 8004b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b10:	2304      	movs	r3, #4
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4815      	ldr	r0, [pc, #84]	; (8004b70 <HAL_I2C_MspInit+0xcc>)
 8004b1c:	f001 f9a6 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b26:	2312      	movs	r3, #18
 8004b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b32:	2304      	movs	r3, #4
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b36:	f107 0314 	add.w	r3, r7, #20
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	480d      	ldr	r0, [pc, #52]	; (8004b74 <HAL_I2C_MspInit+0xd0>)
 8004b3e:	f001 f995 	bl	8005e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_I2C_MspInit+0xc8>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <HAL_I2C_MspInit+0xc8>)
 8004b4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b50:	6413      	str	r3, [r2, #64]	; 0x40
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_I2C_MspInit+0xc8>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004b5e:	bf00      	nop
 8004b60:	3728      	adds	r7, #40	; 0x28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40005c00 	.word	0x40005c00
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40020800 	.word	0x40020800
 8004b74:	40020000 	.word	0x40020000

08004b78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b80:	f107 0308 	add.w	r3, r7, #8
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <HAL_RTC_MspInit+0x4c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ba2:	f107 0308 	add.w	r3, r7, #8
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 fbe8 	bl	800937c <HAL_RCCEx_PeriphCLKConfig>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004bb2:	f7ff ff45 	bl	8004a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <HAL_RTC_MspInit+0x50>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004bbc:	bf00      	nop
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40002800 	.word	0x40002800
 8004bc8:	42470e3c 	.word	0x42470e3c

08004bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd4:	f107 031c 	add.w	r3, r7, #28
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a41      	ldr	r2, [pc, #260]	; (8004cf0 <HAL_SPI_MspInit+0x124>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d12c      	bne.n	8004c48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	4a3f      	ldr	r2, [pc, #252]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfe:	4b3d      	ldr	r3, [pc, #244]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	4b39      	ldr	r3, [pc, #228]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	4a38      	ldr	r2, [pc, #224]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1a:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004c26:	23e0      	movs	r3, #224	; 0xe0
 8004c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c32:	2302      	movs	r3, #2
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c36:	2305      	movs	r3, #5
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3a:	f107 031c 	add.w	r3, r7, #28
 8004c3e:	4619      	mov	r1, r3
 8004c40:	482d      	ldr	r0, [pc, #180]	; (8004cf8 <HAL_SPI_MspInit+0x12c>)
 8004c42:	f001 f913 	bl	8005e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004c46:	e04f      	b.n	8004ce8 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2b      	ldr	r2, [pc, #172]	; (8004cfc <HAL_SPI_MspInit+0x130>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d14a      	bne.n	8004ce8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c60:	6413      	str	r3, [r2, #64]	; 0x40
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	4a1f      	ldr	r2, [pc, #124]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c78:	f043 0304 	orr.w	r3, r3, #4
 8004c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9a:	4b16      	ldr	r3, [pc, #88]	; (8004cf4 <HAL_SPI_MspInit+0x128>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004caa:	2302      	movs	r3, #2
 8004cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cb6:	2305      	movs	r3, #5
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cba:	f107 031c 	add.w	r3, r7, #28
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	480f      	ldr	r0, [pc, #60]	; (8004d00 <HAL_SPI_MspInit+0x134>)
 8004cc2:	f001 f8d3 	bl	8005e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004cc6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cd8:	2305      	movs	r3, #5
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cdc:	f107 031c 	add.w	r3, r7, #28
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4808      	ldr	r0, [pc, #32]	; (8004d04 <HAL_SPI_MspInit+0x138>)
 8004ce4:	f001 f8c2 	bl	8005e6c <HAL_GPIO_Init>
}
 8004ce8:	bf00      	nop
 8004cea:	3730      	adds	r7, #48	; 0x30
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40013000 	.word	0x40013000
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40020000 	.word	0x40020000
 8004cfc:	40003800 	.word	0x40003800
 8004d00:	40020800 	.word	0x40020800
 8004d04:	40020400 	.word	0x40020400

08004d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <HAL_TIM_Base_MspInit+0xf0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d116      	bne.n	8004d48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	4a36      	ldr	r2, [pc, #216]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2a:	4b34      	ldr	r3, [pc, #208]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004d36:	2200      	movs	r2, #0
 8004d38:	2105      	movs	r1, #5
 8004d3a:	2019      	movs	r0, #25
 8004d3c:	f001 f86c 	bl	8005e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004d40:	2019      	movs	r0, #25
 8004d42:	f001 f885 	bl	8005e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004d46:	e052      	b.n	8004dee <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d50:	d116      	bne.n	8004d80 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	4a28      	ldr	r2, [pc, #160]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	6413      	str	r3, [r2, #64]	; 0x40
 8004d62:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2105      	movs	r1, #5
 8004d72:	201c      	movs	r0, #28
 8004d74:	f001 f850 	bl	8005e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d78:	201c      	movs	r0, #28
 8004d7a:	f001 f869 	bl	8005e50 <HAL_NVIC_EnableIRQ>
}
 8004d7e:	e036      	b.n	8004dee <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1e      	ldr	r2, [pc, #120]	; (8004e00 <HAL_TIM_Base_MspInit+0xf8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d116      	bne.n	8004db8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a1a      	ldr	r2, [pc, #104]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004d94:	f043 0302 	orr.w	r3, r3, #2
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2105      	movs	r1, #5
 8004daa:	201d      	movs	r0, #29
 8004dac:	f001 f834 	bl	8005e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004db0:	201d      	movs	r0, #29
 8004db2:	f001 f84d 	bl	8005e50 <HAL_NVIC_EnableIRQ>
}
 8004db6:	e01a      	b.n	8004dee <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <HAL_TIM_Base_MspInit+0xfc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d115      	bne.n	8004dee <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	4a0c      	ldr	r2, [pc, #48]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_TIM_Base_MspInit+0xf4>)
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004dde:	2200      	movs	r2, #0
 8004de0:	2105      	movs	r1, #5
 8004de2:	2019      	movs	r0, #25
 8004de4:	f001 f818 	bl	8005e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004de8:	2019      	movs	r0, #25
 8004dea:	f001 f831 	bl	8005e50 <HAL_NVIC_EnableIRQ>
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40014400 	.word	0x40014400

08004e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	; 0x30
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8004e18:	2200      	movs	r2, #0
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	202d      	movs	r0, #45	; 0x2d
 8004e1e:	f000 fffb 	bl	8005e18 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004e22:	202d      	movs	r0, #45	; 0x2d
 8004e24:	f001 f814 	bl	8005e50 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <HAL_InitTick+0xa4>)
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <HAL_InitTick+0xa4>)
 8004e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e36:	6413      	str	r3, [r2, #64]	; 0x40
 8004e38:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <HAL_InitTick+0xa4>)
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e44:	f107 0210 	add.w	r2, r7, #16
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f004 fa62 	bl	8009318 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004e54:	f004 fa4c 	bl	80092f0 <HAL_RCC_GetPCLK1Freq>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <HAL_InitTick+0xa8>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	0c9b      	lsrs	r3, r3, #18
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e6e:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <HAL_InitTick+0xb0>)
 8004e70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e78:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004e7a:	4a0e      	ldr	r2, [pc, #56]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004e8c:	4809      	ldr	r0, [pc, #36]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e8e:	f005 fbe1 	bl	800a654 <HAL_TIM_Base_Init>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004e98:	4806      	ldr	r0, [pc, #24]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e9a:	f005 fc2b 	bl	800a6f4 <HAL_TIM_Base_Start_IT>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	e000      	b.n	8004ea4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3730      	adds	r7, #48	; 0x30
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	431bde83 	.word	0x431bde83
 8004eb4:	200132d8 	.word	0x200132d8
 8004eb8:	40002000 	.word	0x40002000

08004ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ec0:	e7fe      	b.n	8004ec0 <NMI_Handler+0x4>

08004ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ec6:	e7fe      	b.n	8004ec6 <HardFault_Handler+0x4>

08004ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ecc:	e7fe      	b.n	8004ecc <MemManage_Handler+0x4>

08004ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ed2:	e7fe      	b.n	8004ed2 <BusFault_Handler+0x4>

08004ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ed8:	e7fe      	b.n	8004ed8 <UsageFault_Handler+0x4>

08004eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eec:	4803      	ldr	r0, [pc, #12]	; (8004efc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004eee:	f005 fca0 	bl	800a832 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004ef2:	4803      	ldr	r0, [pc, #12]	; (8004f00 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004ef4:	f005 fc9d 	bl	800a832 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004ef8:	bf00      	nop
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20010d98 	.word	0x20010d98
 8004f00:	200091d8 	.word	0x200091d8

08004f04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f08:	4802      	ldr	r0, [pc, #8]	; (8004f14 <TIM2_IRQHandler+0x10>)
 8004f0a:	f005 fc92 	bl	800a832 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20011108 	.word	0x20011108

08004f18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f1c:	4802      	ldr	r0, [pc, #8]	; (8004f28 <TIM3_IRQHandler+0x10>)
 8004f1e:	f005 fc88 	bl	800a832 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f22:	bf00      	nop
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	2000dba8 	.word	0x2000dba8

08004f2c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004f30:	4802      	ldr	r0, [pc, #8]	; (8004f3c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004f32:	f005 fc7e 	bl	800a832 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	200132d8 	.word	0x200132d8

08004f40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f44:	4802      	ldr	r0, [pc, #8]	; (8004f50 <OTG_FS_IRQHandler+0x10>)
 8004f46:	f002 fd54 	bl	80079f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	200168a8 	.word	0x200168a8

08004f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
	return 1;
 8004f58:	2301      	movs	r3, #1
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <_kill>:

int _kill(int pid, int sig)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f6e:	f011 f8b1 	bl	80160d4 <__errno>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2216      	movs	r2, #22
 8004f76:	601a      	str	r2, [r3, #0]
	return -1;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <_exit>:

void _exit (int status)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ffe7 	bl	8004f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f96:	e7fe      	b.n	8004f96 <_exit+0x12>

08004f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e00a      	b.n	8004fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004faa:	f3af 8000 	nop.w
 8004fae:	4601      	mov	r1, r0
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	60ba      	str	r2, [r7, #8]
 8004fb6:	b2ca      	uxtb	r2, r1
 8004fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dbf0      	blt.n	8004faa <_read+0x12>
	}

return len;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e009      	b.n	8004ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	60ba      	str	r2, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	dbf1      	blt.n	8004fe4 <_write+0x12>
	}
	return len;
 8005000:	687b      	ldr	r3, [r7, #4]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_close>:

int _close(int file)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
	return -1;
 8005012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005032:	605a      	str	r2, [r3, #4]
	return 0;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <_isatty>:

int _isatty(int file)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
	return 1;
 800504a:	2301      	movs	r3, #1
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
	return 0;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <_sbrk+0x5c>)
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <_sbrk+0x60>)
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005088:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <_sbrk+0x64>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <_sbrk+0x64>)
 8005092:	4a12      	ldr	r2, [pc, #72]	; (80050dc <_sbrk+0x68>)
 8005094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <_sbrk+0x64>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d207      	bcs.n	80050b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050a4:	f011 f816 	bl	80160d4 <__errno>
 80050a8:	4603      	mov	r3, r0
 80050aa:	220c      	movs	r2, #12
 80050ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050b2:	e009      	b.n	80050c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050b4:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <_sbrk+0x64>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <_sbrk+0x64>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <_sbrk+0x64>)
 80050c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050c6:	68fb      	ldr	r3, [r7, #12]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20020000 	.word	0x20020000
 80050d4:	00000400 	.word	0x00000400
 80050d8:	20000784 	.word	0x20000784
 80050dc:	20016cc0 	.word	0x20016cc0

080050e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <SystemInit+0x20>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	4a05      	ldr	r2, [pc, #20]	; (8005100 <SystemInit+0x20>)
 80050ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000ed00 	.word	0xe000ed00

08005104 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b089      	sub	sp, #36	; 0x24
 8005108:	af02      	add	r7, sp, #8
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	4623      	mov	r3, r4
 8005114:	80fb      	strh	r3, [r7, #6]
 8005116:	4603      	mov	r3, r0
 8005118:	80bb      	strh	r3, [r7, #4]
 800511a:	460b      	mov	r3, r1
 800511c:	807b      	strh	r3, [r7, #2]
 800511e:	4613      	mov	r3, r2
 8005120:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800513e:	887a      	ldrh	r2, [r7, #2]
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	da01      	bge.n	8005150 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800514c:	2301      	movs	r3, #1
 800514e:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8005154:	883a      	ldrh	r2, [r7, #0]
 8005156:	88bb      	ldrh	r3, [r7, #4]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	da01      	bge.n	8005166 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8005162:	2301      	movs	r3, #1
 8005164:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800516c:	887a      	ldrh	r2, [r7, #2]
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	823b      	strh	r3, [r7, #16]
 8005178:	e005      	b.n	8005186 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	887b      	ldrh	r3, [r7, #2]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8005186:	7cbb      	ldrb	r3, [r7, #18]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800518c:	883a      	ldrh	r2, [r7, #0]
 800518e:	88bb      	ldrh	r3, [r7, #4]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8005194:	88bb      	ldrh	r3, [r7, #4]
 8005196:	81fb      	strh	r3, [r7, #14]
 8005198:	e005      	b.n	80051a6 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 800519a:	88ba      	ldrh	r2, [r7, #4]
 800519c:	883b      	ldrh	r3, [r7, #0]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80051a2:	883b      	ldrh	r3, [r7, #0]
 80051a4:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80051a6:	8abc      	ldrh	r4, [r7, #20]
 80051a8:	8afa      	ldrh	r2, [r7, #22]
 80051aa:	89f9      	ldrh	r1, [r7, #14]
 80051ac:	8a38      	ldrh	r0, [r7, #16]
 80051ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	4623      	mov	r3, r4
 80051b4:	f000 fc7c 	bl	8005ab0 <ILI9341_Draw_Rectangle>
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd90      	pop	{r4, r7, pc}

080051c0 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	4604      	mov	r4, r0
 80051c8:	4608      	mov	r0, r1
 80051ca:	4611      	mov	r1, r2
 80051cc:	461a      	mov	r2, r3
 80051ce:	4623      	mov	r3, r4
 80051d0:	71fb      	strb	r3, [r7, #7]
 80051d2:	4603      	mov	r3, r0
 80051d4:	80bb      	strh	r3, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	71bb      	strb	r3, [r7, #6]
 80051da:	4613      	mov	r3, r2
 80051dc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b1f      	cmp	r3, #31
 80051e6:	d902      	bls.n	80051ee <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	3b20      	subs	r3, #32
 80051ec:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	753b      	strb	r3, [r7, #20]
 80051f2:	e012      	b.n	800521a <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 80051f4:	7dfa      	ldrb	r2, [r7, #23]
 80051f6:	7d38      	ldrb	r0, [r7, #20]
 80051f8:	7d39      	ldrb	r1, [r7, #20]
 80051fa:	4c3b      	ldr	r4, [pc, #236]	; (80052e8 <ILI9341_Draw_Char+0x128>)
 80051fc:	4613      	mov	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4413      	add	r3, r2
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4423      	add	r3, r4
 8005206:	4403      	add	r3, r0
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	f107 0318 	add.w	r3, r7, #24
 800520e:	440b      	add	r3, r1
 8005210:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8005214:	7d3b      	ldrb	r3, [r7, #20]
 8005216:	3301      	adds	r3, #1
 8005218:	753b      	strb	r3, [r7, #20]
 800521a:	7d3b      	ldrb	r3, [r7, #20]
 800521c:	2b05      	cmp	r3, #5
 800521e:	d9e9      	bls.n	80051f4 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8005220:	79bb      	ldrb	r3, [r7, #6]
 8005222:	b299      	uxth	r1, r3
 8005224:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005226:	461a      	mov	r2, r3
 8005228:	0052      	lsls	r2, r2, #1
 800522a:	4413      	add	r3, r2
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	b29c      	uxth	r4, r3
 8005236:	88b8      	ldrh	r0, [r7, #4]
 8005238:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	4623      	mov	r3, r4
 800523e:	f000 fc37 	bl	8005ab0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8005242:	2300      	movs	r3, #0
 8005244:	757b      	strb	r3, [r7, #21]
 8005246:	e046      	b.n	80052d6 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005248:	2300      	movs	r3, #0
 800524a:	75bb      	strb	r3, [r7, #22]
 800524c:	e03d      	b.n	80052ca <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800524e:	7d7b      	ldrb	r3, [r7, #21]
 8005250:	f107 0218 	add.w	r2, r7, #24
 8005254:	4413      	add	r3, r2
 8005256:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800525a:	461a      	mov	r2, r3
 800525c:	7dbb      	ldrb	r3, [r7, #22]
 800525e:	fa42 f303 	asr.w	r3, r2, r3
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d02c      	beq.n	80052c4 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 800526a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10f      	bne.n	8005290 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8005270:	7d7b      	ldrb	r3, [r7, #21]
 8005272:	b29a      	uxth	r2, r3
 8005274:	88bb      	ldrh	r3, [r7, #4]
 8005276:	4413      	add	r3, r2
 8005278:	b298      	uxth	r0, r3
 800527a:	79bb      	ldrb	r3, [r7, #6]
 800527c:	b29a      	uxth	r2, r3
 800527e:	7dbb      	ldrb	r3, [r7, #22]
 8005280:	b29b      	uxth	r3, r3
 8005282:	4413      	add	r3, r2
 8005284:	b29b      	uxth	r3, r3
 8005286:	887a      	ldrh	r2, [r7, #2]
 8005288:	4619      	mov	r1, r3
 800528a:	f000 fb49 	bl	8005920 <ILI9341_Draw_Pixel>
 800528e:	e019      	b.n	80052c4 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8005290:	7d7b      	ldrb	r3, [r7, #21]
 8005292:	b29b      	uxth	r3, r3
 8005294:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005296:	fb12 f303 	smulbb	r3, r2, r3
 800529a:	b29a      	uxth	r2, r3
 800529c:	88bb      	ldrh	r3, [r7, #4]
 800529e:	4413      	add	r3, r2
 80052a0:	b298      	uxth	r0, r3
 80052a2:	79bb      	ldrb	r3, [r7, #6]
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	7dbb      	ldrb	r3, [r7, #22]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80052ac:	fb11 f303 	smulbb	r3, r1, r3
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	b299      	uxth	r1, r3
 80052b6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80052b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80052ba:	887b      	ldrh	r3, [r7, #2]
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	4623      	mov	r3, r4
 80052c0:	f000 fbf6 	bl	8005ab0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80052c4:	7dbb      	ldrb	r3, [r7, #22]
 80052c6:	3301      	adds	r3, #1
 80052c8:	75bb      	strb	r3, [r7, #22]
 80052ca:	7dbb      	ldrb	r3, [r7, #22]
 80052cc:	2b07      	cmp	r3, #7
 80052ce:	d9be      	bls.n	800524e <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80052d0:	7d7b      	ldrb	r3, [r7, #21]
 80052d2:	3301      	adds	r3, #1
 80052d4:	757b      	strb	r3, [r7, #21]
 80052d6:	7d7b      	ldrb	r3, [r7, #21]
 80052d8:	2b05      	cmp	r3, #5
 80052da:	d9b5      	bls.n	8005248 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd90      	pop	{r4, r7, pc}
 80052e6:	bf00      	nop
 80052e8:	080198c8 	.word	0x080198c8

080052ec <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80052ec:	b590      	push	{r4, r7, lr}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	817b      	strh	r3, [r7, #10]
 80052fe:	460b      	mov	r3, r1
 8005300:	727b      	strb	r3, [r7, #9]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8005306:	e016      	b.n	8005336 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	60fa      	str	r2, [r7, #12]
 800530e:	7818      	ldrb	r0, [r3, #0]
 8005310:	88fc      	ldrh	r4, [r7, #6]
 8005312:	7a7a      	ldrb	r2, [r7, #9]
 8005314:	8979      	ldrh	r1, [r7, #10]
 8005316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	8c3b      	ldrh	r3, [r7, #32]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4623      	mov	r3, r4
 8005320:	f7ff ff4e 	bl	80051c0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8005324:	8c3b      	ldrh	r3, [r7, #32]
 8005326:	461a      	mov	r2, r3
 8005328:	0052      	lsls	r2, r2, #1
 800532a:	4413      	add	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	897b      	ldrh	r3, [r7, #10]
 8005332:	4413      	add	r3, r2
 8005334:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e4      	bne.n	8005308 <ILI9341_Draw_Text+0x1c>
    }
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800534c:	2200      	movs	r2, #0
 800534e:	2110      	movs	r1, #16
 8005350:	4802      	ldr	r0, [pc, #8]	; (800535c <ILI9341_SPI_Init+0x14>)
 8005352:	f000 ff27 	bl	80061a4 <HAL_GPIO_WritePin>
}
 8005356:	bf00      	nop
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40021000 	.word	0x40021000

08005360 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800536a:	1df9      	adds	r1, r7, #7
 800536c:	2301      	movs	r3, #1
 800536e:	2201      	movs	r2, #1
 8005370:	4803      	ldr	r0, [pc, #12]	; (8005380 <ILI9341_SPI_Send+0x20>)
 8005372:	f004 fdb8 	bl	8009ee6 <HAL_SPI_Transmit>
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20009160 	.word	0x20009160

08005384 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800538e:	2200      	movs	r2, #0
 8005390:	2110      	movs	r1, #16
 8005392:	480a      	ldr	r0, [pc, #40]	; (80053bc <ILI9341_Write_Command+0x38>)
 8005394:	f000 ff06 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005398:	2200      	movs	r2, #0
 800539a:	2140      	movs	r1, #64	; 0x40
 800539c:	4807      	ldr	r0, [pc, #28]	; (80053bc <ILI9341_Write_Command+0x38>)
 800539e:	f000 ff01 	bl	80061a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ffdb 	bl	8005360 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80053aa:	2201      	movs	r2, #1
 80053ac:	2110      	movs	r1, #16
 80053ae:	4803      	ldr	r0, [pc, #12]	; (80053bc <ILI9341_Write_Command+0x38>)
 80053b0:	f000 fef8 	bl	80061a4 <HAL_GPIO_WritePin>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40021000 	.word	0x40021000

080053c0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80053ca:	2201      	movs	r2, #1
 80053cc:	2140      	movs	r1, #64	; 0x40
 80053ce:	480a      	ldr	r0, [pc, #40]	; (80053f8 <ILI9341_Write_Data+0x38>)
 80053d0:	f000 fee8 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80053d4:	2200      	movs	r2, #0
 80053d6:	2110      	movs	r1, #16
 80053d8:	4807      	ldr	r0, [pc, #28]	; (80053f8 <ILI9341_Write_Data+0x38>)
 80053da:	f000 fee3 	bl	80061a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff ffbd 	bl	8005360 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80053e6:	2201      	movs	r2, #1
 80053e8:	2110      	movs	r1, #16
 80053ea:	4803      	ldr	r0, [pc, #12]	; (80053f8 <ILI9341_Write_Data+0x38>)
 80053ec:	f000 feda 	bl	80061a4 <HAL_GPIO_WritePin>
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40021000 	.word	0x40021000

080053fc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	461a      	mov	r2, r3
 800540a:	4623      	mov	r3, r4
 800540c:	80fb      	strh	r3, [r7, #6]
 800540e:	4603      	mov	r3, r0
 8005410:	80bb      	strh	r3, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	807b      	strh	r3, [r7, #2]
 8005416:	4613      	mov	r3, r2
 8005418:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800541a:	202a      	movs	r0, #42	; 0x2a
 800541c:	f7ff ffb2 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8005420:	88fb      	ldrh	r3, [r7, #6]
 8005422:	0a1b      	lsrs	r3, r3, #8
 8005424:	b29b      	uxth	r3, r3
 8005426:	b2db      	uxtb	r3, r3
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ffc9 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff ffc4 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	b29b      	uxth	r3, r3
 800543e:	b2db      	uxtb	r3, r3
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff ffbd 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff ffb8 	bl	80053c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8005450:	202b      	movs	r0, #43	; 0x2b
 8005452:	f7ff ff97 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8005456:	88bb      	ldrh	r3, [r7, #4]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	b29b      	uxth	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ffae 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8005464:	88bb      	ldrh	r3, [r7, #4]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff ffa9 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800546e:	883b      	ldrh	r3, [r7, #0]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	b29b      	uxth	r3, r3
 8005474:	b2db      	uxtb	r3, r3
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff ffa2 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800547c:	883b      	ldrh	r3, [r7, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff ff9d 	bl	80053c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8005486:	202c      	movs	r0, #44	; 0x2c
 8005488:	f7ff ff7c 	bl	8005384 <ILI9341_Write_Command>
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	bd90      	pop	{r4, r7, pc}

08005494 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8005498:	2200      	movs	r2, #0
 800549a:	2120      	movs	r1, #32
 800549c:	480a      	ldr	r0, [pc, #40]	; (80054c8 <ILI9341_Reset+0x34>)
 800549e:	f000 fe81 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80054a2:	20c8      	movs	r0, #200	; 0xc8
 80054a4:	f000 fbdc 	bl	8005c60 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80054a8:	2200      	movs	r2, #0
 80054aa:	2110      	movs	r1, #16
 80054ac:	4806      	ldr	r0, [pc, #24]	; (80054c8 <ILI9341_Reset+0x34>)
 80054ae:	f000 fe79 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80054b2:	20c8      	movs	r0, #200	; 0xc8
 80054b4:	f000 fbd4 	bl	8005c60 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80054b8:	2201      	movs	r2, #1
 80054ba:	2120      	movs	r1, #32
 80054bc:	4802      	ldr	r0, [pc, #8]	; (80054c8 <ILI9341_Reset+0x34>)
 80054be:	f000 fe71 	bl	80061a4 <HAL_GPIO_WritePin>
}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40021000 	.word	0x40021000

080054cc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80054da:	2036      	movs	r0, #54	; 0x36
 80054dc:	f7ff ff52 	bl	8005384 <ILI9341_Write_Command>
HAL_Delay(1);
 80054e0:	2001      	movs	r0, #1
 80054e2:	f000 fbbd 	bl	8005c60 <HAL_Delay>
	
switch(screen_rotation) 
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d837      	bhi.n	800555c <ILI9341_Set_Rotation+0x90>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <ILI9341_Set_Rotation+0x28>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005505 	.word	0x08005505
 80054f8:	0800551b 	.word	0x0800551b
 80054fc:	08005531 	.word	0x08005531
 8005500:	08005547 	.word	0x08005547
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8005504:	2048      	movs	r0, #72	; 0x48
 8005506:	f7ff ff5b 	bl	80053c0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800550a:	4b17      	ldr	r3, [pc, #92]	; (8005568 <ILI9341_Set_Rotation+0x9c>)
 800550c:	22f0      	movs	r2, #240	; 0xf0
 800550e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005510:	4b16      	ldr	r3, [pc, #88]	; (800556c <ILI9341_Set_Rotation+0xa0>)
 8005512:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005516:	801a      	strh	r2, [r3, #0]
			break;
 8005518:	e021      	b.n	800555e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800551a:	2028      	movs	r0, #40	; 0x28
 800551c:	f7ff ff50 	bl	80053c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005520:	4b11      	ldr	r3, [pc, #68]	; (8005568 <ILI9341_Set_Rotation+0x9c>)
 8005522:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005526:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005528:	4b10      	ldr	r3, [pc, #64]	; (800556c <ILI9341_Set_Rotation+0xa0>)
 800552a:	22f0      	movs	r2, #240	; 0xf0
 800552c:	801a      	strh	r2, [r3, #0]
			break;
 800552e:	e016      	b.n	800555e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8005530:	2088      	movs	r0, #136	; 0x88
 8005532:	f7ff ff45 	bl	80053c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <ILI9341_Set_Rotation+0x9c>)
 8005538:	22f0      	movs	r2, #240	; 0xf0
 800553a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <ILI9341_Set_Rotation+0xa0>)
 800553e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005542:	801a      	strh	r2, [r3, #0]
			break;
 8005544:	e00b      	b.n	800555e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8005546:	20e8      	movs	r0, #232	; 0xe8
 8005548:	f7ff ff3a 	bl	80053c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <ILI9341_Set_Rotation+0x9c>)
 800554e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005552:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <ILI9341_Set_Rotation+0xa0>)
 8005556:	22f0      	movs	r2, #240	; 0xf0
 8005558:	801a      	strh	r2, [r3, #0]
			break;
 800555a:	e000      	b.n	800555e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800555c:	bf00      	nop
	}
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	2000000a 	.word	0x2000000a
 800556c:	20000008 	.word	0x20000008

08005570 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005574:	2201      	movs	r2, #1
 8005576:	2120      	movs	r1, #32
 8005578:	4802      	ldr	r0, [pc, #8]	; (8005584 <ILI9341_Enable+0x14>)
 800557a:	f000 fe13 	bl	80061a4 <HAL_GPIO_WritePin>
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000

08005588 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800558c:	f7ff fff0 	bl	8005570 <ILI9341_Enable>
ILI9341_SPI_Init();
 8005590:	f7ff feda 	bl	8005348 <ILI9341_SPI_Init>
ILI9341_Reset();
 8005594:	f7ff ff7e 	bl	8005494 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8005598:	2001      	movs	r0, #1
 800559a:	f7ff fef3 	bl	8005384 <ILI9341_Write_Command>
HAL_Delay(1000);
 800559e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055a2:	f000 fb5d 	bl	8005c60 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80055a6:	20cb      	movs	r0, #203	; 0xcb
 80055a8:	f7ff feec 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80055ac:	2039      	movs	r0, #57	; 0x39
 80055ae:	f7ff ff07 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80055b2:	202c      	movs	r0, #44	; 0x2c
 80055b4:	f7ff ff04 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7ff ff01 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80055be:	2034      	movs	r0, #52	; 0x34
 80055c0:	f7ff fefe 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80055c4:	2002      	movs	r0, #2
 80055c6:	f7ff fefb 	bl	80053c0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80055ca:	20cf      	movs	r0, #207	; 0xcf
 80055cc:	f7ff feda 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80055d0:	2000      	movs	r0, #0
 80055d2:	f7ff fef5 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80055d6:	20c1      	movs	r0, #193	; 0xc1
 80055d8:	f7ff fef2 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80055dc:	2030      	movs	r0, #48	; 0x30
 80055de:	f7ff feef 	bl	80053c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80055e2:	20e8      	movs	r0, #232	; 0xe8
 80055e4:	f7ff fece 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80055e8:	2085      	movs	r0, #133	; 0x85
 80055ea:	f7ff fee9 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80055ee:	2000      	movs	r0, #0
 80055f0:	f7ff fee6 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80055f4:	2078      	movs	r0, #120	; 0x78
 80055f6:	f7ff fee3 	bl	80053c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80055fa:	20ea      	movs	r0, #234	; 0xea
 80055fc:	f7ff fec2 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005600:	2000      	movs	r0, #0
 8005602:	f7ff fedd 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005606:	2000      	movs	r0, #0
 8005608:	f7ff feda 	bl	80053c0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800560c:	20ed      	movs	r0, #237	; 0xed
 800560e:	f7ff feb9 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8005612:	2064      	movs	r0, #100	; 0x64
 8005614:	f7ff fed4 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8005618:	2003      	movs	r0, #3
 800561a:	f7ff fed1 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800561e:	2012      	movs	r0, #18
 8005620:	f7ff fece 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8005624:	2081      	movs	r0, #129	; 0x81
 8005626:	f7ff fecb 	bl	80053c0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800562a:	20f7      	movs	r0, #247	; 0xf7
 800562c:	f7ff feaa 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8005630:	2020      	movs	r0, #32
 8005632:	f7ff fec5 	bl	80053c0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8005636:	20c0      	movs	r0, #192	; 0xc0
 8005638:	f7ff fea4 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800563c:	2023      	movs	r0, #35	; 0x23
 800563e:	f7ff febf 	bl	80053c0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8005642:	20c1      	movs	r0, #193	; 0xc1
 8005644:	f7ff fe9e 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8005648:	2010      	movs	r0, #16
 800564a:	f7ff feb9 	bl	80053c0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800564e:	20c5      	movs	r0, #197	; 0xc5
 8005650:	f7ff fe98 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8005654:	203e      	movs	r0, #62	; 0x3e
 8005656:	f7ff feb3 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800565a:	2028      	movs	r0, #40	; 0x28
 800565c:	f7ff feb0 	bl	80053c0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8005660:	20c7      	movs	r0, #199	; 0xc7
 8005662:	f7ff fe8f 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8005666:	2086      	movs	r0, #134	; 0x86
 8005668:	f7ff feaa 	bl	80053c0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800566c:	2036      	movs	r0, #54	; 0x36
 800566e:	f7ff fe89 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8005672:	2048      	movs	r0, #72	; 0x48
 8005674:	f7ff fea4 	bl	80053c0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8005678:	203a      	movs	r0, #58	; 0x3a
 800567a:	f7ff fe83 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800567e:	2055      	movs	r0, #85	; 0x55
 8005680:	f7ff fe9e 	bl	80053c0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8005684:	20b1      	movs	r0, #177	; 0xb1
 8005686:	f7ff fe7d 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800568a:	2000      	movs	r0, #0
 800568c:	f7ff fe98 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8005690:	2018      	movs	r0, #24
 8005692:	f7ff fe95 	bl	80053c0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8005696:	20b6      	movs	r0, #182	; 0xb6
 8005698:	f7ff fe74 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800569c:	2008      	movs	r0, #8
 800569e:	f7ff fe8f 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80056a2:	2082      	movs	r0, #130	; 0x82
 80056a4:	f7ff fe8c 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80056a8:	2027      	movs	r0, #39	; 0x27
 80056aa:	f7ff fe89 	bl	80053c0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80056ae:	20f2      	movs	r0, #242	; 0xf2
 80056b0:	f7ff fe68 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80056b4:	2000      	movs	r0, #0
 80056b6:	f7ff fe83 	bl	80053c0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80056ba:	2026      	movs	r0, #38	; 0x26
 80056bc:	f7ff fe62 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80056c0:	2001      	movs	r0, #1
 80056c2:	f7ff fe7d 	bl	80053c0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80056c6:	20e0      	movs	r0, #224	; 0xe0
 80056c8:	f7ff fe5c 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80056cc:	200f      	movs	r0, #15
 80056ce:	f7ff fe77 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80056d2:	2031      	movs	r0, #49	; 0x31
 80056d4:	f7ff fe74 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80056d8:	202b      	movs	r0, #43	; 0x2b
 80056da:	f7ff fe71 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80056de:	200c      	movs	r0, #12
 80056e0:	f7ff fe6e 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80056e4:	200e      	movs	r0, #14
 80056e6:	f7ff fe6b 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80056ea:	2008      	movs	r0, #8
 80056ec:	f7ff fe68 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80056f0:	204e      	movs	r0, #78	; 0x4e
 80056f2:	f7ff fe65 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80056f6:	20f1      	movs	r0, #241	; 0xf1
 80056f8:	f7ff fe62 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80056fc:	2037      	movs	r0, #55	; 0x37
 80056fe:	f7ff fe5f 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8005702:	2007      	movs	r0, #7
 8005704:	f7ff fe5c 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8005708:	2010      	movs	r0, #16
 800570a:	f7ff fe59 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800570e:	2003      	movs	r0, #3
 8005710:	f7ff fe56 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005714:	200e      	movs	r0, #14
 8005716:	f7ff fe53 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800571a:	2009      	movs	r0, #9
 800571c:	f7ff fe50 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005720:	2000      	movs	r0, #0
 8005722:	f7ff fe4d 	bl	80053c0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8005726:	20e1      	movs	r0, #225	; 0xe1
 8005728:	f7ff fe2c 	bl	8005384 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800572c:	2000      	movs	r0, #0
 800572e:	f7ff fe47 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005732:	200e      	movs	r0, #14
 8005734:	f7ff fe44 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8005738:	2014      	movs	r0, #20
 800573a:	f7ff fe41 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800573e:	2003      	movs	r0, #3
 8005740:	f7ff fe3e 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8005744:	2011      	movs	r0, #17
 8005746:	f7ff fe3b 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800574a:	2007      	movs	r0, #7
 800574c:	f7ff fe38 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005750:	2031      	movs	r0, #49	; 0x31
 8005752:	f7ff fe35 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8005756:	20c1      	movs	r0, #193	; 0xc1
 8005758:	f7ff fe32 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800575c:	2048      	movs	r0, #72	; 0x48
 800575e:	f7ff fe2f 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8005762:	2008      	movs	r0, #8
 8005764:	f7ff fe2c 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8005768:	200f      	movs	r0, #15
 800576a:	f7ff fe29 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800576e:	200c      	movs	r0, #12
 8005770:	f7ff fe26 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005774:	2031      	movs	r0, #49	; 0x31
 8005776:	f7ff fe23 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800577a:	2036      	movs	r0, #54	; 0x36
 800577c:	f7ff fe20 	bl	80053c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8005780:	200f      	movs	r0, #15
 8005782:	f7ff fe1d 	bl	80053c0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8005786:	2011      	movs	r0, #17
 8005788:	f7ff fdfc 	bl	8005384 <ILI9341_Write_Command>
HAL_Delay(120);
 800578c:	2078      	movs	r0, #120	; 0x78
 800578e:	f000 fa67 	bl	8005c60 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8005792:	2029      	movs	r0, #41	; 0x29
 8005794:	f7ff fdf6 	bl	8005384 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8005798:	2003      	movs	r0, #3
 800579a:	f7ff fe97 	bl	80054cc <ILI9341_Set_Rotation>

HAL_Delay(10);
 800579e:	200a      	movs	r0, #10
 80057a0:	f000 fa5e 	bl	8005c60 <HAL_Delay>
//
}
 80057a4:	bf00      	nop
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80057a8:	b5b0      	push	{r4, r5, r7, lr}
 80057aa:	b08c      	sub	sp, #48	; 0x30
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	6039      	str	r1, [r7, #0]
 80057b2:	80fb      	strh	r3, [r7, #6]
 80057b4:	466b      	mov	r3, sp
 80057b6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80057c4:	d202      	bcs.n	80057cc <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ca:	e002      	b.n	80057d2 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80057cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80057d2:	2201      	movs	r2, #1
 80057d4:	2140      	movs	r1, #64	; 0x40
 80057d6:	483d      	ldr	r0, [pc, #244]	; (80058cc <ILI9341_Draw_Colour_Burst+0x124>)
 80057d8:	f000 fce4 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80057dc:	2200      	movs	r2, #0
 80057de:	2110      	movs	r1, #16
 80057e0:	483a      	ldr	r0, [pc, #232]	; (80058cc <ILI9341_Draw_Colour_Burst+0x124>)
 80057e2:	f000 fcdf 	bl	80061a4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	0a1b      	lsrs	r3, r3, #8
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80057f0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80057f2:	4623      	mov	r3, r4
 80057f4:	3b01      	subs	r3, #1
 80057f6:	61fb      	str	r3, [r7, #28]
 80057f8:	4620      	mov	r0, r4
 80057fa:	f04f 0100 	mov.w	r1, #0
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	00cb      	lsls	r3, r1, #3
 8005808:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800580c:	00c2      	lsls	r2, r0, #3
 800580e:	4620      	mov	r0, r4
 8005810:	f04f 0100 	mov.w	r1, #0
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	00cb      	lsls	r3, r1, #3
 800581e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005822:	00c2      	lsls	r2, r0, #3
 8005824:	1de3      	adds	r3, r4, #7
 8005826:	08db      	lsrs	r3, r3, #3
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	ebad 0d03 	sub.w	sp, sp, r3
 800582e:	466b      	mov	r3, sp
 8005830:	3300      	adds	r3, #0
 8005832:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005834:	2300      	movs	r3, #0
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
 8005838:	e00e      	b.n	8005858 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	4413      	add	r3, r2
 8005840:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005844:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	3301      	adds	r3, #1
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	b2d1      	uxtb	r1, r2
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	3302      	adds	r3, #2
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
 8005858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	429a      	cmp	r2, r3
 800585e:	d3ec      	bcc.n	800583a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005874:	fbb3 f2f2 	udiv	r2, r3, r2
 8005878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800587a:	fb01 f202 	mul.w	r2, r1, r2
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d010      	beq.n	80058aa <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8005888:	2300      	movs	r3, #0
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588c:	e009      	b.n	80058a2 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800588e:	69b9      	ldr	r1, [r7, #24]
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	b29a      	uxth	r2, r3
 8005894:	230a      	movs	r3, #10
 8005896:	480e      	ldr	r0, [pc, #56]	; (80058d0 <ILI9341_Draw_Colour_Burst+0x128>)
 8005898:	f004 fb25 	bl	8009ee6 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	3301      	adds	r3, #1
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d3f1      	bcc.n	800588e <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80058aa:	69b9      	ldr	r1, [r7, #24]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	230a      	movs	r3, #10
 80058b2:	4807      	ldr	r0, [pc, #28]	; (80058d0 <ILI9341_Draw_Colour_Burst+0x128>)
 80058b4:	f004 fb17 	bl	8009ee6 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80058b8:	2201      	movs	r2, #1
 80058ba:	2110      	movs	r1, #16
 80058bc:	4803      	ldr	r0, [pc, #12]	; (80058cc <ILI9341_Draw_Colour_Burst+0x124>)
 80058be:	f000 fc71 	bl	80061a4 <HAL_GPIO_WritePin>
 80058c2:	46ad      	mov	sp, r5
}
 80058c4:	bf00      	nop
 80058c6:	3730      	adds	r7, #48	; 0x30
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bdb0      	pop	{r4, r5, r7, pc}
 80058cc:	40021000 	.word	0x40021000
 80058d0:	20009160 	.word	0x20009160

080058d4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80058de:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <ILI9341_Fill_Screen+0x44>)
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	4b0d      	ldr	r3, [pc, #52]	; (800591c <ILI9341_Fill_Screen+0x48>)
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2100      	movs	r1, #0
 80058ec:	2000      	movs	r0, #0
 80058ee:	f7ff fd85 	bl	80053fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <ILI9341_Fill_Screen+0x44>)
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	4b08      	ldr	r3, [pc, #32]	; (800591c <ILI9341_Fill_Screen+0x48>)
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	fb03 f302 	mul.w	r3, r3, r2
 8005904:	461a      	mov	r2, r3
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff ff4c 	bl	80057a8 <ILI9341_Draw_Colour_Burst>
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	2000000a 	.word	0x2000000a
 800591c:	20000008 	.word	0x20000008

08005920 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	80fb      	strh	r3, [r7, #6]
 800592a:	460b      	mov	r3, r1
 800592c:	80bb      	strh	r3, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005932:	4b5b      	ldr	r3, [pc, #364]	; (8005aa0 <ILI9341_Draw_Pixel+0x180>)
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	429a      	cmp	r2, r3
 800593c:	f080 80ac 	bcs.w	8005a98 <ILI9341_Draw_Pixel+0x178>
 8005940:	4b58      	ldr	r3, [pc, #352]	; (8005aa4 <ILI9341_Draw_Pixel+0x184>)
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	88ba      	ldrh	r2, [r7, #4]
 8005948:	429a      	cmp	r2, r3
 800594a:	f080 80a5 	bcs.w	8005a98 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800594e:	2200      	movs	r2, #0
 8005950:	2140      	movs	r1, #64	; 0x40
 8005952:	4855      	ldr	r0, [pc, #340]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005954:	f000 fc26 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005958:	2200      	movs	r2, #0
 800595a:	2110      	movs	r1, #16
 800595c:	4852      	ldr	r0, [pc, #328]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 800595e:	f000 fc21 	bl	80061a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8005962:	202a      	movs	r0, #42	; 0x2a
 8005964:	f7ff fcfc 	bl	8005360 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8005968:	2201      	movs	r2, #1
 800596a:	2140      	movs	r1, #64	; 0x40
 800596c:	484e      	ldr	r0, [pc, #312]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 800596e:	f000 fc19 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8005972:	2201      	movs	r2, #1
 8005974:	2110      	movs	r1, #16
 8005976:	484c      	ldr	r0, [pc, #304]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005978:	f000 fc14 	bl	80061a4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800597c:	2200      	movs	r2, #0
 800597e:	2110      	movs	r1, #16
 8005980:	4849      	ldr	r0, [pc, #292]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005982:	f000 fc0f 	bl	80061a4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	b29b      	uxth	r3, r3
 800598c:	b2db      	uxtb	r3, r3
 800598e:	753b      	strb	r3, [r7, #20]
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	757b      	strb	r3, [r7, #21]
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	3301      	adds	r3, #1
 800599a:	121b      	asrs	r3, r3, #8
 800599c:	b2db      	uxtb	r3, r3
 800599e:	75bb      	strb	r3, [r7, #22]
 80059a0:	88fb      	ldrh	r3, [r7, #6]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	3301      	adds	r3, #1
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80059aa:	f107 0114 	add.w	r1, r7, #20
 80059ae:	2301      	movs	r3, #1
 80059b0:	2204      	movs	r2, #4
 80059b2:	483e      	ldr	r0, [pc, #248]	; (8005aac <ILI9341_Draw_Pixel+0x18c>)
 80059b4:	f004 fa97 	bl	8009ee6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80059b8:	2201      	movs	r2, #1
 80059ba:	2110      	movs	r1, #16
 80059bc:	483a      	ldr	r0, [pc, #232]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 80059be:	f000 fbf1 	bl	80061a4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80059c2:	2200      	movs	r2, #0
 80059c4:	2140      	movs	r1, #64	; 0x40
 80059c6:	4838      	ldr	r0, [pc, #224]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 80059c8:	f000 fbec 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80059cc:	2200      	movs	r2, #0
 80059ce:	2110      	movs	r1, #16
 80059d0:	4835      	ldr	r0, [pc, #212]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 80059d2:	f000 fbe7 	bl	80061a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80059d6:	202b      	movs	r0, #43	; 0x2b
 80059d8:	f7ff fcc2 	bl	8005360 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80059dc:	2201      	movs	r2, #1
 80059de:	2140      	movs	r1, #64	; 0x40
 80059e0:	4831      	ldr	r0, [pc, #196]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 80059e2:	f000 fbdf 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80059e6:	2201      	movs	r2, #1
 80059e8:	2110      	movs	r1, #16
 80059ea:	482f      	ldr	r0, [pc, #188]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 80059ec:	f000 fbda 	bl	80061a4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80059f0:	2200      	movs	r2, #0
 80059f2:	2110      	movs	r1, #16
 80059f4:	482c      	ldr	r0, [pc, #176]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 80059f6:	f000 fbd5 	bl	80061a4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80059fa:	88bb      	ldrh	r3, [r7, #4]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	743b      	strb	r3, [r7, #16]
 8005a04:	88bb      	ldrh	r3, [r7, #4]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	747b      	strb	r3, [r7, #17]
 8005a0a:	88bb      	ldrh	r3, [r7, #4]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	121b      	asrs	r3, r3, #8
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	74bb      	strb	r3, [r7, #18]
 8005a14:	88bb      	ldrh	r3, [r7, #4]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	3301      	adds	r3, #1
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8005a1e:	f107 0110 	add.w	r1, r7, #16
 8005a22:	2301      	movs	r3, #1
 8005a24:	2204      	movs	r2, #4
 8005a26:	4821      	ldr	r0, [pc, #132]	; (8005aac <ILI9341_Draw_Pixel+0x18c>)
 8005a28:	f004 fa5d 	bl	8009ee6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	2110      	movs	r1, #16
 8005a30:	481d      	ldr	r0, [pc, #116]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005a32:	f000 fbb7 	bl	80061a4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005a36:	2200      	movs	r2, #0
 8005a38:	2140      	movs	r1, #64	; 0x40
 8005a3a:	481b      	ldr	r0, [pc, #108]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005a3c:	f000 fbb2 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005a40:	2200      	movs	r2, #0
 8005a42:	2110      	movs	r1, #16
 8005a44:	4818      	ldr	r0, [pc, #96]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005a46:	f000 fbad 	bl	80061a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8005a4a:	202c      	movs	r0, #44	; 0x2c
 8005a4c:	f7ff fc88 	bl	8005360 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8005a50:	2201      	movs	r2, #1
 8005a52:	2140      	movs	r1, #64	; 0x40
 8005a54:	4814      	ldr	r0, [pc, #80]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005a56:	f000 fba5 	bl	80061a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2110      	movs	r1, #16
 8005a5e:	4812      	ldr	r0, [pc, #72]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005a60:	f000 fba0 	bl	80061a4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005a64:	2200      	movs	r2, #0
 8005a66:	2110      	movs	r1, #16
 8005a68:	480f      	ldr	r0, [pc, #60]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005a6a:	f000 fb9b 	bl	80061a4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8005a6e:	887b      	ldrh	r3, [r7, #2]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	733b      	strb	r3, [r7, #12]
 8005a78:	887b      	ldrh	r3, [r7, #2]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8005a7e:	f107 010c 	add.w	r1, r7, #12
 8005a82:	2301      	movs	r3, #1
 8005a84:	2202      	movs	r2, #2
 8005a86:	4809      	ldr	r0, [pc, #36]	; (8005aac <ILI9341_Draw_Pixel+0x18c>)
 8005a88:	f004 fa2d 	bl	8009ee6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	2110      	movs	r1, #16
 8005a90:	4805      	ldr	r0, [pc, #20]	; (8005aa8 <ILI9341_Draw_Pixel+0x188>)
 8005a92:	f000 fb87 	bl	80061a4 <HAL_GPIO_WritePin>
 8005a96:	e000      	b.n	8005a9a <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005a98:	bf00      	nop
	
}
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	2000000a 	.word	0x2000000a
 8005aa4:	20000008 	.word	0x20000008
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	20009160 	.word	0x20009160

08005ab0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	4623      	mov	r3, r4
 8005ac0:	80fb      	strh	r3, [r7, #6]
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	80bb      	strh	r3, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	807b      	strh	r3, [r7, #2]
 8005aca:	4613      	mov	r3, r2
 8005acc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8005ace:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <ILI9341_Draw_Rectangle+0xb0>)
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d23d      	bcs.n	8005b56 <ILI9341_Draw_Rectangle+0xa6>
 8005ada:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <ILI9341_Draw_Rectangle+0xb4>)
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	88ba      	ldrh	r2, [r7, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d237      	bcs.n	8005b56 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	887b      	ldrh	r3, [r7, #2]
 8005aea:	4413      	add	r3, r2
 8005aec:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <ILI9341_Draw_Rectangle+0xb0>)
 8005aee:	8812      	ldrh	r2, [r2, #0]
 8005af0:	b292      	uxth	r2, r2
 8005af2:	4293      	cmp	r3, r2
 8005af4:	dd05      	ble.n	8005b02 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8005af6:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <ILI9341_Draw_Rectangle+0xb0>)
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8005b02:	88ba      	ldrh	r2, [r7, #4]
 8005b04:	883b      	ldrh	r3, [r7, #0]
 8005b06:	4413      	add	r3, r2
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <ILI9341_Draw_Rectangle+0xb4>)
 8005b0a:	8812      	ldrh	r2, [r2, #0]
 8005b0c:	b292      	uxth	r2, r2
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	dd05      	ble.n	8005b1e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8005b12:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <ILI9341_Draw_Rectangle+0xb4>)
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	88bb      	ldrh	r3, [r7, #4]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	887b      	ldrh	r3, [r7, #2]
 8005b22:	4413      	add	r3, r2
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29c      	uxth	r4, r3
 8005b2a:	88ba      	ldrh	r2, [r7, #4]
 8005b2c:	883b      	ldrh	r3, [r7, #0]
 8005b2e:	4413      	add	r3, r2
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	88b9      	ldrh	r1, [r7, #4]
 8005b38:	88f8      	ldrh	r0, [r7, #6]
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	f7ff fc5e 	bl	80053fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8005b40:	883b      	ldrh	r3, [r7, #0]
 8005b42:	887a      	ldrh	r2, [r7, #2]
 8005b44:	fb02 f303 	mul.w	r3, r2, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	8b3b      	ldrh	r3, [r7, #24]
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff fe2a 	bl	80057a8 <ILI9341_Draw_Colour_Burst>
 8005b54:	e000      	b.n	8005b58 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8005b56:	bf00      	nop
}
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd90      	pop	{r4, r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	2000000a 	.word	0x2000000a
 8005b64:	20000008 	.word	0x20000008

08005b68 <LCD_init>:
#include <string.h>
#include <stdio.h>

// -----------------------------------------------------------------------
void LCD_init(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8005b6c:	f7ff fd0c 	bl	8005588 <ILI9341_Init>
	ILI9341_Fill_Screen(BLACK);
 8005b70:	2000      	movs	r0, #0
 8005b72:	f7ff feaf 	bl	80058d4 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8005b76:	2003      	movs	r0, #3
 8005b78:	f7ff fca8 	bl	80054cc <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(BLACK);
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f7ff fea9 	bl	80058d4 <ILI9341_Fill_Screen>
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b8c:	480d      	ldr	r0, [pc, #52]	; (8005bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b8e:	490e      	ldr	r1, [pc, #56]	; (8005bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b90:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b94:	e002      	b.n	8005b9c <LoopCopyDataInit>

08005b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b9a:	3304      	adds	r3, #4

08005b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ba0:	d3f9      	bcc.n	8005b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ba2:	4a0b      	ldr	r2, [pc, #44]	; (8005bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005ba4:	4c0b      	ldr	r4, [pc, #44]	; (8005bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ba8:	e001      	b.n	8005bae <LoopFillZerobss>

08005baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bac:	3204      	adds	r2, #4

08005bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bb0:	d3fb      	bcc.n	8005baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005bb2:	f7ff fa95 	bl	80050e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bb6:	f010 fb89 	bl	80162cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005bba:	f7fd fb47 	bl	800324c <main>
  bx  lr    
 8005bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bc8:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8005bcc:	0801a364 	.word	0x0801a364
  ldr r2, =_sbss
 8005bd0:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8005bd4:	20016cc0 	.word	0x20016cc0

08005bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bd8:	e7fe      	b.n	8005bd8 <ADC_IRQHandler>
	...

08005bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005be0:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <HAL_Init+0x40>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a0d      	ldr	r2, [pc, #52]	; (8005c1c <HAL_Init+0x40>)
 8005be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <HAL_Init+0x40>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <HAL_Init+0x40>)
 8005bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bf8:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <HAL_Init+0x40>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a07      	ldr	r2, [pc, #28]	; (8005c1c <HAL_Init+0x40>)
 8005bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c04:	2003      	movs	r0, #3
 8005c06:	f000 f8fc 	bl	8005e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c0a:	200f      	movs	r0, #15
 8005c0c:	f7ff f8fc 	bl	8004e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c10:	f7fe ff1c 	bl	8004a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40023c00 	.word	0x40023c00

08005c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_IncTick+0x20>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_IncTick+0x24>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4413      	add	r3, r2
 8005c30:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <HAL_IncTick+0x24>)
 8005c32:	6013      	str	r3, [r2, #0]
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20000010 	.word	0x20000010
 8005c44:	20013320 	.word	0x20013320

08005c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <HAL_GetTick+0x14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20013320 	.word	0x20013320

08005c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c68:	f7ff ffee 	bl	8005c48 <HAL_GetTick>
 8005c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c78:	d005      	beq.n	8005c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <HAL_Delay+0x44>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c86:	bf00      	nop
 8005c88:	f7ff ffde 	bl	8005c48 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d8f7      	bhi.n	8005c88 <HAL_Delay+0x28>
  {
  }
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000010 	.word	0x20000010

08005ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <__NVIC_SetPriorityGrouping+0x44>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cda:	4a04      	ldr	r2, [pc, #16]	; (8005cec <__NVIC_SetPriorityGrouping+0x44>)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	60d3      	str	r3, [r2, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	e000ed00 	.word	0xe000ed00

08005cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <__NVIC_GetPriorityGrouping+0x18>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	0a1b      	lsrs	r3, r3, #8
 8005cfa:	f003 0307 	and.w	r3, r3, #7
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	db0b      	blt.n	8005d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	f003 021f 	and.w	r2, r3, #31
 8005d24:	4907      	ldr	r1, [pc, #28]	; (8005d44 <__NVIC_EnableIRQ+0x38>)
 8005d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	e000e100 	.word	0xe000e100

08005d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	db0a      	blt.n	8005d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	490c      	ldr	r1, [pc, #48]	; (8005d94 <__NVIC_SetPriority+0x4c>)
 8005d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d66:	0112      	lsls	r2, r2, #4
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d70:	e00a      	b.n	8005d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4908      	ldr	r1, [pc, #32]	; (8005d98 <__NVIC_SetPriority+0x50>)
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	3b04      	subs	r3, #4
 8005d80:	0112      	lsls	r2, r2, #4
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	440b      	add	r3, r1
 8005d86:	761a      	strb	r2, [r3, #24]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	e000e100 	.word	0xe000e100
 8005d98:	e000ed00 	.word	0xe000ed00

08005d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f1c3 0307 	rsb	r3, r3, #7
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	bf28      	it	cs
 8005dba:	2304      	movcs	r3, #4
 8005dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	2b06      	cmp	r3, #6
 8005dc4:	d902      	bls.n	8005dcc <NVIC_EncodePriority+0x30>
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3b03      	subs	r3, #3
 8005dca:	e000      	b.n	8005dce <NVIC_EncodePriority+0x32>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	401a      	ands	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	fa01 f303 	lsl.w	r3, r1, r3
 8005dee:	43d9      	mvns	r1, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df4:	4313      	orrs	r3, r2
         );
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3724      	adds	r7, #36	; 0x24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff ff4c 	bl	8005ca8 <__NVIC_SetPriorityGrouping>
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e2a:	f7ff ff61 	bl	8005cf0 <__NVIC_GetPriorityGrouping>
 8005e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	6978      	ldr	r0, [r7, #20]
 8005e36:	f7ff ffb1 	bl	8005d9c <NVIC_EncodePriority>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e40:	4611      	mov	r1, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff ff80 	bl	8005d48 <__NVIC_SetPriority>
}
 8005e48:	bf00      	nop
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff ff54 	bl	8005d0c <__NVIC_EnableIRQ>
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	; 0x24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	e16b      	b.n	8006160 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e88:	2201      	movs	r2, #1
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	f040 815a 	bne.w	800615a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d005      	beq.n	8005ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d130      	bne.n	8005f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	2203      	movs	r2, #3
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	43db      	mvns	r3, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4013      	ands	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 0201 	and.w	r2, r3, #1
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d017      	beq.n	8005f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	2203      	movs	r2, #3
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4013      	ands	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d123      	bne.n	8005fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	08da      	lsrs	r2, r3, #3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3208      	adds	r2, #8
 8005f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	220f      	movs	r2, #15
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	43db      	mvns	r3, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	08da      	lsrs	r2, r3, #3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3208      	adds	r2, #8
 8005faa:	69b9      	ldr	r1, [r7, #24]
 8005fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	2203      	movs	r2, #3
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f003 0203 	and.w	r2, r3, #3
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80b4 	beq.w	800615a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	4b60      	ldr	r3, [pc, #384]	; (8006178 <HAL_GPIO_Init+0x30c>)
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	4a5f      	ldr	r2, [pc, #380]	; (8006178 <HAL_GPIO_Init+0x30c>)
 8005ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006000:	6453      	str	r3, [r2, #68]	; 0x44
 8006002:	4b5d      	ldr	r3, [pc, #372]	; (8006178 <HAL_GPIO_Init+0x30c>)
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800600e:	4a5b      	ldr	r2, [pc, #364]	; (800617c <HAL_GPIO_Init+0x310>)
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	3302      	adds	r3, #2
 8006016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	220f      	movs	r2, #15
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	43db      	mvns	r3, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a52      	ldr	r2, [pc, #328]	; (8006180 <HAL_GPIO_Init+0x314>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02b      	beq.n	8006092 <HAL_GPIO_Init+0x226>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a51      	ldr	r2, [pc, #324]	; (8006184 <HAL_GPIO_Init+0x318>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d025      	beq.n	800608e <HAL_GPIO_Init+0x222>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a50      	ldr	r2, [pc, #320]	; (8006188 <HAL_GPIO_Init+0x31c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01f      	beq.n	800608a <HAL_GPIO_Init+0x21e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a4f      	ldr	r2, [pc, #316]	; (800618c <HAL_GPIO_Init+0x320>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d019      	beq.n	8006086 <HAL_GPIO_Init+0x21a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a4e      	ldr	r2, [pc, #312]	; (8006190 <HAL_GPIO_Init+0x324>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <HAL_GPIO_Init+0x216>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a4d      	ldr	r2, [pc, #308]	; (8006194 <HAL_GPIO_Init+0x328>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00d      	beq.n	800607e <HAL_GPIO_Init+0x212>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a4c      	ldr	r2, [pc, #304]	; (8006198 <HAL_GPIO_Init+0x32c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d007      	beq.n	800607a <HAL_GPIO_Init+0x20e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a4b      	ldr	r2, [pc, #300]	; (800619c <HAL_GPIO_Init+0x330>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d101      	bne.n	8006076 <HAL_GPIO_Init+0x20a>
 8006072:	2307      	movs	r3, #7
 8006074:	e00e      	b.n	8006094 <HAL_GPIO_Init+0x228>
 8006076:	2308      	movs	r3, #8
 8006078:	e00c      	b.n	8006094 <HAL_GPIO_Init+0x228>
 800607a:	2306      	movs	r3, #6
 800607c:	e00a      	b.n	8006094 <HAL_GPIO_Init+0x228>
 800607e:	2305      	movs	r3, #5
 8006080:	e008      	b.n	8006094 <HAL_GPIO_Init+0x228>
 8006082:	2304      	movs	r3, #4
 8006084:	e006      	b.n	8006094 <HAL_GPIO_Init+0x228>
 8006086:	2303      	movs	r3, #3
 8006088:	e004      	b.n	8006094 <HAL_GPIO_Init+0x228>
 800608a:	2302      	movs	r3, #2
 800608c:	e002      	b.n	8006094 <HAL_GPIO_Init+0x228>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <HAL_GPIO_Init+0x228>
 8006092:	2300      	movs	r3, #0
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	f002 0203 	and.w	r2, r2, #3
 800609a:	0092      	lsls	r2, r2, #2
 800609c:	4093      	lsls	r3, r2
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060a4:	4935      	ldr	r1, [pc, #212]	; (800617c <HAL_GPIO_Init+0x310>)
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	089b      	lsrs	r3, r3, #2
 80060aa:	3302      	adds	r3, #2
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060b2:	4b3b      	ldr	r3, [pc, #236]	; (80061a0 <HAL_GPIO_Init+0x334>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	43db      	mvns	r3, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4013      	ands	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060d6:	4a32      	ldr	r2, [pc, #200]	; (80061a0 <HAL_GPIO_Init+0x334>)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060dc:	4b30      	ldr	r3, [pc, #192]	; (80061a0 <HAL_GPIO_Init+0x334>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	43db      	mvns	r3, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4013      	ands	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006100:	4a27      	ldr	r2, [pc, #156]	; (80061a0 <HAL_GPIO_Init+0x334>)
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006106:	4b26      	ldr	r3, [pc, #152]	; (80061a0 <HAL_GPIO_Init+0x334>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	43db      	mvns	r3, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4013      	ands	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800612a:	4a1d      	ldr	r2, [pc, #116]	; (80061a0 <HAL_GPIO_Init+0x334>)
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <HAL_GPIO_Init+0x334>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	43db      	mvns	r3, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4013      	ands	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006154:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <HAL_GPIO_Init+0x334>)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3301      	adds	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b0f      	cmp	r3, #15
 8006164:	f67f ae90 	bls.w	8005e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	3724      	adds	r7, #36	; 0x24
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40023800 	.word	0x40023800
 800617c:	40013800 	.word	0x40013800
 8006180:	40020000 	.word	0x40020000
 8006184:	40020400 	.word	0x40020400
 8006188:	40020800 	.word	0x40020800
 800618c:	40020c00 	.word	0x40020c00
 8006190:	40021000 	.word	0x40021000
 8006194:	40021400 	.word	0x40021400
 8006198:	40021800 	.word	0x40021800
 800619c:	40021c00 	.word	0x40021c00
 80061a0:	40013c00 	.word	0x40013c00

080061a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	807b      	strh	r3, [r7, #2]
 80061b0:	4613      	mov	r3, r2
 80061b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061b4:	787b      	ldrb	r3, [r7, #1]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061ba:	887a      	ldrh	r2, [r7, #2]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061c0:	e003      	b.n	80061ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061c2:	887b      	ldrh	r3, [r7, #2]
 80061c4:	041a      	lsls	r2, r3, #16
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	619a      	str	r2, [r3, #24]
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061e8:	887a      	ldrh	r2, [r7, #2]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4013      	ands	r3, r2
 80061ee:	041a      	lsls	r2, r3, #16
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	43d9      	mvns	r1, r3
 80061f4:	887b      	ldrh	r3, [r7, #2]
 80061f6:	400b      	ands	r3, r1
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	619a      	str	r2, [r3, #24]
}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e12b      	b.n	8006476 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fe fc36 	bl	8004aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2224      	movs	r2, #36	; 0x24
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0201 	bic.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800625e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800626e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006270:	f003 f83e 	bl	80092f0 <HAL_RCC_GetPCLK1Freq>
 8006274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4a81      	ldr	r2, [pc, #516]	; (8006480 <HAL_I2C_Init+0x274>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d807      	bhi.n	8006290 <HAL_I2C_Init+0x84>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4a80      	ldr	r2, [pc, #512]	; (8006484 <HAL_I2C_Init+0x278>)
 8006284:	4293      	cmp	r3, r2
 8006286:	bf94      	ite	ls
 8006288:	2301      	movls	r3, #1
 800628a:	2300      	movhi	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	e006      	b.n	800629e <HAL_I2C_Init+0x92>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a7d      	ldr	r2, [pc, #500]	; (8006488 <HAL_I2C_Init+0x27c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	bf94      	ite	ls
 8006298:	2301      	movls	r3, #1
 800629a:	2300      	movhi	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e0e7      	b.n	8006476 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4a78      	ldr	r2, [pc, #480]	; (800648c <HAL_I2C_Init+0x280>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	0c9b      	lsrs	r3, r3, #18
 80062b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a6a      	ldr	r2, [pc, #424]	; (8006480 <HAL_I2C_Init+0x274>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d802      	bhi.n	80062e0 <HAL_I2C_Init+0xd4>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	3301      	adds	r3, #1
 80062de:	e009      	b.n	80062f4 <HAL_I2C_Init+0xe8>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	4a69      	ldr	r2, [pc, #420]	; (8006490 <HAL_I2C_Init+0x284>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	099b      	lsrs	r3, r3, #6
 80062f2:	3301      	adds	r3, #1
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006306:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	495c      	ldr	r1, [pc, #368]	; (8006480 <HAL_I2C_Init+0x274>)
 8006310:	428b      	cmp	r3, r1
 8006312:	d819      	bhi.n	8006348 <HAL_I2C_Init+0x13c>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	1e59      	subs	r1, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006322:	1c59      	adds	r1, r3, #1
 8006324:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006328:	400b      	ands	r3, r1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <HAL_I2C_Init+0x138>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	1e59      	subs	r1, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	fbb1 f3f3 	udiv	r3, r1, r3
 800633c:	3301      	adds	r3, #1
 800633e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006342:	e051      	b.n	80063e8 <HAL_I2C_Init+0x1dc>
 8006344:	2304      	movs	r3, #4
 8006346:	e04f      	b.n	80063e8 <HAL_I2C_Init+0x1dc>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d111      	bne.n	8006374 <HAL_I2C_Init+0x168>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	1e58      	subs	r0, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	440b      	add	r3, r1
 800635e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006362:	3301      	adds	r3, #1
 8006364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006368:	2b00      	cmp	r3, #0
 800636a:	bf0c      	ite	eq
 800636c:	2301      	moveq	r3, #1
 800636e:	2300      	movne	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	e012      	b.n	800639a <HAL_I2C_Init+0x18e>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	1e58      	subs	r0, r3, #1
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6859      	ldr	r1, [r3, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	440b      	add	r3, r1
 8006382:	0099      	lsls	r1, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	fbb0 f3f3 	udiv	r3, r0, r3
 800638a:	3301      	adds	r3, #1
 800638c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006390:	2b00      	cmp	r3, #0
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_I2C_Init+0x196>
 800639e:	2301      	movs	r3, #1
 80063a0:	e022      	b.n	80063e8 <HAL_I2C_Init+0x1dc>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10e      	bne.n	80063c8 <HAL_I2C_Init+0x1bc>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1e58      	subs	r0, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6859      	ldr	r1, [r3, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	440b      	add	r3, r1
 80063b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80063bc:	3301      	adds	r3, #1
 80063be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c6:	e00f      	b.n	80063e8 <HAL_I2C_Init+0x1dc>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	1e58      	subs	r0, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6859      	ldr	r1, [r3, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	0099      	lsls	r1, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	fbb0 f3f3 	udiv	r3, r0, r3
 80063de:	3301      	adds	r3, #1
 80063e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	6809      	ldr	r1, [r1, #0]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69da      	ldr	r2, [r3, #28]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6911      	ldr	r1, [r2, #16]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68d2      	ldr	r2, [r2, #12]
 8006422:	4311      	orrs	r1, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6812      	ldr	r2, [r2, #0]
 8006428:	430b      	orrs	r3, r1
 800642a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	000186a0 	.word	0x000186a0
 8006484:	001e847f 	.word	0x001e847f
 8006488:	003d08ff 	.word	0x003d08ff
 800648c:	431bde83 	.word	0x431bde83
 8006490:	10624dd3 	.word	0x10624dd3

08006494 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	461a      	mov	r2, r3
 80064a0:	460b      	mov	r3, r1
 80064a2:	817b      	strh	r3, [r7, #10]
 80064a4:	4613      	mov	r3, r2
 80064a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064a8:	f7ff fbce 	bl	8005c48 <HAL_GetTick>
 80064ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	f040 80e0 	bne.w	800667c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2319      	movs	r3, #25
 80064c2:	2201      	movs	r2, #1
 80064c4:	4970      	ldr	r1, [pc, #448]	; (8006688 <HAL_I2C_Master_Transmit+0x1f4>)
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 ff66 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
 80064d4:	e0d3      	b.n	800667e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_I2C_Master_Transmit+0x50>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e0cc      	b.n	800667e <HAL_I2C_Master_Transmit+0x1ea>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d007      	beq.n	800650a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006518:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2221      	movs	r2, #33	; 0x21
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2210      	movs	r2, #16
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	893a      	ldrh	r2, [r7, #8]
 800653a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a50      	ldr	r2, [pc, #320]	; (800668c <HAL_I2C_Master_Transmit+0x1f8>)
 800654a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800654c:	8979      	ldrh	r1, [r7, #10]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	6a3a      	ldr	r2, [r7, #32]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fce8 	bl	8006f28 <I2C_MasterRequestWrite>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e08d      	b.n	800667e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006562:	2300      	movs	r3, #0
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006578:	e066      	b.n	8006648 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	6a39      	ldr	r1, [r7, #32]
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 ffe0 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	2b04      	cmp	r3, #4
 8006590:	d107      	bne.n	80065a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e06b      	b.n	800667e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d11b      	bne.n	800661c <HAL_I2C_Master_Transmit+0x188>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d017      	beq.n	800661c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	6a39      	ldr	r1, [r7, #32]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 ffd0 	bl	80075c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00d      	beq.n	8006648 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	2b04      	cmp	r3, #4
 8006632:	d107      	bne.n	8006644 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006642:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e01a      	b.n	800667e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d194      	bne.n	800657a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	e000      	b.n	800667e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800667c:	2302      	movs	r3, #2
  }
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	00100002 	.word	0x00100002
 800668c:	ffff0000 	.word	0xffff0000

08006690 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af02      	add	r7, sp, #8
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	461a      	mov	r2, r3
 800669c:	460b      	mov	r3, r1
 800669e:	817b      	strh	r3, [r7, #10]
 80066a0:	4613      	mov	r3, r2
 80066a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066a4:	f7ff fad0 	bl	8005c48 <HAL_GetTick>
 80066a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	f040 820b 	bne.w	8006ace <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2319      	movs	r3, #25
 80066be:	2201      	movs	r2, #1
 80066c0:	497c      	ldr	r1, [pc, #496]	; (80068b4 <HAL_I2C_Master_Receive+0x224>)
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fe68 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80066ce:	2302      	movs	r3, #2
 80066d0:	e1fe      	b.n	8006ad0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_I2C_Master_Receive+0x50>
 80066dc:	2302      	movs	r3, #2
 80066de:	e1f7      	b.n	8006ad0 <HAL_I2C_Master_Receive+0x440>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d007      	beq.n	8006706 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0201 	orr.w	r2, r2, #1
 8006704:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006714:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2222      	movs	r2, #34	; 0x22
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2210      	movs	r2, #16
 8006722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	893a      	ldrh	r2, [r7, #8]
 8006736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4a5c      	ldr	r2, [pc, #368]	; (80068b8 <HAL_I2C_Master_Receive+0x228>)
 8006746:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006748:	8979      	ldrh	r1, [r7, #10]
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 fc6c 	bl	800702c <I2C_MasterRequestRead>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e1b8      	b.n	8006ad0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d113      	bne.n	800678e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006766:	2300      	movs	r3, #0
 8006768:	623b      	str	r3, [r7, #32]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	623b      	str	r3, [r7, #32]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	623b      	str	r3, [r7, #32]
 800677a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e18c      	b.n	8006aa8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006792:	2b01      	cmp	r3, #1
 8006794:	d11b      	bne.n	80067ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	e16c      	b.n	8006aa8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d11b      	bne.n	800680e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f6:	2300      	movs	r3, #0
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	e14c      	b.n	8006aa8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800681c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800681e:	2300      	movs	r3, #0
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006834:	e138      	b.n	8006aa8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683a:	2b03      	cmp	r3, #3
 800683c:	f200 80f1 	bhi.w	8006a22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006844:	2b01      	cmp	r3, #1
 8006846:	d123      	bne.n	8006890 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fefb 	bl	8007648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e139      	b.n	8006ad0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800688e:	e10b      	b.n	8006aa8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006894:	2b02      	cmp	r3, #2
 8006896:	d14e      	bne.n	8006936 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	2200      	movs	r2, #0
 80068a0:	4906      	ldr	r1, [pc, #24]	; (80068bc <HAL_I2C_Master_Receive+0x22c>)
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fd78 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d008      	beq.n	80068c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e10e      	b.n	8006ad0 <HAL_I2C_Master_Receive+0x440>
 80068b2:	bf00      	nop
 80068b4:	00100002 	.word	0x00100002
 80068b8:	ffff0000 	.word	0xffff0000
 80068bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006934:	e0b8      	b.n	8006aa8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	2200      	movs	r2, #0
 800693e:	4966      	ldr	r1, [pc, #408]	; (8006ad8 <HAL_I2C_Master_Receive+0x448>)
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 fd29 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e0bf      	b.n	8006ad0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691a      	ldr	r2, [r3, #16]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	2200      	movs	r2, #0
 800699a:	494f      	ldr	r1, [pc, #316]	; (8006ad8 <HAL_I2C_Master_Receive+0x448>)
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 fcfb 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e091      	b.n	8006ad0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a20:	e042      	b.n	8006aa8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fe0e 	bl	8007648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e04c      	b.n	8006ad0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	b2d2      	uxtb	r2, r2
 8006a42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d118      	bne.n	8006aa8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f47f aec2 	bne.w	8006836 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e000      	b.n	8006ad0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006ace:	2302      	movs	r3, #2
  }
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3728      	adds	r7, #40	; 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	00010004 	.word	0x00010004

08006adc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08c      	sub	sp, #48	; 0x30
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4603      	mov	r3, r0
 8006aec:	817b      	strh	r3, [r7, #10]
 8006aee:	460b      	mov	r3, r1
 8006af0:	813b      	strh	r3, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006af6:	f7ff f8a7 	bl	8005c48 <HAL_GetTick>
 8006afa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	f040 8208 	bne.w	8006f1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	2319      	movs	r3, #25
 8006b10:	2201      	movs	r2, #1
 8006b12:	497b      	ldr	r1, [pc, #492]	; (8006d00 <HAL_I2C_Mem_Read+0x224>)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fc3f 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b20:	2302      	movs	r3, #2
 8006b22:	e1fb      	b.n	8006f1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <HAL_I2C_Mem_Read+0x56>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e1f4      	b.n	8006f1c <HAL_I2C_Mem_Read+0x440>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d007      	beq.n	8006b58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2222      	movs	r2, #34	; 0x22
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2240      	movs	r2, #64	; 0x40
 8006b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4a5b      	ldr	r2, [pc, #364]	; (8006d04 <HAL_I2C_Mem_Read+0x228>)
 8006b98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b9a:	88f8      	ldrh	r0, [r7, #6]
 8006b9c:	893a      	ldrh	r2, [r7, #8]
 8006b9e:	8979      	ldrh	r1, [r7, #10]
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	4603      	mov	r3, r0
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fb0c 	bl	80071c8 <I2C_RequestMemoryRead>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e1b0      	b.n	8006f1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d113      	bne.n	8006bea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	623b      	str	r3, [r7, #32]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	623b      	str	r3, [r7, #32]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	623b      	str	r3, [r7, #32]
 8006bd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e184      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d11b      	bne.n	8006c2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c02:	2300      	movs	r3, #0
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	61fb      	str	r3, [r7, #28]
 8006c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e164      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d11b      	bne.n	8006c6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c52:	2300      	movs	r3, #0
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	e144      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c80:	e138      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	f200 80f1 	bhi.w	8006e6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d123      	bne.n	8006cdc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fcd5 	bl	8007648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e139      	b.n	8006f1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cda:	e10b      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d14e      	bne.n	8006d82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	2200      	movs	r2, #0
 8006cec:	4906      	ldr	r1, [pc, #24]	; (8006d08 <HAL_I2C_Mem_Read+0x22c>)
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 fb52 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e10e      	b.n	8006f1c <HAL_I2C_Mem_Read+0x440>
 8006cfe:	bf00      	nop
 8006d00:	00100002 	.word	0x00100002
 8006d04:	ffff0000 	.word	0xffff0000
 8006d08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691a      	ldr	r2, [r3, #16]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d80:	e0b8      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4966      	ldr	r1, [pc, #408]	; (8006f24 <HAL_I2C_Mem_Read+0x448>)
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fb03 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e0bf      	b.n	8006f1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	2200      	movs	r2, #0
 8006de6:	494f      	ldr	r1, [pc, #316]	; (8006f24 <HAL_I2C_Mem_Read+0x448>)
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fad5 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e091      	b.n	8006f1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e6c:	e042      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fbe8 	bl	8007648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e04c      	b.n	8006f1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691a      	ldr	r2, [r3, #16]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d118      	bne.n	8006ef4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f47f aec2 	bne.w	8006c82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e000      	b.n	8006f1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f1a:	2302      	movs	r3, #2
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3728      	adds	r7, #40	; 0x28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	00010004 	.word	0x00010004

08006f28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af02      	add	r7, sp, #8
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	460b      	mov	r3, r1
 8006f36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d006      	beq.n	8006f52 <I2C_MasterRequestWrite+0x2a>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d003      	beq.n	8006f52 <I2C_MasterRequestWrite+0x2a>
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f50:	d108      	bne.n	8006f64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	e00b      	b.n	8006f7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	2b12      	cmp	r3, #18
 8006f6a:	d107      	bne.n	8006f7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fa05 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00d      	beq.n	8006fb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa2:	d103      	bne.n	8006fac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e035      	b.n	800701c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fb8:	d108      	bne.n	8006fcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fba:	897b      	ldrh	r3, [r7, #10]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fc8:	611a      	str	r2, [r3, #16]
 8006fca:	e01b      	b.n	8007004 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006fcc:	897b      	ldrh	r3, [r7, #10]
 8006fce:	11db      	asrs	r3, r3, #7
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	f003 0306 	and.w	r3, r3, #6
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f063 030f 	orn	r3, r3, #15
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	490e      	ldr	r1, [pc, #56]	; (8007024 <I2C_MasterRequestWrite+0xfc>)
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fa2b 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e010      	b.n	800701c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ffa:	897b      	ldrh	r3, [r7, #10]
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	4907      	ldr	r1, [pc, #28]	; (8007028 <I2C_MasterRequestWrite+0x100>)
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fa1b 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	00010008 	.word	0x00010008
 8007028:	00010002 	.word	0x00010002

0800702c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	460b      	mov	r3, r1
 800703a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007050:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b08      	cmp	r3, #8
 8007056:	d006      	beq.n	8007066 <I2C_MasterRequestRead+0x3a>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d003      	beq.n	8007066 <I2C_MasterRequestRead+0x3a>
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007064:	d108      	bne.n	8007078 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e00b      	b.n	8007090 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	2b11      	cmp	r3, #17
 800707e:	d107      	bne.n	8007090 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800708e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f97b 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00d      	beq.n	80070c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b6:	d103      	bne.n	80070c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e079      	b.n	80071b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070cc:	d108      	bne.n	80070e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070ce:	897b      	ldrh	r3, [r7, #10]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f043 0301 	orr.w	r3, r3, #1
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	611a      	str	r2, [r3, #16]
 80070de:	e05f      	b.n	80071a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070e0:	897b      	ldrh	r3, [r7, #10]
 80070e2:	11db      	asrs	r3, r3, #7
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f003 0306 	and.w	r3, r3, #6
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f063 030f 	orn	r3, r3, #15
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	4930      	ldr	r1, [pc, #192]	; (80071c0 <I2C_MasterRequestRead+0x194>)
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f9a1 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e054      	b.n	80071b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800710e:	897b      	ldrh	r3, [r7, #10]
 8007110:	b2da      	uxtb	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	4929      	ldr	r1, [pc, #164]	; (80071c4 <I2C_MasterRequestRead+0x198>)
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 f991 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e044      	b.n	80071b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800712e:	2300      	movs	r3, #0
 8007130:	613b      	str	r3, [r7, #16]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	613b      	str	r3, [r7, #16]
 8007142:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007152:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f919 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00d      	beq.n	8007188 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800717a:	d103      	bne.n	8007184 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007182:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e017      	b.n	80071b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007188:	897b      	ldrh	r3, [r7, #10]
 800718a:	11db      	asrs	r3, r3, #7
 800718c:	b2db      	uxtb	r3, r3
 800718e:	f003 0306 	and.w	r3, r3, #6
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f063 030e 	orn	r3, r3, #14
 8007198:	b2da      	uxtb	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4907      	ldr	r1, [pc, #28]	; (80071c4 <I2C_MasterRequestRead+0x198>)
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 f94d 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e000      	b.n	80071b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	00010008 	.word	0x00010008
 80071c4:	00010002 	.word	0x00010002

080071c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	4608      	mov	r0, r1
 80071d2:	4611      	mov	r1, r2
 80071d4:	461a      	mov	r2, r3
 80071d6:	4603      	mov	r3, r0
 80071d8:	817b      	strh	r3, [r7, #10]
 80071da:	460b      	mov	r3, r1
 80071dc:	813b      	strh	r3, [r7, #8]
 80071de:	4613      	mov	r3, r2
 80071e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007200:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	2200      	movs	r2, #0
 800720a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f8c2 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00d      	beq.n	8007236 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007228:	d103      	bne.n	8007232 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007230:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e0aa      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007236:	897b      	ldrh	r3, [r7, #10]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	461a      	mov	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007244:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	6a3a      	ldr	r2, [r7, #32]
 800724a:	4952      	ldr	r1, [pc, #328]	; (8007394 <I2C_RequestMemoryRead+0x1cc>)
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f8fa 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e097      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007274:	6a39      	ldr	r1, [r7, #32]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f964 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00d      	beq.n	800729e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	2b04      	cmp	r3, #4
 8007288:	d107      	bne.n	800729a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007298:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e076      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d105      	bne.n	80072b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072a4:	893b      	ldrh	r3, [r7, #8]
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	611a      	str	r2, [r3, #16]
 80072ae:	e021      	b.n	80072f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072b0:	893b      	ldrh	r3, [r7, #8]
 80072b2:	0a1b      	lsrs	r3, r3, #8
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c0:	6a39      	ldr	r1, [r7, #32]
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f93e 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00d      	beq.n	80072ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d107      	bne.n	80072e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e050      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072ea:	893b      	ldrh	r3, [r7, #8]
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f6:	6a39      	ldr	r1, [r7, #32]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f923 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00d      	beq.n	8007320 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	2b04      	cmp	r3, #4
 800730a:	d107      	bne.n	800731c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800731a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e035      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800732e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	2200      	movs	r2, #0
 8007338:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f82b 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00d      	beq.n	8007364 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007356:	d103      	bne.n	8007360 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800735e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e013      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007364:	897b      	ldrh	r3, [r7, #10]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	b2da      	uxtb	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	6a3a      	ldr	r2, [r7, #32]
 8007378:	4906      	ldr	r1, [pc, #24]	; (8007394 <I2C_RequestMemoryRead+0x1cc>)
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 f863 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	00010002 	.word	0x00010002

08007398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	4613      	mov	r3, r2
 80073a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073a8:	e025      	b.n	80073f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b0:	d021      	beq.n	80073f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b2:	f7fe fc49 	bl	8005c48 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d302      	bcc.n	80073c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d116      	bne.n	80073f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f043 0220 	orr.w	r2, r3, #32
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e023      	b.n	800743e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d10d      	bne.n	800741c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	43da      	mvns	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4013      	ands	r3, r2
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	bf0c      	ite	eq
 8007412:	2301      	moveq	r3, #1
 8007414:	2300      	movne	r3, #0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	e00c      	b.n	8007436 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	43da      	mvns	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4013      	ands	r3, r2
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	bf0c      	ite	eq
 800742e:	2301      	moveq	r3, #1
 8007430:	2300      	movne	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	461a      	mov	r2, r3
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	429a      	cmp	r2, r3
 800743a:	d0b6      	beq.n	80073aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007454:	e051      	b.n	80074fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007464:	d123      	bne.n	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007474:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800747e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f043 0204 	orr.w	r2, r3, #4
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e046      	b.n	800753c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b4:	d021      	beq.n	80074fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b6:	f7fe fbc7 	bl	8005c48 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d116      	bne.n	80074fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	f043 0220 	orr.w	r2, r3, #32
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e020      	b.n	800753c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b01      	cmp	r3, #1
 8007502:	d10c      	bne.n	800751e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	43da      	mvns	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4013      	ands	r3, r2
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	bf14      	ite	ne
 8007516:	2301      	movne	r3, #1
 8007518:	2300      	moveq	r3, #0
 800751a:	b2db      	uxtb	r3, r3
 800751c:	e00b      	b.n	8007536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	43da      	mvns	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4013      	ands	r3, r2
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	bf14      	ite	ne
 8007530:	2301      	movne	r3, #1
 8007532:	2300      	moveq	r3, #0
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d18d      	bne.n	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007550:	e02d      	b.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f8ce 	bl	80076f4 <I2C_IsAcknowledgeFailed>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e02d      	b.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007568:	d021      	beq.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756a:	f7fe fb6d 	bl	8005c48 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	429a      	cmp	r2, r3
 8007578:	d302      	bcc.n	8007580 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d116      	bne.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2220      	movs	r2, #32
 800758a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f043 0220 	orr.w	r2, r3, #32
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e007      	b.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b8:	2b80      	cmp	r3, #128	; 0x80
 80075ba:	d1ca      	bne.n	8007552 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075d2:	e02d      	b.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f88d 	bl	80076f4 <I2C_IsAcknowledgeFailed>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e02d      	b.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ea:	d021      	beq.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ec:	f7fe fb2c 	bl	8005c48 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d302      	bcc.n	8007602 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d116      	bne.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761c:	f043 0220 	orr.w	r2, r3, #32
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e007      	b.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b04      	cmp	r3, #4
 800763c:	d1ca      	bne.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007654:	e042      	b.n	80076dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	2b10      	cmp	r3, #16
 8007662:	d119      	bne.n	8007698 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0210 	mvn.w	r2, #16
 800766c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e029      	b.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007698:	f7fe fad6 	bl	8005c48 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d302      	bcc.n	80076ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d116      	bne.n	80076dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	f043 0220 	orr.w	r2, r3, #32
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e007      	b.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d1b5      	bne.n	8007656 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770a:	d11b      	bne.n	8007744 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007714:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	f043 0204 	orr.w	r2, r3, #4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e000      	b.n	8007746 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007752:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007754:	b08f      	sub	sp, #60	; 0x3c
 8007756:	af0a      	add	r7, sp, #40	; 0x28
 8007758:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e10f      	b.n	8007984 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f00e f986 	bl	8015a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2203      	movs	r2, #3
 8007788:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f003 fd1b 	bl	800b1de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	603b      	str	r3, [r7, #0]
 80077ae:	687e      	ldr	r6, [r7, #4]
 80077b0:	466d      	mov	r5, sp
 80077b2:	f106 0410 	add.w	r4, r6, #16
 80077b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80077c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80077c6:	1d33      	adds	r3, r6, #4
 80077c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077ca:	6838      	ldr	r0, [r7, #0]
 80077cc:	f003 fbf2 	bl	800afb4 <USB_CoreInit>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d005      	beq.n	80077e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e0d0      	b.n	8007984 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2100      	movs	r1, #0
 80077e8:	4618      	mov	r0, r3
 80077ea:	f003 fd09 	bl	800b200 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
 80077f2:	e04a      	b.n	800788a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80077f4:	7bfa      	ldrb	r2, [r7, #15]
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	4613      	mov	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	1a9b      	subs	r3, r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	333d      	adds	r3, #61	; 0x3d
 8007804:	2201      	movs	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007808:	7bfa      	ldrb	r2, [r7, #15]
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4613      	mov	r3, r2
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	333c      	adds	r3, #60	; 0x3c
 8007818:	7bfa      	ldrb	r2, [r7, #15]
 800781a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800781c:	7bfa      	ldrb	r2, [r7, #15]
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	b298      	uxth	r0, r3
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	4613      	mov	r3, r2
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	1a9b      	subs	r3, r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	440b      	add	r3, r1
 800782e:	3342      	adds	r3, #66	; 0x42
 8007830:	4602      	mov	r2, r0
 8007832:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007834:	7bfa      	ldrb	r2, [r7, #15]
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4613      	mov	r3, r2
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	333f      	adds	r3, #63	; 0x3f
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007848:	7bfa      	ldrb	r2, [r7, #15]
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	3344      	adds	r3, #68	; 0x44
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800785c:	7bfa      	ldrb	r2, [r7, #15]
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	4613      	mov	r3, r2
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	1a9b      	subs	r3, r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	440b      	add	r3, r1
 800786a:	3348      	adds	r3, #72	; 0x48
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007870:	7bfa      	ldrb	r2, [r7, #15]
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	4613      	mov	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	440b      	add	r3, r1
 800787e:	3350      	adds	r3, #80	; 0x50
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	3301      	adds	r3, #1
 8007888:	73fb      	strb	r3, [r7, #15]
 800788a:	7bfa      	ldrb	r2, [r7, #15]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d3af      	bcc.n	80077f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]
 8007898:	e044      	b.n	8007924 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800789a:	7bfa      	ldrb	r2, [r7, #15]
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	4613      	mov	r3, r2
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	440b      	add	r3, r1
 80078a8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80078b0:	7bfa      	ldrb	r2, [r7, #15]
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	4613      	mov	r3, r2
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	1a9b      	subs	r3, r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80078c2:	7bfa      	ldrb	r2, [r7, #15]
 80078c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80078c6:	7bfa      	ldrb	r2, [r7, #15]
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4613      	mov	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	1a9b      	subs	r3, r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80078d8:	2200      	movs	r2, #0
 80078da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80078dc:	7bfa      	ldrb	r2, [r7, #15]
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	4613      	mov	r3, r2
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80078f2:	7bfa      	ldrb	r2, [r7, #15]
 80078f4:	6879      	ldr	r1, [r7, #4]
 80078f6:	4613      	mov	r3, r2
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	440b      	add	r3, r1
 8007900:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007908:	7bfa      	ldrb	r2, [r7, #15]
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	4613      	mov	r3, r2
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	3301      	adds	r3, #1
 8007922:	73fb      	strb	r3, [r7, #15]
 8007924:	7bfa      	ldrb	r2, [r7, #15]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	429a      	cmp	r2, r3
 800792c:	d3b5      	bcc.n	800789a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	687e      	ldr	r6, [r7, #4]
 8007936:	466d      	mov	r5, sp
 8007938:	f106 0410 	add.w	r4, r6, #16
 800793c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800793e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007944:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007948:	e885 0003 	stmia.w	r5, {r0, r1}
 800794c:	1d33      	adds	r3, r6, #4
 800794e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007950:	6838      	ldr	r0, [r7, #0]
 8007952:	f003 fca1 	bl	800b298 <USB_DevInit>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e00d      	b.n	8007984 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f004 fd1d 	bl	800c3bc <USB_DevDisconnect>

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800798c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d101      	bne.n	80079a8 <HAL_PCD_Start+0x1c>
 80079a4:	2302      	movs	r3, #2
 80079a6:	e020      	b.n	80079ea <HAL_PCD_Start+0x5e>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d109      	bne.n	80079cc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d005      	beq.n	80079cc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f003 fbf3 	bl	800b1bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f004 fccd 	bl	800c37a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80079f2:	b590      	push	{r4, r7, lr}
 80079f4:	b08d      	sub	sp, #52	; 0x34
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f004 fd8b 	bl	800c524 <USB_GetMode>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f040 839d 	bne.w	8008150 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f004 fcef 	bl	800c3fe <USB_ReadInterrupts>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8393 	beq.w	800814e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f004 fce6 	bl	800c3fe <USB_ReadInterrupts>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d107      	bne.n	8007a4c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f002 0202 	and.w	r2, r2, #2
 8007a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f004 fcd4 	bl	800c3fe <USB_ReadInterrupts>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b10      	cmp	r3, #16
 8007a5e:	d161      	bne.n	8007b24 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0210 	bic.w	r2, r2, #16
 8007a6e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	f003 020f 	and.w	r2, r3, #15
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	1a9b      	subs	r3, r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	0c5b      	lsrs	r3, r3, #17
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d124      	bne.n	8007ae6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d035      	beq.n	8007b14 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	091b      	lsrs	r3, r3, #4
 8007ab0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6a38      	ldr	r0, [r7, #32]
 8007abc:	f004 fb0b 	bl	800c0d6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	091b      	lsrs	r3, r3, #4
 8007ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007acc:	441a      	add	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ade:	441a      	add	r2, r3
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	619a      	str	r2, [r3, #24]
 8007ae4:	e016      	b.n	8007b14 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	0c5b      	lsrs	r3, r3, #17
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	2b06      	cmp	r3, #6
 8007af0:	d110      	bne.n	8007b14 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007af8:	2208      	movs	r2, #8
 8007afa:	4619      	mov	r1, r3
 8007afc:	6a38      	ldr	r0, [r7, #32]
 8007afe:	f004 faea 	bl	800c0d6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	091b      	lsrs	r3, r3, #4
 8007b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b0e:	441a      	add	r2, r3
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699a      	ldr	r2, [r3, #24]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0210 	orr.w	r2, r2, #16
 8007b22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f004 fc68 	bl	800c3fe <USB_ReadInterrupts>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b38:	d16e      	bne.n	8007c18 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f004 fc6e 	bl	800c424 <USB_ReadDevAllOutEpInterrupt>
 8007b48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007b4a:	e062      	b.n	8007c12 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d057      	beq.n	8007c06 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f004 fc93 	bl	800c48c <USB_ReadDevOutEPInterrupt>
 8007b66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7e:	461a      	mov	r2, r3
 8007b80:	2301      	movs	r3, #1
 8007b82:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fdb0 	bl	80086ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00c      	beq.n	8007bb0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	2308      	movs	r3, #8
 8007ba6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 feaa 	bl	8008904 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d008      	beq.n	8007bcc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	2310      	movs	r3, #16
 8007bca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d008      	beq.n	8007be8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	461a      	mov	r2, r3
 8007be4:	2320      	movs	r3, #32
 8007be6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	3301      	adds	r3, #1
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	085b      	lsrs	r3, r3, #1
 8007c10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d199      	bne.n	8007b4c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f004 fbee 	bl	800c3fe <USB_ReadInterrupts>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c2c:	f040 80c0 	bne.w	8007db0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f004 fc0f 	bl	800c458 <USB_ReadDevAllInEpInterrupt>
 8007c3a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007c40:	e0b2      	b.n	8007da8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 80a7 	beq.w	8007d9c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f004 fc35 	bl	800c4c8 <USB_ReadDevInEPInterrupt>
 8007c5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d057      	beq.n	8007d1a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	2201      	movs	r2, #1
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	43db      	mvns	r3, r3
 8007c84:	69f9      	ldr	r1, [r7, #28]
 8007c86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d132      	bne.n	8007d0e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cac:	4613      	mov	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	3348      	adds	r3, #72	; 0x48
 8007cb8:	6819      	ldr	r1, [r3, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	1a9b      	subs	r3, r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4403      	add	r3, r0
 8007cc8:	3344      	adds	r3, #68	; 0x44
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4419      	add	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4403      	add	r3, r0
 8007cdc:	3348      	adds	r3, #72	; 0x48
 8007cde:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d113      	bne.n	8007d0e <HAL_PCD_IRQHandler+0x31c>
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	1a9b      	subs	r3, r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	440b      	add	r3, r1
 8007cf4:	3350      	adds	r3, #80	; 0x50
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d108      	bne.n	8007d0e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d06:	461a      	mov	r2, r3
 8007d08:	2101      	movs	r1, #1
 8007d0a:	f004 fc3d 	bl	800c588 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f00d ff4a 	bl	8015bae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d008      	beq.n	8007d36 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	461a      	mov	r2, r3
 8007d32:	2308      	movs	r3, #8
 8007d34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f003 0310 	and.w	r3, r3, #16
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d008      	beq.n	8007d52 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	2310      	movs	r3, #16
 8007d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2340      	movs	r3, #64	; 0x40
 8007d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d84:	461a      	mov	r2, r3
 8007d86:	2302      	movs	r3, #2
 8007d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fc1b 	bl	80085d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	3301      	adds	r3, #1
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f47f af49 	bne.w	8007c42 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f004 fb22 	bl	800c3fe <USB_ReadInterrupts>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dc4:	d122      	bne.n	8007e0c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dd4:	f023 0301 	bic.w	r3, r3, #1
 8007dd8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d108      	bne.n	8007df6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007dec:	2100      	movs	r1, #0
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fe26 	bl	8008a40 <HAL_PCDEx_LPM_Callback>
 8007df4:	e002      	b.n	8007dfc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f00d ff50 	bl	8015c9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695a      	ldr	r2, [r3, #20]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f004 faf4 	bl	800c3fe <USB_ReadInterrupts>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e20:	d112      	bne.n	8007e48 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d102      	bne.n	8007e38 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f00d ff0c 	bl	8015c50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695a      	ldr	r2, [r3, #20]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007e46:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f004 fad6 	bl	800c3fe <USB_ReadInterrupts>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e5c:	f040 80c7 	bne.w	8007fee <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e6e:	f023 0301 	bic.w	r3, r3, #1
 8007e72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2110      	movs	r1, #16
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f003 fb70 	bl	800b560 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e80:	2300      	movs	r3, #0
 8007e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e84:	e056      	b.n	8007f34 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e92:	461a      	mov	r2, r3
 8007e94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eb8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ed8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007eec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efe:	0151      	lsls	r1, r2, #5
 8007f00:	69fa      	ldr	r2, [r7, #28]
 8007f02:	440a      	add	r2, r1
 8007f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1e:	0151      	lsls	r1, r2, #5
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	440a      	add	r2, r1
 8007f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	3301      	adds	r3, #1
 8007f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d3a3      	bcc.n	8007e86 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d016      	beq.n	8007f88 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f6a:	f043 030b 	orr.w	r3, r3, #11
 8007f6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f80:	f043 030b 	orr.w	r3, r3, #11
 8007f84:	6453      	str	r3, [r2, #68]	; 0x44
 8007f86:	e015      	b.n	8007fb4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007f9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fae:	f043 030b 	orr.w	r3, r3, #11
 8007fb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f004 fad5 	bl	800c588 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	695a      	ldr	r2, [r3, #20]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f004 fa03 	bl	800c3fe <USB_ReadInterrupts>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008002:	d124      	bne.n	800804e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f004 fa99 	bl	800c540 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f003 fb01 	bl	800b61a <USB_GetDevSpeed>
 8008018:	4603      	mov	r3, r0
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681c      	ldr	r4, [r3, #0]
 8008024:	f001 f958 	bl	80092d8 <HAL_RCC_GetHCLKFreq>
 8008028:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800802e:	b2db      	uxtb	r3, r3
 8008030:	461a      	mov	r2, r3
 8008032:	4620      	mov	r0, r4
 8008034:	f003 f820 	bl	800b078 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f00d fde0 	bl	8015bfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695a      	ldr	r2, [r3, #20]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800804c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f004 f9d3 	bl	800c3fe <USB_ReadInterrupts>
 8008058:	4603      	mov	r3, r0
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b08      	cmp	r3, #8
 8008060:	d10a      	bne.n	8008078 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f00d fdbd 	bl	8015be2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695a      	ldr	r2, [r3, #20]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f002 0208 	and.w	r2, r2, #8
 8008076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4618      	mov	r0, r3
 800807e:	f004 f9be 	bl	800c3fe <USB_ReadInterrupts>
 8008082:	4603      	mov	r3, r0
 8008084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800808c:	d10f      	bne.n	80080ae <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	b2db      	uxtb	r3, r3
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f00d fe1f 	bl	8015cdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	695a      	ldr	r2, [r3, #20]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80080ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f004 f9a3 	bl	800c3fe <USB_ReadInterrupts>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080c2:	d10f      	bne.n	80080e4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f00d fdf2 	bl	8015cb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695a      	ldr	r2, [r3, #20]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80080e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f004 f988 	bl	800c3fe <USB_ReadInterrupts>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f8:	d10a      	bne.n	8008110 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f00d fe00 	bl	8015d00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	695a      	ldr	r2, [r3, #20]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800810e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4618      	mov	r0, r3
 8008116:	f004 f972 	bl	800c3fe <USB_ReadInterrupts>
 800811a:	4603      	mov	r3, r0
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b04      	cmp	r3, #4
 8008122:	d115      	bne.n	8008150 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f00d fdf0 	bl	8015d1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6859      	ldr	r1, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	430a      	orrs	r2, r1
 800814a:	605a      	str	r2, [r3, #4]
 800814c:	e000      	b.n	8008150 <HAL_PCD_IRQHandler+0x75e>
      return;
 800814e:	bf00      	nop
    }
  }
}
 8008150:	3734      	adds	r7, #52	; 0x34
 8008152:	46bd      	mov	sp, r7
 8008154:	bd90      	pop	{r4, r7, pc}

08008156 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	460b      	mov	r3, r1
 8008160:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_PCD_SetAddress+0x1a>
 800816c:	2302      	movs	r3, #2
 800816e:	e013      	b.n	8008198 <HAL_PCD_SetAddress+0x42>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	4611      	mov	r1, r2
 8008188:	4618      	mov	r0, r3
 800818a:	f004 f8d0 	bl	800c32e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	4608      	mov	r0, r1
 80081aa:	4611      	mov	r1, r2
 80081ac:	461a      	mov	r2, r3
 80081ae:	4603      	mov	r3, r0
 80081b0:	70fb      	strb	r3, [r7, #3]
 80081b2:	460b      	mov	r3, r1
 80081b4:	803b      	strh	r3, [r7, #0]
 80081b6:	4613      	mov	r3, r2
 80081b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80081be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	da0f      	bge.n	80081e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	f003 020f 	and.w	r2, r3, #15
 80081cc:	4613      	mov	r3, r2
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	3338      	adds	r3, #56	; 0x38
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4413      	add	r3, r2
 80081da:	3304      	adds	r3, #4
 80081dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	705a      	strb	r2, [r3, #1]
 80081e4:	e00f      	b.n	8008206 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081e6:	78fb      	ldrb	r3, [r7, #3]
 80081e8:	f003 020f 	and.w	r2, r3, #15
 80081ec:	4613      	mov	r3, r2
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	1a9b      	subs	r3, r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	4413      	add	r3, r2
 80081fc:	3304      	adds	r3, #4
 80081fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	f003 030f 	and.w	r3, r3, #15
 800820c:	b2da      	uxtb	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008212:	883a      	ldrh	r2, [r7, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	78ba      	ldrb	r2, [r7, #2]
 800821c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008230:	78bb      	ldrb	r3, [r7, #2]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d102      	bne.n	800823c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <HAL_PCD_EP_Open+0xaa>
 8008246:	2302      	movs	r3, #2
 8008248:	e00e      	b.n	8008268 <HAL_PCD_EP_Open+0xc8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68f9      	ldr	r1, [r7, #12]
 8008258:	4618      	mov	r0, r3
 800825a:	f003 fa03 	bl	800b664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008266:	7afb      	ldrb	r3, [r7, #11]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800827c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008280:	2b00      	cmp	r3, #0
 8008282:	da0f      	bge.n	80082a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	f003 020f 	and.w	r2, r3, #15
 800828a:	4613      	mov	r3, r2
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	1a9b      	subs	r3, r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	3338      	adds	r3, #56	; 0x38
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	4413      	add	r3, r2
 8008298:	3304      	adds	r3, #4
 800829a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	705a      	strb	r2, [r3, #1]
 80082a2:	e00f      	b.n	80082c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	f003 020f 	and.w	r2, r3, #15
 80082aa:	4613      	mov	r3, r2
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	4413      	add	r3, r2
 80082ba:	3304      	adds	r3, #4
 80082bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_PCD_EP_Close+0x6e>
 80082da:	2302      	movs	r3, #2
 80082dc:	e00e      	b.n	80082fc <HAL_PCD_EP_Close+0x8c>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68f9      	ldr	r1, [r7, #12]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f003 fa41 	bl	800b774 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	607a      	str	r2, [r7, #4]
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	460b      	mov	r3, r1
 8008312:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	f003 020f 	and.w	r2, r3, #15
 800831a:	4613      	mov	r3, r2
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4413      	add	r3, r2
 800832a:	3304      	adds	r3, #4
 800832c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2200      	movs	r2, #0
 800833e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2200      	movs	r2, #0
 8008344:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008346:	7afb      	ldrb	r3, [r7, #11]
 8008348:	f003 030f 	and.w	r3, r3, #15
 800834c:	b2da      	uxtb	r2, r3
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d102      	bne.n	8008360 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	6979      	ldr	r1, [r7, #20]
 8008378:	f003 fd1c 	bl	800bdb4 <USB_EP0StartXfer>
 800837c:	e008      	b.n	8008390 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	6979      	ldr	r1, [r7, #20]
 800838c:	f003 face 	bl	800b92c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	f003 020f 	and.w	r2, r3, #15
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	4613      	mov	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	1a9b      	subs	r3, r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	440b      	add	r3, r1
 80083b8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80083bc:	681b      	ldr	r3, [r3, #0]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
 80083d6:	460b      	mov	r3, r1
 80083d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083da:	7afb      	ldrb	r3, [r7, #11]
 80083dc:	f003 020f 	and.w	r2, r3, #15
 80083e0:	4613      	mov	r3, r2
 80083e2:	00db      	lsls	r3, r3, #3
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	3338      	adds	r3, #56	; 0x38
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	3304      	adds	r3, #4
 80083f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2200      	movs	r2, #0
 8008402:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2201      	movs	r2, #1
 8008408:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	f003 030f 	and.w	r3, r3, #15
 8008410:	b2da      	uxtb	r2, r3
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d102      	bne.n	8008424 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	461a      	mov	r2, r3
 800843a:	6979      	ldr	r1, [r7, #20]
 800843c:	f003 fcba 	bl	800bdb4 <USB_EP0StartXfer>
 8008440:	e008      	b.n	8008454 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	6979      	ldr	r1, [r7, #20]
 8008450:	f003 fa6c 	bl	800b92c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800846a:	78fb      	ldrb	r3, [r7, #3]
 800846c:	f003 020f 	and.w	r2, r3, #15
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	d901      	bls.n	800847c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e050      	b.n	800851e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800847c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008480:	2b00      	cmp	r3, #0
 8008482:	da0f      	bge.n	80084a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	f003 020f 	and.w	r2, r3, #15
 800848a:	4613      	mov	r3, r2
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	1a9b      	subs	r3, r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	3338      	adds	r3, #56	; 0x38
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	4413      	add	r3, r2
 8008498:	3304      	adds	r3, #4
 800849a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2201      	movs	r2, #1
 80084a0:	705a      	strb	r2, [r3, #1]
 80084a2:	e00d      	b.n	80084c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80084a4:	78fa      	ldrb	r2, [r7, #3]
 80084a6:	4613      	mov	r3, r2
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	1a9b      	subs	r3, r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	4413      	add	r3, r2
 80084b6:	3304      	adds	r3, #4
 80084b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084c6:	78fb      	ldrb	r3, [r7, #3]
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_PCD_EP_SetStall+0x82>
 80084dc:	2302      	movs	r3, #2
 80084de:	e01e      	b.n	800851e <HAL_PCD_EP_SetStall+0xc0>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68f9      	ldr	r1, [r7, #12]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f003 fe49 	bl	800c186 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	b2d9      	uxtb	r1, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800850e:	461a      	mov	r2, r3
 8008510:	f004 f83a 	bl	800c588 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	460b      	mov	r3, r1
 8008530:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	f003 020f 	and.w	r2, r3, #15
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	429a      	cmp	r2, r3
 800853e:	d901      	bls.n	8008544 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e042      	b.n	80085ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008548:	2b00      	cmp	r3, #0
 800854a:	da0f      	bge.n	800856c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	f003 020f 	and.w	r2, r3, #15
 8008552:	4613      	mov	r3, r2
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	1a9b      	subs	r3, r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	3338      	adds	r3, #56	; 0x38
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	4413      	add	r3, r2
 8008560:	3304      	adds	r3, #4
 8008562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	705a      	strb	r2, [r3, #1]
 800856a:	e00f      	b.n	800858c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	f003 020f 	and.w	r2, r3, #15
 8008572:	4613      	mov	r3, r2
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4413      	add	r3, r2
 8008582:	3304      	adds	r3, #4
 8008584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008592:	78fb      	ldrb	r3, [r7, #3]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	b2da      	uxtb	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <HAL_PCD_EP_ClrStall+0x86>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e00e      	b.n	80085ca <HAL_PCD_EP_ClrStall+0xa4>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68f9      	ldr	r1, [r7, #12]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f003 fe51 	bl	800c262 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b08a      	sub	sp, #40	; 0x28
 80085d6:	af02      	add	r7, sp, #8
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4613      	mov	r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	1a9b      	subs	r3, r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	3338      	adds	r3, #56	; 0x38
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	4413      	add	r3, r2
 80085f6:	3304      	adds	r3, #4
 80085f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	699a      	ldr	r2, [r3, #24]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	429a      	cmp	r2, r3
 8008604:	d901      	bls.n	800860a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e06c      	b.n	80086e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	429a      	cmp	r2, r3
 800861e:	d902      	bls.n	8008626 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	3303      	adds	r3, #3
 800862a:	089b      	lsrs	r3, r3, #2
 800862c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800862e:	e02b      	b.n	8008688 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	695a      	ldr	r2, [r3, #20]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	429a      	cmp	r2, r3
 8008644:	d902      	bls.n	800864c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	3303      	adds	r3, #3
 8008650:	089b      	lsrs	r3, r3, #2
 8008652:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	68d9      	ldr	r1, [r3, #12]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008664:	b2db      	uxtb	r3, r3
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	4603      	mov	r3, r0
 800866a:	6978      	ldr	r0, [r7, #20]
 800866c:	f003 fcf5 	bl	800c05a <USB_WritePacket>

    ep->xfer_buff  += len;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	441a      	add	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	699a      	ldr	r2, [r3, #24]
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	441a      	add	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	b29b      	uxth	r3, r3
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	429a      	cmp	r2, r3
 800869c:	d809      	bhi.n	80086b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	699a      	ldr	r2, [r3, #24]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d203      	bcs.n	80086b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1be      	bne.n	8008630 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	695a      	ldr	r2, [r3, #20]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d811      	bhi.n	80086e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	2201      	movs	r2, #1
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	43db      	mvns	r3, r3
 80086d8:	6939      	ldr	r1, [r7, #16]
 80086da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086de:	4013      	ands	r3, r2
 80086e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	333c      	adds	r3, #60	; 0x3c
 8008704:	3304      	adds	r3, #4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	4413      	add	r3, r2
 8008712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	2b01      	cmp	r3, #1
 8008720:	f040 80a0 	bne.w	8008864 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	2b00      	cmp	r3, #0
 800872c:	d015      	beq.n	800875a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4a72      	ldr	r2, [pc, #456]	; (80088fc <PCD_EP_OutXfrComplete_int+0x210>)
 8008732:	4293      	cmp	r3, r2
 8008734:	f240 80dd 	bls.w	80088f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80d7 	beq.w	80088f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008750:	461a      	mov	r2, r3
 8008752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008756:	6093      	str	r3, [r2, #8]
 8008758:	e0cb      	b.n	80088f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d009      	beq.n	8008778 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008770:	461a      	mov	r2, r3
 8008772:	2320      	movs	r3, #32
 8008774:	6093      	str	r3, [r2, #8]
 8008776:	e0bc      	b.n	80088f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 80b7 	bne.w	80088f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4a5d      	ldr	r2, [pc, #372]	; (80088fc <PCD_EP_OutXfrComplete_int+0x210>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d90f      	bls.n	80087ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	4413      	add	r3, r2
 800879e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a2:	461a      	mov	r2, r3
 80087a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a8:	6093      	str	r3, [r2, #8]
 80087aa:	e0a2      	b.n	80088f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80087be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	0159      	lsls	r1, r3, #5
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	440b      	add	r3, r1
 80087c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80087d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	1a9b      	subs	r3, r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4403      	add	r3, r0
 80087e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80087e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	1a9b      	subs	r3, r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80087fa:	6819      	ldr	r1, [r3, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4613      	mov	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	1a9b      	subs	r3, r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4403      	add	r3, r0
 800880a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4419      	add	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	4613      	mov	r3, r2
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	1a9b      	subs	r3, r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4403      	add	r3, r0
 8008820:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008824:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d114      	bne.n	8008856 <PCD_EP_OutXfrComplete_int+0x16a>
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	4613      	mov	r3, r2
 8008832:	00db      	lsls	r3, r3, #3
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	440b      	add	r3, r1
 800883a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800884e:	461a      	mov	r2, r3
 8008850:	2101      	movs	r1, #1
 8008852:	f003 fe99 	bl	800c588 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f00d f98b 	bl	8015b78 <HAL_PCD_DataOutStageCallback>
 8008862:	e046      	b.n	80088f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4a26      	ldr	r2, [pc, #152]	; (8008900 <PCD_EP_OutXfrComplete_int+0x214>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d124      	bne.n	80088b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008882:	461a      	mov	r2, r3
 8008884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008888:	6093      	str	r3, [r2, #8]
 800888a:	e032      	b.n	80088f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d008      	beq.n	80088a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a2:	461a      	mov	r2, r3
 80088a4:	2320      	movs	r3, #32
 80088a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f00d f962 	bl	8015b78 <HAL_PCD_DataOutStageCallback>
 80088b4:	e01d      	b.n	80088f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d114      	bne.n	80088e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	4613      	mov	r3, r2
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d108      	bne.n	80088e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088de:	461a      	mov	r2, r3
 80088e0:	2100      	movs	r1, #0
 80088e2:	f003 fe51 	bl	800c588 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f00d f943 	bl	8015b78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	4f54300a 	.word	0x4f54300a
 8008900:	4f54310a 	.word	0x4f54310a

08008904 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	333c      	adds	r3, #60	; 0x3c
 800891c:	3304      	adds	r3, #4
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4a15      	ldr	r2, [pc, #84]	; (800898c <PCD_EP_OutSetupPacket_int+0x88>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d90e      	bls.n	8008958 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008940:	2b00      	cmp	r3, #0
 8008942:	d009      	beq.n	8008958 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	461a      	mov	r2, r3
 8008952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008956:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f00d f8fb 	bl	8015b54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4a0a      	ldr	r2, [pc, #40]	; (800898c <PCD_EP_OutSetupPacket_int+0x88>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d90c      	bls.n	8008980 <PCD_EP_OutSetupPacket_int+0x7c>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d108      	bne.n	8008980 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008978:	461a      	mov	r2, r3
 800897a:	2101      	movs	r1, #1
 800897c:	f003 fe04 	bl	800c588 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	4f54300a 	.word	0x4f54300a

08008990 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
 800899c:	4613      	mov	r3, r2
 800899e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d107      	bne.n	80089be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80089ae:	883b      	ldrh	r3, [r7, #0]
 80089b0:	0419      	lsls	r1, r3, #16
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	629a      	str	r2, [r3, #40]	; 0x28
 80089bc:	e028      	b.n	8008a10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c4:	0c1b      	lsrs	r3, r3, #16
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4413      	add	r3, r2
 80089ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	e00d      	b.n	80089ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	3340      	adds	r3, #64	; 0x40
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	0c1b      	lsrs	r3, r3, #16
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	3301      	adds	r3, #1
 80089ec:	73fb      	strb	r3, [r7, #15]
 80089ee:	7bfa      	ldrb	r2, [r7, #15]
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3ec      	bcc.n	80089d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80089f8:	883b      	ldrh	r3, [r7, #0]
 80089fa:	0418      	lsls	r0, r3, #16
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6819      	ldr	r1, [r3, #0]
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	4302      	orrs	r2, r0
 8008a08:	3340      	adds	r3, #64	; 0x40
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	887a      	ldrh	r2, [r7, #2]
 8008a30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e264      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d075      	beq.n	8008b62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a76:	4ba3      	ldr	r3, [pc, #652]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f003 030c 	and.w	r3, r3, #12
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d00c      	beq.n	8008a9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a82:	4ba0      	ldr	r3, [pc, #640]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d112      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a8e:	4b9d      	ldr	r3, [pc, #628]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9a:	d10b      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a9c:	4b99      	ldr	r3, [pc, #612]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d05b      	beq.n	8008b60 <HAL_RCC_OscConfig+0x108>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d157      	bne.n	8008b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e23f      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008abc:	d106      	bne.n	8008acc <HAL_RCC_OscConfig+0x74>
 8008abe:	4b91      	ldr	r3, [pc, #580]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a90      	ldr	r2, [pc, #576]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	e01d      	b.n	8008b08 <HAL_RCC_OscConfig+0xb0>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ad4:	d10c      	bne.n	8008af0 <HAL_RCC_OscConfig+0x98>
 8008ad6:	4b8b      	ldr	r3, [pc, #556]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a8a      	ldr	r2, [pc, #552]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	4b88      	ldr	r3, [pc, #544]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a87      	ldr	r2, [pc, #540]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	e00b      	b.n	8008b08 <HAL_RCC_OscConfig+0xb0>
 8008af0:	4b84      	ldr	r3, [pc, #528]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a83      	ldr	r2, [pc, #524]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	4b81      	ldr	r3, [pc, #516]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a80      	ldr	r2, [pc, #512]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d013      	beq.n	8008b38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b10:	f7fd f89a 	bl	8005c48 <HAL_GetTick>
 8008b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b16:	e008      	b.n	8008b2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b18:	f7fd f896 	bl	8005c48 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b64      	cmp	r3, #100	; 0x64
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e204      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b2a:	4b76      	ldr	r3, [pc, #472]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0f0      	beq.n	8008b18 <HAL_RCC_OscConfig+0xc0>
 8008b36:	e014      	b.n	8008b62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b38:	f7fd f886 	bl	8005c48 <HAL_GetTick>
 8008b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b3e:	e008      	b.n	8008b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b40:	f7fd f882 	bl	8005c48 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b64      	cmp	r3, #100	; 0x64
 8008b4c:	d901      	bls.n	8008b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e1f0      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b52:	4b6c      	ldr	r3, [pc, #432]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1f0      	bne.n	8008b40 <HAL_RCC_OscConfig+0xe8>
 8008b5e:	e000      	b.n	8008b62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d063      	beq.n	8008c36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b6e:	4b65      	ldr	r3, [pc, #404]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f003 030c 	and.w	r3, r3, #12
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b7a:	4b62      	ldr	r3, [pc, #392]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b82:	2b08      	cmp	r3, #8
 8008b84:	d11c      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b86:	4b5f      	ldr	r3, [pc, #380]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d116      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b92:	4b5c      	ldr	r3, [pc, #368]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <HAL_RCC_OscConfig+0x152>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d001      	beq.n	8008baa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e1c4      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008baa:	4b56      	ldr	r3, [pc, #344]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	4952      	ldr	r1, [pc, #328]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bbe:	e03a      	b.n	8008c36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d020      	beq.n	8008c0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bc8:	4b4f      	ldr	r3, [pc, #316]	; (8008d08 <HAL_RCC_OscConfig+0x2b0>)
 8008bca:	2201      	movs	r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bce:	f7fd f83b 	bl	8005c48 <HAL_GetTick>
 8008bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bd4:	e008      	b.n	8008be8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bd6:	f7fd f837 	bl	8005c48 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d901      	bls.n	8008be8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e1a5      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be8:	4b46      	ldr	r3, [pc, #280]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0f0      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bf4:	4b43      	ldr	r3, [pc, #268]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	4940      	ldr	r1, [pc, #256]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	600b      	str	r3, [r1, #0]
 8008c08:	e015      	b.n	8008c36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c0a:	4b3f      	ldr	r3, [pc, #252]	; (8008d08 <HAL_RCC_OscConfig+0x2b0>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c10:	f7fd f81a 	bl	8005c48 <HAL_GetTick>
 8008c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c16:	e008      	b.n	8008c2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c18:	f7fd f816 	bl	8005c48 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e184      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c2a:	4b36      	ldr	r3, [pc, #216]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1f0      	bne.n	8008c18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d030      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d016      	beq.n	8008c78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c4a:	4b30      	ldr	r3, [pc, #192]	; (8008d0c <HAL_RCC_OscConfig+0x2b4>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c50:	f7fc fffa 	bl	8005c48 <HAL_GetTick>
 8008c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c56:	e008      	b.n	8008c6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c58:	f7fc fff6 	bl	8005c48 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d901      	bls.n	8008c6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e164      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c6a:	4b26      	ldr	r3, [pc, #152]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0f0      	beq.n	8008c58 <HAL_RCC_OscConfig+0x200>
 8008c76:	e015      	b.n	8008ca4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c78:	4b24      	ldr	r3, [pc, #144]	; (8008d0c <HAL_RCC_OscConfig+0x2b4>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c7e:	f7fc ffe3 	bl	8005c48 <HAL_GetTick>
 8008c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c84:	e008      	b.n	8008c98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c86:	f7fc ffdf 	bl	8005c48 <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d901      	bls.n	8008c98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e14d      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c98:	4b1a      	ldr	r3, [pc, #104]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1f0      	bne.n	8008c86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 80a0 	beq.w	8008df2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cb6:	4b13      	ldr	r3, [pc, #76]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10f      	bne.n	8008ce2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60bb      	str	r3, [r7, #8]
 8008cc6:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	4a0e      	ldr	r2, [pc, #56]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cda:	60bb      	str	r3, [r7, #8]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <HAL_RCC_OscConfig+0x2b8>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d121      	bne.n	8008d32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <HAL_RCC_OscConfig+0x2b8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a07      	ldr	r2, [pc, #28]	; (8008d10 <HAL_RCC_OscConfig+0x2b8>)
 8008cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cfa:	f7fc ffa5 	bl	8005c48 <HAL_GetTick>
 8008cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d00:	e011      	b.n	8008d26 <HAL_RCC_OscConfig+0x2ce>
 8008d02:	bf00      	nop
 8008d04:	40023800 	.word	0x40023800
 8008d08:	42470000 	.word	0x42470000
 8008d0c:	42470e80 	.word	0x42470e80
 8008d10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d14:	f7fc ff98 	bl	8005c48 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e106      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d26:	4b85      	ldr	r3, [pc, #532]	; (8008f3c <HAL_RCC_OscConfig+0x4e4>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0f0      	beq.n	8008d14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d106      	bne.n	8008d48 <HAL_RCC_OscConfig+0x2f0>
 8008d3a:	4b81      	ldr	r3, [pc, #516]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3e:	4a80      	ldr	r2, [pc, #512]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d40:	f043 0301 	orr.w	r3, r3, #1
 8008d44:	6713      	str	r3, [r2, #112]	; 0x70
 8008d46:	e01c      	b.n	8008d82 <HAL_RCC_OscConfig+0x32a>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2b05      	cmp	r3, #5
 8008d4e:	d10c      	bne.n	8008d6a <HAL_RCC_OscConfig+0x312>
 8008d50:	4b7b      	ldr	r3, [pc, #492]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d54:	4a7a      	ldr	r2, [pc, #488]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d56:	f043 0304 	orr.w	r3, r3, #4
 8008d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d5c:	4b78      	ldr	r3, [pc, #480]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d60:	4a77      	ldr	r2, [pc, #476]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d62:	f043 0301 	orr.w	r3, r3, #1
 8008d66:	6713      	str	r3, [r2, #112]	; 0x70
 8008d68:	e00b      	b.n	8008d82 <HAL_RCC_OscConfig+0x32a>
 8008d6a:	4b75      	ldr	r3, [pc, #468]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6e:	4a74      	ldr	r2, [pc, #464]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	6713      	str	r3, [r2, #112]	; 0x70
 8008d76:	4b72      	ldr	r3, [pc, #456]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7a:	4a71      	ldr	r2, [pc, #452]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008d7c:	f023 0304 	bic.w	r3, r3, #4
 8008d80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d015      	beq.n	8008db6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d8a:	f7fc ff5d 	bl	8005c48 <HAL_GetTick>
 8008d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d90:	e00a      	b.n	8008da8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d92:	f7fc ff59 	bl	8005c48 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d901      	bls.n	8008da8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e0c5      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008da8:	4b65      	ldr	r3, [pc, #404]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0ee      	beq.n	8008d92 <HAL_RCC_OscConfig+0x33a>
 8008db4:	e014      	b.n	8008de0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008db6:	f7fc ff47 	bl	8005c48 <HAL_GetTick>
 8008dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dbc:	e00a      	b.n	8008dd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dbe:	f7fc ff43 	bl	8005c48 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e0af      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dd4:	4b5a      	ldr	r3, [pc, #360]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1ee      	bne.n	8008dbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d105      	bne.n	8008df2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008de6:	4b56      	ldr	r3, [pc, #344]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	4a55      	ldr	r2, [pc, #340]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008df0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 809b 	beq.w	8008f32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008dfc:	4b50      	ldr	r3, [pc, #320]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f003 030c 	and.w	r3, r3, #12
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d05c      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d141      	bne.n	8008e94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e10:	4b4c      	ldr	r3, [pc, #304]	; (8008f44 <HAL_RCC_OscConfig+0x4ec>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e16:	f7fc ff17 	bl	8005c48 <HAL_GetTick>
 8008e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e1c:	e008      	b.n	8008e30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e1e:	f7fc ff13 	bl	8005c48 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d901      	bls.n	8008e30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e081      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e30:	4b43      	ldr	r3, [pc, #268]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1f0      	bne.n	8008e1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	431a      	orrs	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	019b      	lsls	r3, r3, #6
 8008e4c:	431a      	orrs	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e52:	085b      	lsrs	r3, r3, #1
 8008e54:	3b01      	subs	r3, #1
 8008e56:	041b      	lsls	r3, r3, #16
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	061b      	lsls	r3, r3, #24
 8008e60:	4937      	ldr	r1, [pc, #220]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e66:	4b37      	ldr	r3, [pc, #220]	; (8008f44 <HAL_RCC_OscConfig+0x4ec>)
 8008e68:	2201      	movs	r2, #1
 8008e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e6c:	f7fc feec 	bl	8005c48 <HAL_GetTick>
 8008e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e72:	e008      	b.n	8008e86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e74:	f7fc fee8 	bl	8005c48 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e056      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e86:	4b2e      	ldr	r3, [pc, #184]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0f0      	beq.n	8008e74 <HAL_RCC_OscConfig+0x41c>
 8008e92:	e04e      	b.n	8008f32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e94:	4b2b      	ldr	r3, [pc, #172]	; (8008f44 <HAL_RCC_OscConfig+0x4ec>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e9a:	f7fc fed5 	bl	8005c48 <HAL_GetTick>
 8008e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ea0:	e008      	b.n	8008eb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ea2:	f7fc fed1 	bl	8005c48 <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d901      	bls.n	8008eb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e03f      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eb4:	4b22      	ldr	r3, [pc, #136]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1f0      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x44a>
 8008ec0:	e037      	b.n	8008f32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d101      	bne.n	8008ece <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e032      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ece:	4b1c      	ldr	r3, [pc, #112]	; (8008f40 <HAL_RCC_OscConfig+0x4e8>)
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d028      	beq.n	8008f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d121      	bne.n	8008f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d11a      	bne.n	8008f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008efe:	4013      	ands	r3, r2
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d111      	bne.n	8008f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f14:	085b      	lsrs	r3, r3, #1
 8008f16:	3b01      	subs	r3, #1
 8008f18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d107      	bne.n	8008f2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d001      	beq.n	8008f32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	40007000 	.word	0x40007000
 8008f40:	40023800 	.word	0x40023800
 8008f44:	42470060 	.word	0x42470060

08008f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d101      	bne.n	8008f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e0cc      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f5c:	4b68      	ldr	r3, [pc, #416]	; (8009100 <HAL_RCC_ClockConfig+0x1b8>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0307 	and.w	r3, r3, #7
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d90c      	bls.n	8008f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f6a:	4b65      	ldr	r3, [pc, #404]	; (8009100 <HAL_RCC_ClockConfig+0x1b8>)
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	b2d2      	uxtb	r2, r2
 8008f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f72:	4b63      	ldr	r3, [pc, #396]	; (8009100 <HAL_RCC_ClockConfig+0x1b8>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d001      	beq.n	8008f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e0b8      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d020      	beq.n	8008fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0304 	and.w	r3, r3, #4
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f9c:	4b59      	ldr	r3, [pc, #356]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	4a58      	ldr	r2, [pc, #352]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8008fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fb4:	4b53      	ldr	r3, [pc, #332]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	4a52      	ldr	r2, [pc, #328]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8008fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fc0:	4b50      	ldr	r3, [pc, #320]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	494d      	ldr	r1, [pc, #308]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d044      	beq.n	8009068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d107      	bne.n	8008ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fe6:	4b47      	ldr	r3, [pc, #284]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d119      	bne.n	8009026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e07f      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d003      	beq.n	8009006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009002:	2b03      	cmp	r3, #3
 8009004:	d107      	bne.n	8009016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009006:	4b3f      	ldr	r3, [pc, #252]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e06f      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009016:	4b3b      	ldr	r3, [pc, #236]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e067      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009026:	4b37      	ldr	r3, [pc, #220]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f023 0203 	bic.w	r2, r3, #3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	4934      	ldr	r1, [pc, #208]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8009034:	4313      	orrs	r3, r2
 8009036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009038:	f7fc fe06 	bl	8005c48 <HAL_GetTick>
 800903c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800903e:	e00a      	b.n	8009056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009040:	f7fc fe02 	bl	8005c48 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	f241 3288 	movw	r2, #5000	; 0x1388
 800904e:	4293      	cmp	r3, r2
 8009050:	d901      	bls.n	8009056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e04f      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009056:	4b2b      	ldr	r3, [pc, #172]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f003 020c 	and.w	r2, r3, #12
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	429a      	cmp	r2, r3
 8009066:	d1eb      	bne.n	8009040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009068:	4b25      	ldr	r3, [pc, #148]	; (8009100 <HAL_RCC_ClockConfig+0x1b8>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0307 	and.w	r3, r3, #7
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d20c      	bcs.n	8009090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009076:	4b22      	ldr	r3, [pc, #136]	; (8009100 <HAL_RCC_ClockConfig+0x1b8>)
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	b2d2      	uxtb	r2, r2
 800907c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800907e:	4b20      	ldr	r3, [pc, #128]	; (8009100 <HAL_RCC_ClockConfig+0x1b8>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d001      	beq.n	8009090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e032      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d008      	beq.n	80090ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800909c:	4b19      	ldr	r3, [pc, #100]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	4916      	ldr	r1, [pc, #88]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d009      	beq.n	80090ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090ba:	4b12      	ldr	r3, [pc, #72]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	490e      	ldr	r1, [pc, #56]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80090ce:	f000 f821 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 80090d2:	4602      	mov	r2, r0
 80090d4:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <HAL_RCC_ClockConfig+0x1bc>)
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	091b      	lsrs	r3, r3, #4
 80090da:	f003 030f 	and.w	r3, r3, #15
 80090de:	490a      	ldr	r1, [pc, #40]	; (8009108 <HAL_RCC_ClockConfig+0x1c0>)
 80090e0:	5ccb      	ldrb	r3, [r1, r3]
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	4a09      	ldr	r2, [pc, #36]	; (800910c <HAL_RCC_ClockConfig+0x1c4>)
 80090e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <HAL_RCC_ClockConfig+0x1c8>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fb fe8a 	bl	8004e08 <HAL_InitTick>

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	40023c00 	.word	0x40023c00
 8009104:	40023800 	.word	0x40023800
 8009108:	080198b0 	.word	0x080198b0
 800910c:	20000004 	.word	0x20000004
 8009110:	2000000c 	.word	0x2000000c

08009114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009114:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	2300      	movs	r3, #0
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	2300      	movs	r3, #0
 8009126:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800912c:	4b67      	ldr	r3, [pc, #412]	; (80092cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f003 030c 	and.w	r3, r3, #12
 8009134:	2b08      	cmp	r3, #8
 8009136:	d00d      	beq.n	8009154 <HAL_RCC_GetSysClockFreq+0x40>
 8009138:	2b08      	cmp	r3, #8
 800913a:	f200 80bd 	bhi.w	80092b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <HAL_RCC_GetSysClockFreq+0x34>
 8009142:	2b04      	cmp	r3, #4
 8009144:	d003      	beq.n	800914e <HAL_RCC_GetSysClockFreq+0x3a>
 8009146:	e0b7      	b.n	80092b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009148:	4b61      	ldr	r3, [pc, #388]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800914a:	60bb      	str	r3, [r7, #8]
       break;
 800914c:	e0b7      	b.n	80092be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800914e:	4b61      	ldr	r3, [pc, #388]	; (80092d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009150:	60bb      	str	r3, [r7, #8]
      break;
 8009152:	e0b4      	b.n	80092be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009154:	4b5d      	ldr	r3, [pc, #372]	; (80092cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800915c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800915e:	4b5b      	ldr	r3, [pc, #364]	; (80092cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d04d      	beq.n	8009206 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800916a:	4b58      	ldr	r3, [pc, #352]	; (80092cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	099b      	lsrs	r3, r3, #6
 8009170:	461a      	mov	r2, r3
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	f240 10ff 	movw	r0, #511	; 0x1ff
 800917a:	f04f 0100 	mov.w	r1, #0
 800917e:	ea02 0800 	and.w	r8, r2, r0
 8009182:	ea03 0901 	and.w	r9, r3, r1
 8009186:	4640      	mov	r0, r8
 8009188:	4649      	mov	r1, r9
 800918a:	f04f 0200 	mov.w	r2, #0
 800918e:	f04f 0300 	mov.w	r3, #0
 8009192:	014b      	lsls	r3, r1, #5
 8009194:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009198:	0142      	lsls	r2, r0, #5
 800919a:	4610      	mov	r0, r2
 800919c:	4619      	mov	r1, r3
 800919e:	ebb0 0008 	subs.w	r0, r0, r8
 80091a2:	eb61 0109 	sbc.w	r1, r1, r9
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	f04f 0300 	mov.w	r3, #0
 80091ae:	018b      	lsls	r3, r1, #6
 80091b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80091b4:	0182      	lsls	r2, r0, #6
 80091b6:	1a12      	subs	r2, r2, r0
 80091b8:	eb63 0301 	sbc.w	r3, r3, r1
 80091bc:	f04f 0000 	mov.w	r0, #0
 80091c0:	f04f 0100 	mov.w	r1, #0
 80091c4:	00d9      	lsls	r1, r3, #3
 80091c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091ca:	00d0      	lsls	r0, r2, #3
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	eb12 0208 	adds.w	r2, r2, r8
 80091d4:	eb43 0309 	adc.w	r3, r3, r9
 80091d8:	f04f 0000 	mov.w	r0, #0
 80091dc:	f04f 0100 	mov.w	r1, #0
 80091e0:	0259      	lsls	r1, r3, #9
 80091e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80091e6:	0250      	lsls	r0, r2, #9
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4610      	mov	r0, r2
 80091ee:	4619      	mov	r1, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	461a      	mov	r2, r3
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	f7f7 fd26 	bl	8000c48 <__aeabi_uldivmod>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4613      	mov	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e04a      	b.n	800929c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009206:	4b31      	ldr	r3, [pc, #196]	; (80092cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	099b      	lsrs	r3, r3, #6
 800920c:	461a      	mov	r2, r3
 800920e:	f04f 0300 	mov.w	r3, #0
 8009212:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009216:	f04f 0100 	mov.w	r1, #0
 800921a:	ea02 0400 	and.w	r4, r2, r0
 800921e:	ea03 0501 	and.w	r5, r3, r1
 8009222:	4620      	mov	r0, r4
 8009224:	4629      	mov	r1, r5
 8009226:	f04f 0200 	mov.w	r2, #0
 800922a:	f04f 0300 	mov.w	r3, #0
 800922e:	014b      	lsls	r3, r1, #5
 8009230:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009234:	0142      	lsls	r2, r0, #5
 8009236:	4610      	mov	r0, r2
 8009238:	4619      	mov	r1, r3
 800923a:	1b00      	subs	r0, r0, r4
 800923c:	eb61 0105 	sbc.w	r1, r1, r5
 8009240:	f04f 0200 	mov.w	r2, #0
 8009244:	f04f 0300 	mov.w	r3, #0
 8009248:	018b      	lsls	r3, r1, #6
 800924a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800924e:	0182      	lsls	r2, r0, #6
 8009250:	1a12      	subs	r2, r2, r0
 8009252:	eb63 0301 	sbc.w	r3, r3, r1
 8009256:	f04f 0000 	mov.w	r0, #0
 800925a:	f04f 0100 	mov.w	r1, #0
 800925e:	00d9      	lsls	r1, r3, #3
 8009260:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009264:	00d0      	lsls	r0, r2, #3
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	1912      	adds	r2, r2, r4
 800926c:	eb45 0303 	adc.w	r3, r5, r3
 8009270:	f04f 0000 	mov.w	r0, #0
 8009274:	f04f 0100 	mov.w	r1, #0
 8009278:	0299      	lsls	r1, r3, #10
 800927a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800927e:	0290      	lsls	r0, r2, #10
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	4610      	mov	r0, r2
 8009286:	4619      	mov	r1, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	461a      	mov	r2, r3
 800928c:	f04f 0300 	mov.w	r3, #0
 8009290:	f7f7 fcda 	bl	8000c48 <__aeabi_uldivmod>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4613      	mov	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800929c:	4b0b      	ldr	r3, [pc, #44]	; (80092cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	0c1b      	lsrs	r3, r3, #16
 80092a2:	f003 0303 	and.w	r3, r3, #3
 80092a6:	3301      	adds	r3, #1
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b4:	60bb      	str	r3, [r7, #8]
      break;
 80092b6:	e002      	b.n	80092be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80092b8:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80092ba:	60bb      	str	r3, [r7, #8]
      break;
 80092bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80092be:	68bb      	ldr	r3, [r7, #8]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80092ca:	bf00      	nop
 80092cc:	40023800 	.word	0x40023800
 80092d0:	00f42400 	.word	0x00f42400
 80092d4:	007a1200 	.word	0x007a1200

080092d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092d8:	b480      	push	{r7}
 80092da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092dc:	4b03      	ldr	r3, [pc, #12]	; (80092ec <HAL_RCC_GetHCLKFreq+0x14>)
 80092de:	681b      	ldr	r3, [r3, #0]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	20000004 	.word	0x20000004

080092f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80092f4:	f7ff fff0 	bl	80092d8 <HAL_RCC_GetHCLKFreq>
 80092f8:	4602      	mov	r2, r0
 80092fa:	4b05      	ldr	r3, [pc, #20]	; (8009310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	0a9b      	lsrs	r3, r3, #10
 8009300:	f003 0307 	and.w	r3, r3, #7
 8009304:	4903      	ldr	r1, [pc, #12]	; (8009314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009306:	5ccb      	ldrb	r3, [r1, r3]
 8009308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800930c:	4618      	mov	r0, r3
 800930e:	bd80      	pop	{r7, pc}
 8009310:	40023800 	.word	0x40023800
 8009314:	080198c0 	.word	0x080198c0

08009318 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	220f      	movs	r2, #15
 8009326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009328:	4b12      	ldr	r3, [pc, #72]	; (8009374 <HAL_RCC_GetClockConfig+0x5c>)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f003 0203 	and.w	r2, r3, #3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009334:	4b0f      	ldr	r3, [pc, #60]	; (8009374 <HAL_RCC_GetClockConfig+0x5c>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <HAL_RCC_GetClockConfig+0x5c>)
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800934c:	4b09      	ldr	r3, [pc, #36]	; (8009374 <HAL_RCC_GetClockConfig+0x5c>)
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	08db      	lsrs	r3, r3, #3
 8009352:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800935a:	4b07      	ldr	r3, [pc, #28]	; (8009378 <HAL_RCC_GetClockConfig+0x60>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0207 	and.w	r2, r3, #7
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	601a      	str	r2, [r3, #0]
}
 8009366:	bf00      	nop
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	40023800 	.word	0x40023800
 8009378:	40023c00 	.word	0x40023c00

0800937c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d105      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d035      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80093a4:	4b62      	ldr	r3, [pc, #392]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093aa:	f7fc fc4d 	bl	8005c48 <HAL_GetTick>
 80093ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093b0:	e008      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80093b2:	f7fc fc49 	bl	8005c48 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d901      	bls.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e0b0      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093c4:	4b5b      	ldr	r3, [pc, #364]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1f0      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	019a      	lsls	r2, r3, #6
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	071b      	lsls	r3, r3, #28
 80093dc:	4955      	ldr	r1, [pc, #340]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80093e4:	4b52      	ldr	r3, [pc, #328]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093ea:	f7fc fc2d 	bl	8005c48 <HAL_GetTick>
 80093ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093f0:	e008      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80093f2:	f7fc fc29 	bl	8005c48 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d901      	bls.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e090      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009404:	4b4b      	ldr	r3, [pc, #300]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0f0      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 8083 	beq.w	8009524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800941e:	2300      	movs	r3, #0
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	4b44      	ldr	r3, [pc, #272]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	4a43      	ldr	r2, [pc, #268]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800942c:	6413      	str	r3, [r2, #64]	; 0x40
 800942e:	4b41      	ldr	r3, [pc, #260]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800943a:	4b3f      	ldr	r3, [pc, #252]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a3e      	ldr	r2, [pc, #248]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009444:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009446:	f7fc fbff 	bl	8005c48 <HAL_GetTick>
 800944a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800944c:	e008      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800944e:	f7fc fbfb 	bl	8005c48 <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	2b02      	cmp	r3, #2
 800945a:	d901      	bls.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e062      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009460:	4b35      	ldr	r3, [pc, #212]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0f0      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800946c:	4b31      	ldr	r3, [pc, #196]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800946e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009474:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d02f      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	429a      	cmp	r2, r3
 8009488:	d028      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800948a:	4b2a      	ldr	r3, [pc, #168]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800948c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009492:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009494:	4b29      	ldr	r3, [pc, #164]	; (800953c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009496:	2201      	movs	r2, #1
 8009498:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800949a:	4b28      	ldr	r3, [pc, #160]	; (800953c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80094a0:	4a24      	ldr	r2, [pc, #144]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80094a6:	4b23      	ldr	r3, [pc, #140]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80094a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d114      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80094b2:	f7fc fbc9 	bl	8005c48 <HAL_GetTick>
 80094b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094b8:	e00a      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094ba:	f7fc fbc5 	bl	8005c48 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d901      	bls.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e02a      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094d0:	4b18      	ldr	r3, [pc, #96]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80094d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d4:	f003 0302 	and.w	r3, r3, #2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0ee      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094e8:	d10d      	bne.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80094ea:	4b12      	ldr	r3, [pc, #72]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80094fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094fe:	490d      	ldr	r1, [pc, #52]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009500:	4313      	orrs	r3, r2
 8009502:	608b      	str	r3, [r1, #8]
 8009504:	e005      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009506:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	4a0a      	ldr	r2, [pc, #40]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800950c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009510:	6093      	str	r3, [r2, #8]
 8009512:	4b08      	ldr	r3, [pc, #32]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009514:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800951e:	4905      	ldr	r1, [pc, #20]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009520:	4313      	orrs	r3, r2
 8009522:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	42470068 	.word	0x42470068
 8009534:	40023800 	.word	0x40023800
 8009538:	40007000 	.word	0x40007000
 800953c:	42470e40 	.word	0x42470e40

08009540 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e083      	b.n	800965a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	7f5b      	ldrb	r3, [r3, #29]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d105      	bne.n	8009568 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7fb fb08 	bl	8004b78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	22ca      	movs	r2, #202	; 0xca
 8009574:	625a      	str	r2, [r3, #36]	; 0x24
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2253      	movs	r2, #83	; 0x53
 800957c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fbc0 	bl	8009d04 <RTC_EnterInitMode>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d008      	beq.n	800959c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	22ff      	movs	r2, #255	; 0xff
 8009590:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2204      	movs	r2, #4
 8009596:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e05e      	b.n	800965a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6899      	ldr	r1, [r3, #8]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	431a      	orrs	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	430a      	orrs	r2, r1
 80095cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	68d2      	ldr	r2, [r2, #12]
 80095d6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6919      	ldr	r1, [r3, #16]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	041a      	lsls	r2, r3, #16
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095fa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10e      	bne.n	8009628 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fb52 	bl	8009cb4 <HAL_RTC_WaitForSynchro>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d008      	beq.n	8009628 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	22ff      	movs	r2, #255	; 0xff
 800961c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2204      	movs	r2, #4
 8009622:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e018      	b.n	800965a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009636:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	430a      	orrs	r2, r1
 8009648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	22ff      	movs	r2, #255	; 0xff
 8009650:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009658:	2300      	movs	r3, #0
  }
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009662:	b590      	push	{r4, r7, lr}
 8009664:	b087      	sub	sp, #28
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	7f1b      	ldrb	r3, [r3, #28]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <HAL_RTC_SetTime+0x1c>
 800967a:	2302      	movs	r3, #2
 800967c:	e0aa      	b.n	80097d4 <HAL_RTC_SetTime+0x172>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2201      	movs	r2, #1
 8009682:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2202      	movs	r2, #2
 8009688:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d126      	bne.n	80096de <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969a:	2b00      	cmp	r3, #0
 800969c:	d102      	bne.n	80096a4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2200      	movs	r2, #0
 80096a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fb57 	bl	8009d5c <RTC_ByteToBcd2>
 80096ae:	4603      	mov	r3, r0
 80096b0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	785b      	ldrb	r3, [r3, #1]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fb50 	bl	8009d5c <RTC_ByteToBcd2>
 80096bc:	4603      	mov	r3, r0
 80096be:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80096c0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	789b      	ldrb	r3, [r3, #2]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fb48 	bl	8009d5c <RTC_ByteToBcd2>
 80096cc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80096ce:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	78db      	ldrb	r3, [r3, #3]
 80096d6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80096d8:	4313      	orrs	r3, r2
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e018      	b.n	8009710 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d102      	bne.n	80096f2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2200      	movs	r2, #0
 80096f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	785b      	ldrb	r3, [r3, #1]
 80096fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80096fe:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009704:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	78db      	ldrb	r3, [r3, #3]
 800970a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800970c:	4313      	orrs	r3, r2
 800970e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	22ca      	movs	r2, #202	; 0xca
 8009716:	625a      	str	r2, [r3, #36]	; 0x24
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2253      	movs	r2, #83	; 0x53
 800971e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 faef 	bl	8009d04 <RTC_EnterInitMode>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00b      	beq.n	8009744 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	22ff      	movs	r2, #255	; 0xff
 8009732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2204      	movs	r2, #4
 8009738:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e047      	b.n	80097d4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800974e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009752:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689a      	ldr	r2, [r3, #8]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009762:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6899      	ldr	r1, [r3, #8]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	431a      	orrs	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	430a      	orrs	r2, r1
 800977a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800978a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 0320 	and.w	r3, r3, #32
 8009796:	2b00      	cmp	r3, #0
 8009798:	d111      	bne.n	80097be <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fa8a 	bl	8009cb4 <HAL_RTC_WaitForSynchro>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00b      	beq.n	80097be <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	22ff      	movs	r2, #255	; 0xff
 80097ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2204      	movs	r2, #4
 80097b2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e00a      	b.n	80097d4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	22ff      	movs	r2, #255	; 0xff
 80097c4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2201      	movs	r2, #1
 80097ca:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80097d2:	2300      	movs	r3, #0
  }
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	371c      	adds	r7, #28
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd90      	pop	{r4, r7, pc}

080097dc <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800980e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009812:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	0c1b      	lsrs	r3, r3, #16
 8009818:	b2db      	uxtb	r3, r3
 800981a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800981e:	b2da      	uxtb	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	0a1b      	lsrs	r3, r3, #8
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982e:	b2da      	uxtb	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983c:	b2da      	uxtb	r2, r3
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	0c1b      	lsrs	r3, r3, #16
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800984c:	b2da      	uxtb	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d11a      	bne.n	800988e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 fa9b 	bl	8009d98 <RTC_Bcd2ToByte>
 8009862:	4603      	mov	r3, r0
 8009864:	461a      	mov	r2, r3
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fa92 	bl	8009d98 <RTC_Bcd2ToByte>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	789b      	ldrb	r3, [r3, #2]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fa89 	bl	8009d98 <RTC_Bcd2ToByte>
 8009886:	4603      	mov	r3, r0
 8009888:	461a      	mov	r2, r3
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009898:	b590      	push	{r4, r7, lr}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	7f1b      	ldrb	r3, [r3, #28]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d101      	bne.n	80098b4 <HAL_RTC_SetDate+0x1c>
 80098b0:	2302      	movs	r3, #2
 80098b2:	e094      	b.n	80099de <HAL_RTC_SetDate+0x146>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2201      	movs	r2, #1
 80098b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2202      	movs	r2, #2
 80098be:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10e      	bne.n	80098e4 <HAL_RTC_SetDate+0x4c>
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	f003 0310 	and.w	r3, r3, #16
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d008      	beq.n	80098e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	785b      	ldrb	r3, [r3, #1]
 80098d6:	f023 0310 	bic.w	r3, r3, #16
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	330a      	adds	r3, #10
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d11c      	bne.n	8009924 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	78db      	ldrb	r3, [r3, #3]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fa34 	bl	8009d5c <RTC_ByteToBcd2>
 80098f4:	4603      	mov	r3, r0
 80098f6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 fa2d 	bl	8009d5c <RTC_ByteToBcd2>
 8009902:	4603      	mov	r3, r0
 8009904:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009906:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	789b      	ldrb	r3, [r3, #2]
 800990c:	4618      	mov	r0, r3
 800990e:	f000 fa25 	bl	8009d5c <RTC_ByteToBcd2>
 8009912:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009914:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800991e:	4313      	orrs	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	e00e      	b.n	8009942 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	78db      	ldrb	r3, [r3, #3]
 8009928:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	785b      	ldrb	r3, [r3, #1]
 800992e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009930:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009936:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	22ca      	movs	r2, #202	; 0xca
 8009948:	625a      	str	r2, [r3, #36]	; 0x24
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2253      	movs	r2, #83	; 0x53
 8009950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f9d6 	bl	8009d04 <RTC_EnterInitMode>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00b      	beq.n	8009976 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	22ff      	movs	r2, #255	; 0xff
 8009964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2204      	movs	r2, #4
 800996a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e033      	b.n	80099de <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009980:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009984:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68da      	ldr	r2, [r3, #12]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009994:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f003 0320 	and.w	r3, r3, #32
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d111      	bne.n	80099c8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f985 	bl	8009cb4 <HAL_RTC_WaitForSynchro>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	22ff      	movs	r2, #255	; 0xff
 80099b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2204      	movs	r2, #4
 80099bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e00a      	b.n	80099de <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2201      	movs	r2, #1
 80099d4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80099dc:	2300      	movs	r3, #0
  }
}
 80099de:	4618      	mov	r0, r3
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd90      	pop	{r4, r7, pc}

080099e6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a04:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	0c1b      	lsrs	r3, r3, #16
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	0a1b      	lsrs	r3, r3, #8
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	f003 031f 	and.w	r3, r3, #31
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	0b5b      	lsrs	r3, r3, #13
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f003 0307 	and.w	r3, r3, #7
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d11a      	bne.n	8009a7a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	78db      	ldrb	r3, [r3, #3]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 f9a5 	bl	8009d98 <RTC_Bcd2ToByte>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	461a      	mov	r2, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f99c 	bl	8009d98 <RTC_Bcd2ToByte>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	789b      	ldrb	r3, [r3, #2]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 f993 	bl	8009d98 <RTC_Bcd2ToByte>
 8009a72:	4603      	mov	r3, r0
 8009a74:	461a      	mov	r2, r3
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009a84:	b590      	push	{r4, r7, lr}
 8009a86:	b089      	sub	sp, #36	; 0x24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	7f1b      	ldrb	r3, [r3, #28]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_RTC_SetAlarm+0x24>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e101      	b.n	8009cac <HAL_RTC_SetAlarm+0x228>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d137      	bne.n	8009b2a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 f942 	bl	8009d5c <RTC_ByteToBcd2>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 f93b 	bl	8009d5c <RTC_ByteToBcd2>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009aea:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	789b      	ldrb	r3, [r3, #2]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f933 	bl	8009d5c <RTC_ByteToBcd2>
 8009af6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009af8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	78db      	ldrb	r3, [r3, #3]
 8009b00:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009b02:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 f925 	bl	8009d5c <RTC_ByteToBcd2>
 8009b12:	4603      	mov	r3, r0
 8009b14:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009b16:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009b1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009b24:	4313      	orrs	r3, r2
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	e023      	b.n	8009b72 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d102      	bne.n	8009b3e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009b4a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009b50:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	78db      	ldrb	r3, [r3, #3]
 8009b56:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009b58:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b60:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009b62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009b68:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	22ca      	movs	r2, #202	; 0xca
 8009b84:	625a      	str	r2, [r3, #36]	; 0x24
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2253      	movs	r2, #83	; 0x53
 8009b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b96:	d13f      	bne.n	8009c18 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689a      	ldr	r2, [r3, #8]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ba6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	689a      	ldr	r2, [r3, #8]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009bb6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bb8:	f7fc f846 	bl	8005c48 <HAL_GetTick>
 8009bbc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009bbe:	e013      	b.n	8009be8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009bc0:	f7fc f842 	bl	8005c48 <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bce:	d90b      	bls.n	8009be8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	22ff      	movs	r2, #255	; 0xff
 8009bd6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2203      	movs	r2, #3
 8009bdc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e061      	b.n	8009cac <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0e4      	beq.n	8009bc0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c14:	609a      	str	r2, [r3, #8]
 8009c16:	e03e      	b.n	8009c96 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009c26:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689a      	ldr	r2, [r3, #8]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c36:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c38:	f7fc f806 	bl	8005c48 <HAL_GetTick>
 8009c3c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009c3e:	e013      	b.n	8009c68 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009c40:	f7fc f802 	bl	8005c48 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c4e:	d90b      	bls.n	8009c68 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	22ff      	movs	r2, #255	; 0xff
 8009c56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2203      	movs	r2, #3
 8009c5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e021      	b.n	8009cac <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	f003 0302 	and.w	r3, r3, #2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0e4      	beq.n	8009c40 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69fa      	ldr	r2, [r7, #28]
 8009c7c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c94:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	22ff      	movs	r2, #255	; 0xff
 8009c9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3724      	adds	r7, #36	; 0x24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd90      	pop	{r4, r7, pc}

08009cb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009cce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009cd0:	f7fb ffba 	bl	8005c48 <HAL_GetTick>
 8009cd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009cd6:	e009      	b.n	8009cec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009cd8:	f7fb ffb6 	bl	8005c48 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ce6:	d901      	bls.n	8009cec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e007      	b.n	8009cfc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	f003 0320 	and.w	r3, r3, #32
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0ee      	beq.n	8009cd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d119      	bne.n	8009d52 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d28:	f7fb ff8e 	bl	8005c48 <HAL_GetTick>
 8009d2c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009d2e:	e009      	b.n	8009d44 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009d30:	f7fb ff8a 	bl	8005c48 <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d3e:	d901      	bls.n	8009d44 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e007      	b.n	8009d54 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0ee      	beq.n	8009d30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8009d6a:	e005      	b.n	8009d78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009d72:	79fb      	ldrb	r3, [r7, #7]
 8009d74:	3b0a      	subs	r3, #10
 8009d76:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	2b09      	cmp	r3, #9
 8009d7c:	d8f6      	bhi.n	8009d6c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	011b      	lsls	r3, r3, #4
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	79fb      	ldrb	r3, [r7, #7]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	b2db      	uxtb	r3, r3
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	091b      	lsrs	r3, r3, #4
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	461a      	mov	r2, r3
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009db8:	79fb      	ldrb	r3, [r7, #7]
 8009dba:	f003 030f 	and.w	r3, r3, #15
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	b2db      	uxtb	r3, r3
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e07b      	b.n	8009ede <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d108      	bne.n	8009e00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009df6:	d009      	beq.n	8009e0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	61da      	str	r2, [r3, #28]
 8009dfe:	e005      	b.n	8009e0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7fa fed0 	bl	8004bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009e54:	431a      	orrs	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e5e:	431a      	orrs	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	431a      	orrs	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	69db      	ldr	r3, [r3, #28]
 8009e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e86:	431a      	orrs	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a1b      	ldr	r3, [r3, #32]
 8009e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e90:	ea42 0103 	orr.w	r1, r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	0c1b      	lsrs	r3, r3, #16
 8009eaa:	f003 0104 	and.w	r1, r3, #4
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	f003 0210 	and.w	r2, r3, #16
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	69da      	ldr	r2, [r3, #28]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ecc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b088      	sub	sp, #32
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	603b      	str	r3, [r7, #0]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <HAL_SPI_Transmit+0x22>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e126      	b.n	800a156 <HAL_SPI_Transmit+0x270>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f10:	f7fb fe9a 	bl	8005c48 <HAL_GetTick>
 8009f14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009f16:	88fb      	ldrh	r3, [r7, #6]
 8009f18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d002      	beq.n	8009f2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009f26:	2302      	movs	r3, #2
 8009f28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f2a:	e10b      	b.n	800a144 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <HAL_SPI_Transmit+0x52>
 8009f32:	88fb      	ldrh	r3, [r7, #6]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f3c:	e102      	b.n	800a144 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2203      	movs	r2, #3
 8009f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	88fa      	ldrh	r2, [r7, #6]
 8009f56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	88fa      	ldrh	r2, [r7, #6]
 8009f5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f84:	d10f      	bne.n	8009fa6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb0:	2b40      	cmp	r3, #64	; 0x40
 8009fb2:	d007      	beq.n	8009fc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fcc:	d14b      	bne.n	800a066 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <HAL_SPI_Transmit+0xf6>
 8009fd6:	8afb      	ldrh	r3, [r7, #22]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d13e      	bne.n	800a05a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	881a      	ldrh	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	1c9a      	adds	r2, r3, #2
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a000:	e02b      	b.n	800a05a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f003 0302 	and.w	r3, r3, #2
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d112      	bne.n	800a036 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a014:	881a      	ldrh	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a020:	1c9a      	adds	r2, r3, #2
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	3b01      	subs	r3, #1
 800a02e:	b29a      	uxth	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	86da      	strh	r2, [r3, #54]	; 0x36
 800a034:	e011      	b.n	800a05a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a036:	f7fb fe07 	bl	8005c48 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d803      	bhi.n	800a04e <HAL_SPI_Transmit+0x168>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a04c:	d102      	bne.n	800a054 <HAL_SPI_Transmit+0x16e>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a058:	e074      	b.n	800a144 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a05e:	b29b      	uxth	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1ce      	bne.n	800a002 <HAL_SPI_Transmit+0x11c>
 800a064:	e04c      	b.n	800a100 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <HAL_SPI_Transmit+0x18e>
 800a06e:	8afb      	ldrh	r3, [r7, #22]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d140      	bne.n	800a0f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	330c      	adds	r3, #12
 800a07e:	7812      	ldrb	r2, [r2, #0]
 800a080:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a086:	1c5a      	adds	r2, r3, #1
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a090:	b29b      	uxth	r3, r3
 800a092:	3b01      	subs	r3, #1
 800a094:	b29a      	uxth	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a09a:	e02c      	b.n	800a0f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f003 0302 	and.w	r3, r3, #2
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d113      	bne.n	800a0d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	330c      	adds	r3, #12
 800a0b4:	7812      	ldrb	r2, [r2, #0]
 800a0b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	86da      	strh	r2, [r3, #54]	; 0x36
 800a0d0:	e011      	b.n	800a0f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0d2:	f7fb fdb9 	bl	8005c48 <HAL_GetTick>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d803      	bhi.n	800a0ea <HAL_SPI_Transmit+0x204>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0e8:	d102      	bne.n	800a0f0 <HAL_SPI_Transmit+0x20a>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a0f4:	e026      	b.n	800a144 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1cd      	bne.n	800a09c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 fa63 	bl	800a5d0 <SPI_EndRxTxTransaction>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10a      	bne.n	800a134 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a11e:	2300      	movs	r3, #0
 800a120:	613b      	str	r3, [r7, #16]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	613b      	str	r3, [r7, #16]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	613b      	str	r3, [r7, #16]
 800a132:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	77fb      	strb	r3, [r7, #31]
 800a140:	e000      	b.n	800a144 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a142:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a154:	7ffb      	ldrb	r3, [r7, #31]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b08c      	sub	sp, #48	; 0x30
 800a162:	af00      	add	r7, sp, #0
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
 800a16a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a16c:	2301      	movs	r3, #1
 800a16e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d101      	bne.n	800a184 <HAL_SPI_TransmitReceive+0x26>
 800a180:	2302      	movs	r3, #2
 800a182:	e18a      	b.n	800a49a <HAL_SPI_TransmitReceive+0x33c>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a18c:	f7fb fd5c 	bl	8005c48 <HAL_GetTick>
 800a190:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a1a2:	887b      	ldrh	r3, [r7, #2]
 800a1a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a1a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d00f      	beq.n	800a1ce <HAL_SPI_TransmitReceive+0x70>
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1b4:	d107      	bne.n	800a1c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d103      	bne.n	800a1c6 <HAL_SPI_TransmitReceive+0x68>
 800a1be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d003      	beq.n	800a1ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1cc:	e15b      	b.n	800a486 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d005      	beq.n	800a1e0 <HAL_SPI_TransmitReceive+0x82>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <HAL_SPI_TransmitReceive+0x82>
 800a1da:	887b      	ldrh	r3, [r7, #2]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d103      	bne.n	800a1e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1e6:	e14e      	b.n	800a486 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d003      	beq.n	800a1fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2205      	movs	r2, #5
 800a1f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	887a      	ldrh	r2, [r7, #2]
 800a20c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	887a      	ldrh	r2, [r7, #2]
 800a212:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	887a      	ldrh	r2, [r7, #2]
 800a21e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	887a      	ldrh	r2, [r7, #2]
 800a224:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a23c:	2b40      	cmp	r3, #64	; 0x40
 800a23e:	d007      	beq.n	800a250 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a24e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a258:	d178      	bne.n	800a34c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <HAL_SPI_TransmitReceive+0x10a>
 800a262:	8b7b      	ldrh	r3, [r7, #26]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d166      	bne.n	800a336 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26c:	881a      	ldrh	r2, [r3, #0]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a278:	1c9a      	adds	r2, r3, #2
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a282:	b29b      	uxth	r3, r3
 800a284:	3b01      	subs	r3, #1
 800a286:	b29a      	uxth	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a28c:	e053      	b.n	800a336 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f003 0302 	and.w	r3, r3, #2
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d11b      	bne.n	800a2d4 <HAL_SPI_TransmitReceive+0x176>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d016      	beq.n	800a2d4 <HAL_SPI_TransmitReceive+0x176>
 800a2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d113      	bne.n	800a2d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b0:	881a      	ldrh	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2bc:	1c9a      	adds	r2, r3, #2
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d119      	bne.n	800a316 <HAL_SPI_TransmitReceive+0x1b8>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d014      	beq.n	800a316 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68da      	ldr	r2, [r3, #12]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f6:	b292      	uxth	r2, r2
 800a2f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fe:	1c9a      	adds	r2, r3, #2
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a308:	b29b      	uxth	r3, r3
 800a30a:	3b01      	subs	r3, #1
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a312:	2301      	movs	r3, #1
 800a314:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a316:	f7fb fc97 	bl	8005c48 <HAL_GetTick>
 800a31a:	4602      	mov	r2, r0
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a322:	429a      	cmp	r2, r3
 800a324:	d807      	bhi.n	800a336 <HAL_SPI_TransmitReceive+0x1d8>
 800a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a32c:	d003      	beq.n	800a336 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a334:	e0a7      	b.n	800a486 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1a6      	bne.n	800a28e <HAL_SPI_TransmitReceive+0x130>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a344:	b29b      	uxth	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1a1      	bne.n	800a28e <HAL_SPI_TransmitReceive+0x130>
 800a34a:	e07c      	b.n	800a446 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <HAL_SPI_TransmitReceive+0x1fc>
 800a354:	8b7b      	ldrh	r3, [r7, #26]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d16b      	bne.n	800a432 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	330c      	adds	r3, #12
 800a364:	7812      	ldrb	r2, [r2, #0]
 800a366:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a376:	b29b      	uxth	r3, r3
 800a378:	3b01      	subs	r3, #1
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a380:	e057      	b.n	800a432 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f003 0302 	and.w	r3, r3, #2
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d11c      	bne.n	800a3ca <HAL_SPI_TransmitReceive+0x26c>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a394:	b29b      	uxth	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d017      	beq.n	800a3ca <HAL_SPI_TransmitReceive+0x26c>
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d114      	bne.n	800a3ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	7812      	ldrb	r2, [r2, #0]
 800a3ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d119      	bne.n	800a40c <HAL_SPI_TransmitReceive+0x2ae>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d014      	beq.n	800a40c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68da      	ldr	r2, [r3, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	3b01      	subs	r3, #1
 800a402:	b29a      	uxth	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a408:	2301      	movs	r3, #1
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a40c:	f7fb fc1c 	bl	8005c48 <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a418:	429a      	cmp	r2, r3
 800a41a:	d803      	bhi.n	800a424 <HAL_SPI_TransmitReceive+0x2c6>
 800a41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a422:	d102      	bne.n	800a42a <HAL_SPI_TransmitReceive+0x2cc>
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	2b00      	cmp	r3, #0
 800a428:	d103      	bne.n	800a432 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a430:	e029      	b.n	800a486 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a436:	b29b      	uxth	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1a2      	bne.n	800a382 <HAL_SPI_TransmitReceive+0x224>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a440:	b29b      	uxth	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d19d      	bne.n	800a382 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a448:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 f8c0 	bl	800a5d0 <SPI_EndRxTxTransaction>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d006      	beq.n	800a464 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2220      	movs	r2, #32
 800a460:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a462:	e010      	b.n	800a486 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10b      	bne.n	800a484 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a46c:	2300      	movs	r3, #0
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	617b      	str	r3, [r7, #20]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	e000      	b.n	800a486 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a484:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3730      	adds	r7, #48	; 0x30
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4b0:	b2db      	uxtb	r3, r3
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
	...

0800a4c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b088      	sub	sp, #32
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a4d0:	f7fb fbba 	bl	8005c48 <HAL_GetTick>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	1a9b      	subs	r3, r3, r2
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	4413      	add	r3, r2
 800a4de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a4e0:	f7fb fbb2 	bl	8005c48 <HAL_GetTick>
 800a4e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4e6:	4b39      	ldr	r3, [pc, #228]	; (800a5cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	015b      	lsls	r3, r3, #5
 800a4ec:	0d1b      	lsrs	r3, r3, #20
 800a4ee:	69fa      	ldr	r2, [r7, #28]
 800a4f0:	fb02 f303 	mul.w	r3, r2, r3
 800a4f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4f6:	e054      	b.n	800a5a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4fe:	d050      	beq.n	800a5a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a500:	f7fb fba2 	bl	8005c48 <HAL_GetTick>
 800a504:	4602      	mov	r2, r0
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d902      	bls.n	800a516 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d13d      	bne.n	800a592 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a524:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a52e:	d111      	bne.n	800a554 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a538:	d004      	beq.n	800a544 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a542:	d107      	bne.n	800a554 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a552:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a55c:	d10f      	bne.n	800a57e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a57c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e017      	b.n	800a5c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d101      	bne.n	800a59c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	bf0c      	ite	eq
 800a5b2:	2301      	moveq	r3, #1
 800a5b4:	2300      	movne	r3, #0
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	79fb      	ldrb	r3, [r7, #7]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d19b      	bne.n	800a4f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3720      	adds	r7, #32
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000004 	.word	0x20000004

0800a5d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b088      	sub	sp, #32
 800a5d4:	af02      	add	r7, sp, #8
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a5dc:	4b1b      	ldr	r3, [pc, #108]	; (800a64c <SPI_EndRxTxTransaction+0x7c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a1b      	ldr	r2, [pc, #108]	; (800a650 <SPI_EndRxTxTransaction+0x80>)
 800a5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e6:	0d5b      	lsrs	r3, r3, #21
 800a5e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5ec:	fb02 f303 	mul.w	r3, r2, r3
 800a5f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5fa:	d112      	bne.n	800a622 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2200      	movs	r2, #0
 800a604:	2180      	movs	r1, #128	; 0x80
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f7ff ff5a 	bl	800a4c0 <SPI_WaitFlagStateUntilTimeout>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d016      	beq.n	800a640 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a616:	f043 0220 	orr.w	r2, r3, #32
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e00f      	b.n	800a642 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00a      	beq.n	800a63e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a638:	2b80      	cmp	r3, #128	; 0x80
 800a63a:	d0f2      	beq.n	800a622 <SPI_EndRxTxTransaction+0x52>
 800a63c:	e000      	b.n	800a640 <SPI_EndRxTxTransaction+0x70>
        break;
 800a63e:	bf00      	nop
  }

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000004 	.word	0x20000004
 800a650:	165e9f81 	.word	0x165e9f81

0800a654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e041      	b.n	800a6ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d106      	bne.n	800a680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7fa fb44 	bl	8004d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3304      	adds	r3, #4
 800a690:	4619      	mov	r1, r3
 800a692:	4610      	mov	r0, r2
 800a694:	f000 fac4 	bl	800ac20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b01      	cmp	r3, #1
 800a706:	d001      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e04e      	b.n	800a7aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2202      	movs	r2, #2
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0201 	orr.w	r2, r2, #1
 800a722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a23      	ldr	r2, [pc, #140]	; (800a7b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d022      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a736:	d01d      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a1f      	ldr	r2, [pc, #124]	; (800a7bc <HAL_TIM_Base_Start_IT+0xc8>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d018      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a1e      	ldr	r2, [pc, #120]	; (800a7c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d013      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a1c      	ldr	r2, [pc, #112]	; (800a7c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00e      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a1b      	ldr	r2, [pc, #108]	; (800a7c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d009      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a19      	ldr	r2, [pc, #100]	; (800a7cc <HAL_TIM_Base_Start_IT+0xd8>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d004      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a18      	ldr	r2, [pc, #96]	; (800a7d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d111      	bne.n	800a798 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b06      	cmp	r3, #6
 800a784:	d010      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f042 0201 	orr.w	r2, r2, #1
 800a794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a796:	e007      	b.n	800a7a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0201 	orr.w	r2, r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40010000 	.word	0x40010000
 800a7bc:	40000400 	.word	0x40000400
 800a7c0:	40000800 	.word	0x40000800
 800a7c4:	40000c00 	.word	0x40000c00
 800a7c8:	40010400 	.word	0x40010400
 800a7cc:	40014000 	.word	0x40014000
 800a7d0:	40001800 	.word	0x40001800

0800a7d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68da      	ldr	r2, [r3, #12]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 0201 	bic.w	r2, r2, #1
 800a7ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6a1a      	ldr	r2, [r3, #32]
 800a7f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10f      	bne.n	800a81c <HAL_TIM_Base_Stop_IT+0x48>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6a1a      	ldr	r2, [r3, #32]
 800a802:	f240 4344 	movw	r3, #1092	; 0x444
 800a806:	4013      	ands	r3, r2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d107      	bne.n	800a81c <HAL_TIM_Base_Stop_IT+0x48>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f022 0201 	bic.w	r2, r2, #1
 800a81a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	f003 0302 	and.w	r3, r3, #2
 800a844:	2b02      	cmp	r3, #2
 800a846:	d122      	bne.n	800a88e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	f003 0302 	and.w	r3, r3, #2
 800a852:	2b02      	cmp	r3, #2
 800a854:	d11b      	bne.n	800a88e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f06f 0202 	mvn.w	r2, #2
 800a85e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f9b5 	bl	800abe4 <HAL_TIM_IC_CaptureCallback>
 800a87a:	e005      	b.n	800a888 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 f9a7 	bl	800abd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f9b8 	bl	800abf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	f003 0304 	and.w	r3, r3, #4
 800a898:	2b04      	cmp	r3, #4
 800a89a:	d122      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	f003 0304 	and.w	r3, r3, #4
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d11b      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f06f 0204 	mvn.w	r2, #4
 800a8b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f98b 	bl	800abe4 <HAL_TIM_IC_CaptureCallback>
 800a8ce:	e005      	b.n	800a8dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 f97d 	bl	800abd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f98e 	bl	800abf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f003 0308 	and.w	r3, r3, #8
 800a8ec:	2b08      	cmp	r3, #8
 800a8ee:	d122      	bne.n	800a936 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f003 0308 	and.w	r3, r3, #8
 800a8fa:	2b08      	cmp	r3, #8
 800a8fc:	d11b      	bne.n	800a936 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f06f 0208 	mvn.w	r2, #8
 800a906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2204      	movs	r2, #4
 800a90c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	f003 0303 	and.w	r3, r3, #3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f961 	bl	800abe4 <HAL_TIM_IC_CaptureCallback>
 800a922:	e005      	b.n	800a930 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f953 	bl	800abd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f964 	bl	800abf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	f003 0310 	and.w	r3, r3, #16
 800a940:	2b10      	cmp	r3, #16
 800a942:	d122      	bne.n	800a98a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	f003 0310 	and.w	r3, r3, #16
 800a94e:	2b10      	cmp	r3, #16
 800a950:	d11b      	bne.n	800a98a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f06f 0210 	mvn.w	r2, #16
 800a95a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2208      	movs	r2, #8
 800a960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f937 	bl	800abe4 <HAL_TIM_IC_CaptureCallback>
 800a976:	e005      	b.n	800a984 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f929 	bl	800abd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f93a 	bl	800abf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b01      	cmp	r3, #1
 800a996:	d10e      	bne.n	800a9b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d107      	bne.n	800a9b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f06f 0201 	mvn.w	r2, #1
 800a9ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7f9 ffe1 	bl	8004978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c0:	2b80      	cmp	r3, #128	; 0x80
 800a9c2:	d10e      	bne.n	800a9e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ce:	2b80      	cmp	r3, #128	; 0x80
 800a9d0:	d107      	bne.n	800a9e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fadf 	bl	800afa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ec:	2b40      	cmp	r3, #64	; 0x40
 800a9ee:	d10e      	bne.n	800aa0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9fa:	2b40      	cmp	r3, #64	; 0x40
 800a9fc:	d107      	bne.n	800aa0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f8ff 	bl	800ac0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f003 0320 	and.w	r3, r3, #32
 800aa18:	2b20      	cmp	r3, #32
 800aa1a:	d10e      	bne.n	800aa3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f003 0320 	and.w	r3, r3, #32
 800aa26:	2b20      	cmp	r3, #32
 800aa28:	d107      	bne.n	800aa3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f06f 0220 	mvn.w	r2, #32
 800aa32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 faa9 	bl	800af8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa3a:	bf00      	nop
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d101      	bne.n	800aa5e <HAL_TIM_ConfigClockSource+0x1c>
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	e0b4      	b.n	800abc8 <HAL_TIM_ConfigClockSource+0x186>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2202      	movs	r2, #2
 800aa6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aa7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa96:	d03e      	beq.n	800ab16 <HAL_TIM_ConfigClockSource+0xd4>
 800aa98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa9c:	f200 8087 	bhi.w	800abae <HAL_TIM_ConfigClockSource+0x16c>
 800aaa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaa4:	f000 8086 	beq.w	800abb4 <HAL_TIM_ConfigClockSource+0x172>
 800aaa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaac:	d87f      	bhi.n	800abae <HAL_TIM_ConfigClockSource+0x16c>
 800aaae:	2b70      	cmp	r3, #112	; 0x70
 800aab0:	d01a      	beq.n	800aae8 <HAL_TIM_ConfigClockSource+0xa6>
 800aab2:	2b70      	cmp	r3, #112	; 0x70
 800aab4:	d87b      	bhi.n	800abae <HAL_TIM_ConfigClockSource+0x16c>
 800aab6:	2b60      	cmp	r3, #96	; 0x60
 800aab8:	d050      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0x11a>
 800aaba:	2b60      	cmp	r3, #96	; 0x60
 800aabc:	d877      	bhi.n	800abae <HAL_TIM_ConfigClockSource+0x16c>
 800aabe:	2b50      	cmp	r3, #80	; 0x50
 800aac0:	d03c      	beq.n	800ab3c <HAL_TIM_ConfigClockSource+0xfa>
 800aac2:	2b50      	cmp	r3, #80	; 0x50
 800aac4:	d873      	bhi.n	800abae <HAL_TIM_ConfigClockSource+0x16c>
 800aac6:	2b40      	cmp	r3, #64	; 0x40
 800aac8:	d058      	beq.n	800ab7c <HAL_TIM_ConfigClockSource+0x13a>
 800aaca:	2b40      	cmp	r3, #64	; 0x40
 800aacc:	d86f      	bhi.n	800abae <HAL_TIM_ConfigClockSource+0x16c>
 800aace:	2b30      	cmp	r3, #48	; 0x30
 800aad0:	d064      	beq.n	800ab9c <HAL_TIM_ConfigClockSource+0x15a>
 800aad2:	2b30      	cmp	r3, #48	; 0x30
 800aad4:	d86b      	bhi.n	800abae <HAL_TIM_ConfigClockSource+0x16c>
 800aad6:	2b20      	cmp	r3, #32
 800aad8:	d060      	beq.n	800ab9c <HAL_TIM_ConfigClockSource+0x15a>
 800aada:	2b20      	cmp	r3, #32
 800aadc:	d867      	bhi.n	800abae <HAL_TIM_ConfigClockSource+0x16c>
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d05c      	beq.n	800ab9c <HAL_TIM_ConfigClockSource+0x15a>
 800aae2:	2b10      	cmp	r3, #16
 800aae4:	d05a      	beq.n	800ab9c <HAL_TIM_ConfigClockSource+0x15a>
 800aae6:	e062      	b.n	800abae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6818      	ldr	r0, [r3, #0]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	6899      	ldr	r1, [r3, #8]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	f000 f9ac 	bl	800ae54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	609a      	str	r2, [r3, #8]
      break;
 800ab14:	e04f      	b.n	800abb6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6899      	ldr	r1, [r3, #8]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	f000 f995 	bl	800ae54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	689a      	ldr	r2, [r3, #8]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab38:	609a      	str	r2, [r3, #8]
      break;
 800ab3a:	e03c      	b.n	800abb6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6818      	ldr	r0, [r3, #0]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	6859      	ldr	r1, [r3, #4]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	f000 f909 	bl	800ad60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2150      	movs	r1, #80	; 0x50
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 f962 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800ab5a:	e02c      	b.n	800abb6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6818      	ldr	r0, [r3, #0]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	6859      	ldr	r1, [r3, #4]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	f000 f928 	bl	800adbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2160      	movs	r1, #96	; 0x60
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 f952 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800ab7a:	e01c      	b.n	800abb6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	6859      	ldr	r1, [r3, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	f000 f8e9 	bl	800ad60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2140      	movs	r1, #64	; 0x40
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 f942 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800ab9a:	e00c      	b.n	800abb6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4619      	mov	r1, r3
 800aba6:	4610      	mov	r0, r2
 800aba8:	f000 f939 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800abac:	e003      	b.n	800abb6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	73fb      	strb	r3, [r7, #15]
      break;
 800abb2:	e000      	b.n	800abb6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800abb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a40      	ldr	r2, [pc, #256]	; (800ad34 <TIM_Base_SetConfig+0x114>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d013      	beq.n	800ac60 <TIM_Base_SetConfig+0x40>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac3e:	d00f      	beq.n	800ac60 <TIM_Base_SetConfig+0x40>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a3d      	ldr	r2, [pc, #244]	; (800ad38 <TIM_Base_SetConfig+0x118>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d00b      	beq.n	800ac60 <TIM_Base_SetConfig+0x40>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a3c      	ldr	r2, [pc, #240]	; (800ad3c <TIM_Base_SetConfig+0x11c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d007      	beq.n	800ac60 <TIM_Base_SetConfig+0x40>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a3b      	ldr	r2, [pc, #236]	; (800ad40 <TIM_Base_SetConfig+0x120>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d003      	beq.n	800ac60 <TIM_Base_SetConfig+0x40>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a3a      	ldr	r2, [pc, #232]	; (800ad44 <TIM_Base_SetConfig+0x124>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d108      	bne.n	800ac72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a2f      	ldr	r2, [pc, #188]	; (800ad34 <TIM_Base_SetConfig+0x114>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d02b      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac80:	d027      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a2c      	ldr	r2, [pc, #176]	; (800ad38 <TIM_Base_SetConfig+0x118>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d023      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a2b      	ldr	r2, [pc, #172]	; (800ad3c <TIM_Base_SetConfig+0x11c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d01f      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a2a      	ldr	r2, [pc, #168]	; (800ad40 <TIM_Base_SetConfig+0x120>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d01b      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a29      	ldr	r2, [pc, #164]	; (800ad44 <TIM_Base_SetConfig+0x124>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d017      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a28      	ldr	r2, [pc, #160]	; (800ad48 <TIM_Base_SetConfig+0x128>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d013      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a27      	ldr	r2, [pc, #156]	; (800ad4c <TIM_Base_SetConfig+0x12c>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d00f      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a26      	ldr	r2, [pc, #152]	; (800ad50 <TIM_Base_SetConfig+0x130>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d00b      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a25      	ldr	r2, [pc, #148]	; (800ad54 <TIM_Base_SetConfig+0x134>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d007      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a24      	ldr	r2, [pc, #144]	; (800ad58 <TIM_Base_SetConfig+0x138>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d003      	beq.n	800acd2 <TIM_Base_SetConfig+0xb2>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a23      	ldr	r2, [pc, #140]	; (800ad5c <TIM_Base_SetConfig+0x13c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d108      	bne.n	800ace4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	4313      	orrs	r3, r2
 800acf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	689a      	ldr	r2, [r3, #8]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a0a      	ldr	r2, [pc, #40]	; (800ad34 <TIM_Base_SetConfig+0x114>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d003      	beq.n	800ad18 <TIM_Base_SetConfig+0xf8>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a0c      	ldr	r2, [pc, #48]	; (800ad44 <TIM_Base_SetConfig+0x124>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d103      	bne.n	800ad20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	691a      	ldr	r2, [r3, #16]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	615a      	str	r2, [r3, #20]
}
 800ad26:	bf00      	nop
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40000400 	.word	0x40000400
 800ad3c:	40000800 	.word	0x40000800
 800ad40:	40000c00 	.word	0x40000c00
 800ad44:	40010400 	.word	0x40010400
 800ad48:	40014000 	.word	0x40014000
 800ad4c:	40014400 	.word	0x40014400
 800ad50:	40014800 	.word	0x40014800
 800ad54:	40001800 	.word	0x40001800
 800ad58:	40001c00 	.word	0x40001c00
 800ad5c:	40002000 	.word	0x40002000

0800ad60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	f023 0201 	bic.w	r2, r3, #1
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f023 030a 	bic.w	r3, r3, #10
 800ad9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	621a      	str	r2, [r3, #32]
}
 800adb2:	bf00      	nop
 800adb4:	371c      	adds	r7, #28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b087      	sub	sp, #28
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	60b9      	str	r1, [r7, #8]
 800adc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	f023 0210 	bic.w	r2, r3, #16
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6a1b      	ldr	r3, [r3, #32]
 800ade0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ade8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	031b      	lsls	r3, r3, #12
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	011b      	lsls	r3, r3, #4
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	621a      	str	r2, [r3, #32]
}
 800ae12:	bf00      	nop
 800ae14:	371c      	adds	r7, #28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b085      	sub	sp, #20
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	f043 0307 	orr.w	r3, r3, #7
 800ae40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	609a      	str	r2, [r3, #8]
}
 800ae48:	bf00      	nop
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	021a      	lsls	r2, r3, #8
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	431a      	orrs	r2, r3
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	609a      	str	r2, [r3, #8]
}
 800ae88:	bf00      	nop
 800ae8a:	371c      	adds	r7, #28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d101      	bne.n	800aeac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aea8:	2302      	movs	r3, #2
 800aeaa:	e05a      	b.n	800af62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a21      	ldr	r2, [pc, #132]	; (800af70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d022      	beq.n	800af36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef8:	d01d      	beq.n	800af36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a1d      	ldr	r2, [pc, #116]	; (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d018      	beq.n	800af36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a1b      	ldr	r2, [pc, #108]	; (800af78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d013      	beq.n	800af36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a1a      	ldr	r2, [pc, #104]	; (800af7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d00e      	beq.n	800af36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a18      	ldr	r2, [pc, #96]	; (800af80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d009      	beq.n	800af36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a17      	ldr	r2, [pc, #92]	; (800af84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d004      	beq.n	800af36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a15      	ldr	r2, [pc, #84]	; (800af88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d10c      	bne.n	800af50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	4313      	orrs	r3, r2
 800af46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3714      	adds	r7, #20
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	40010000 	.word	0x40010000
 800af74:	40000400 	.word	0x40000400
 800af78:	40000800 	.word	0x40000800
 800af7c:	40000c00 	.word	0x40000c00
 800af80:	40010400 	.word	0x40010400
 800af84:	40014000 	.word	0x40014000
 800af88:	40001800 	.word	0x40001800

0800af8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afb4:	b084      	sub	sp, #16
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	f107 001c 	add.w	r0, r7, #28
 800afc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d122      	bne.n	800b012 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800afe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d105      	bne.n	800b006 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f001 fb1c 	bl	800c644 <USB_CoreReset>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73fb      	strb	r3, [r7, #15]
 800b010:	e01a      	b.n	800b048 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f001 fb10 	bl	800c644 <USB_CoreReset>
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	639a      	str	r2, [r3, #56]	; 0x38
 800b03a:	e005      	b.n	800b048 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d10b      	bne.n	800b066 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f043 0206 	orr.w	r2, r3, #6
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f043 0220 	orr.w	r2, r3, #32
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b066:	7bfb      	ldrb	r3, [r7, #15]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b072:	b004      	add	sp, #16
 800b074:	4770      	bx	lr
	...

0800b078 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b078:	b480      	push	{r7}
 800b07a:	b087      	sub	sp, #28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	4613      	mov	r3, r2
 800b084:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b086:	79fb      	ldrb	r3, [r7, #7]
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d165      	bne.n	800b158 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	4a41      	ldr	r2, [pc, #260]	; (800b194 <USB_SetTurnaroundTime+0x11c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d906      	bls.n	800b0a2 <USB_SetTurnaroundTime+0x2a>
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	4a40      	ldr	r2, [pc, #256]	; (800b198 <USB_SetTurnaroundTime+0x120>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d202      	bcs.n	800b0a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b09c:	230f      	movs	r3, #15
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e062      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	4a3c      	ldr	r2, [pc, #240]	; (800b198 <USB_SetTurnaroundTime+0x120>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d306      	bcc.n	800b0b8 <USB_SetTurnaroundTime+0x40>
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	4a3b      	ldr	r2, [pc, #236]	; (800b19c <USB_SetTurnaroundTime+0x124>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d202      	bcs.n	800b0b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b0b2:	230e      	movs	r3, #14
 800b0b4:	617b      	str	r3, [r7, #20]
 800b0b6:	e057      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	4a38      	ldr	r2, [pc, #224]	; (800b19c <USB_SetTurnaroundTime+0x124>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d306      	bcc.n	800b0ce <USB_SetTurnaroundTime+0x56>
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	4a37      	ldr	r2, [pc, #220]	; (800b1a0 <USB_SetTurnaroundTime+0x128>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d202      	bcs.n	800b0ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b0c8:	230d      	movs	r3, #13
 800b0ca:	617b      	str	r3, [r7, #20]
 800b0cc:	e04c      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	4a33      	ldr	r2, [pc, #204]	; (800b1a0 <USB_SetTurnaroundTime+0x128>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d306      	bcc.n	800b0e4 <USB_SetTurnaroundTime+0x6c>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	4a32      	ldr	r2, [pc, #200]	; (800b1a4 <USB_SetTurnaroundTime+0x12c>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d802      	bhi.n	800b0e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b0de:	230c      	movs	r3, #12
 800b0e0:	617b      	str	r3, [r7, #20]
 800b0e2:	e041      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	4a2f      	ldr	r2, [pc, #188]	; (800b1a4 <USB_SetTurnaroundTime+0x12c>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d906      	bls.n	800b0fa <USB_SetTurnaroundTime+0x82>
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	4a2e      	ldr	r2, [pc, #184]	; (800b1a8 <USB_SetTurnaroundTime+0x130>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d802      	bhi.n	800b0fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b0f4:	230b      	movs	r3, #11
 800b0f6:	617b      	str	r3, [r7, #20]
 800b0f8:	e036      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	4a2a      	ldr	r2, [pc, #168]	; (800b1a8 <USB_SetTurnaroundTime+0x130>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d906      	bls.n	800b110 <USB_SetTurnaroundTime+0x98>
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	4a29      	ldr	r2, [pc, #164]	; (800b1ac <USB_SetTurnaroundTime+0x134>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d802      	bhi.n	800b110 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b10a:	230a      	movs	r3, #10
 800b10c:	617b      	str	r3, [r7, #20]
 800b10e:	e02b      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	4a26      	ldr	r2, [pc, #152]	; (800b1ac <USB_SetTurnaroundTime+0x134>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d906      	bls.n	800b126 <USB_SetTurnaroundTime+0xae>
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	4a25      	ldr	r2, [pc, #148]	; (800b1b0 <USB_SetTurnaroundTime+0x138>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d202      	bcs.n	800b126 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b120:	2309      	movs	r3, #9
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	e020      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	4a21      	ldr	r2, [pc, #132]	; (800b1b0 <USB_SetTurnaroundTime+0x138>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d306      	bcc.n	800b13c <USB_SetTurnaroundTime+0xc4>
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	4a20      	ldr	r2, [pc, #128]	; (800b1b4 <USB_SetTurnaroundTime+0x13c>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d802      	bhi.n	800b13c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b136:	2308      	movs	r3, #8
 800b138:	617b      	str	r3, [r7, #20]
 800b13a:	e015      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	4a1d      	ldr	r2, [pc, #116]	; (800b1b4 <USB_SetTurnaroundTime+0x13c>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d906      	bls.n	800b152 <USB_SetTurnaroundTime+0xda>
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	4a1c      	ldr	r2, [pc, #112]	; (800b1b8 <USB_SetTurnaroundTime+0x140>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d202      	bcs.n	800b152 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b14c:	2307      	movs	r3, #7
 800b14e:	617b      	str	r3, [r7, #20]
 800b150:	e00a      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b152:	2306      	movs	r3, #6
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	e007      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d102      	bne.n	800b164 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b15e:	2309      	movs	r3, #9
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	e001      	b.n	800b168 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b164:	2309      	movs	r3, #9
 800b166:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	68da      	ldr	r2, [r3, #12]
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	029b      	lsls	r3, r3, #10
 800b17c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b180:	431a      	orrs	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	371c      	adds	r7, #28
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	00d8acbf 	.word	0x00d8acbf
 800b198:	00e4e1c0 	.word	0x00e4e1c0
 800b19c:	00f42400 	.word	0x00f42400
 800b1a0:	01067380 	.word	0x01067380
 800b1a4:	011a499f 	.word	0x011a499f
 800b1a8:	01312cff 	.word	0x01312cff
 800b1ac:	014ca43f 	.word	0x014ca43f
 800b1b0:	016e3600 	.word	0x016e3600
 800b1b4:	01a6ab1f 	.word	0x01a6ab1f
 800b1b8:	01e84800 	.word	0x01e84800

0800b1bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	f043 0201 	orr.w	r2, r3, #1
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	370c      	adds	r7, #12
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b083      	sub	sp, #12
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	f023 0201 	bic.w	r2, r3, #1
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b21c:	78fb      	ldrb	r3, [r7, #3]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d115      	bne.n	800b24e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b22e:	2001      	movs	r0, #1
 800b230:	f7fa fd16 	bl	8005c60 <HAL_Delay>
      ms++;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3301      	adds	r3, #1
 800b238:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f001 f972 	bl	800c524 <USB_GetMode>
 800b240:	4603      	mov	r3, r0
 800b242:	2b01      	cmp	r3, #1
 800b244:	d01e      	beq.n	800b284 <USB_SetCurrentMode+0x84>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2b31      	cmp	r3, #49	; 0x31
 800b24a:	d9f0      	bls.n	800b22e <USB_SetCurrentMode+0x2e>
 800b24c:	e01a      	b.n	800b284 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b24e:	78fb      	ldrb	r3, [r7, #3]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d115      	bne.n	800b280 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b260:	2001      	movs	r0, #1
 800b262:	f7fa fcfd 	bl	8005c60 <HAL_Delay>
      ms++;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f001 f959 	bl	800c524 <USB_GetMode>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d005      	beq.n	800b284 <USB_SetCurrentMode+0x84>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b31      	cmp	r3, #49	; 0x31
 800b27c:	d9f0      	bls.n	800b260 <USB_SetCurrentMode+0x60>
 800b27e:	e001      	b.n	800b284 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	e005      	b.n	800b290 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2b32      	cmp	r3, #50	; 0x32
 800b288:	d101      	bne.n	800b28e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e000      	b.n	800b290 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b298:	b084      	sub	sp, #16
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b086      	sub	sp, #24
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b2a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	613b      	str	r3, [r7, #16]
 800b2b6:	e009      	b.n	800b2cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	3340      	adds	r3, #64	; 0x40
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	2b0e      	cmp	r3, #14
 800b2d0:	d9f2      	bls.n	800b2b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d11c      	bne.n	800b312 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2e6:	f043 0302 	orr.w	r3, r3, #2
 800b2ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b308:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	639a      	str	r2, [r3, #56]	; 0x38
 800b310:	e00b      	b.n	800b32a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b316:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b322:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b330:	461a      	mov	r2, r3
 800b332:	2300      	movs	r3, #0
 800b334:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b33c:	4619      	mov	r1, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b344:	461a      	mov	r2, r3
 800b346:	680b      	ldr	r3, [r1, #0]
 800b348:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10c      	bne.n	800b36a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	2b00      	cmp	r3, #0
 800b354:	d104      	bne.n	800b360 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b356:	2100      	movs	r1, #0
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f945 	bl	800b5e8 <USB_SetDevSpeed>
 800b35e:	e008      	b.n	800b372 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b360:	2101      	movs	r1, #1
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f940 	bl	800b5e8 <USB_SetDevSpeed>
 800b368:	e003      	b.n	800b372 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b36a:	2103      	movs	r1, #3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f93b 	bl	800b5e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b372:	2110      	movs	r1, #16
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f8f3 	bl	800b560 <USB_FlushTxFifo>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f90f 	bl	800b5a8 <USB_FlushRxFifo>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39a:	461a      	mov	r2, r3
 800b39c:	2300      	movs	r3, #0
 800b39e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	613b      	str	r3, [r7, #16]
 800b3bc:	e043      	b.n	800b446 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	015a      	lsls	r2, r3, #5
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3d4:	d118      	bne.n	800b408 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10a      	bne.n	800b3f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	e013      	b.n	800b41a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fe:	461a      	mov	r2, r3
 800b400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	e008      	b.n	800b41a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	015a      	lsls	r2, r3, #5
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	4413      	add	r3, r2
 800b410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b414:	461a      	mov	r2, r3
 800b416:	2300      	movs	r3, #0
 800b418:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	4413      	add	r3, r2
 800b422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b426:	461a      	mov	r2, r3
 800b428:	2300      	movs	r3, #0
 800b42a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	015a      	lsls	r2, r3, #5
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	4413      	add	r3, r2
 800b434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b438:	461a      	mov	r2, r3
 800b43a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b43e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	3301      	adds	r3, #1
 800b444:	613b      	str	r3, [r7, #16]
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d3b7      	bcc.n	800b3be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b44e:	2300      	movs	r3, #0
 800b450:	613b      	str	r3, [r7, #16]
 800b452:	e043      	b.n	800b4dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	015a      	lsls	r2, r3, #5
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b46a:	d118      	bne.n	800b49e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	4413      	add	r3, r2
 800b47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47e:	461a      	mov	r2, r3
 800b480:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b484:	6013      	str	r3, [r2, #0]
 800b486:	e013      	b.n	800b4b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	015a      	lsls	r2, r3, #5
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	4413      	add	r3, r2
 800b490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b494:	461a      	mov	r2, r3
 800b496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b49a:	6013      	str	r3, [r2, #0]
 800b49c:	e008      	b.n	800b4b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	015a      	lsls	r2, r3, #5
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4bc:	461a      	mov	r2, r3
 800b4be:	2300      	movs	r3, #0
 800b4c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	613b      	str	r3, [r7, #16]
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d3b7      	bcc.n	800b454 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b504:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d105      	bne.n	800b518 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	f043 0210 	orr.w	r2, r3, #16
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	699a      	ldr	r2, [r3, #24]
 800b51c:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <USB_DevInit+0x2c4>)
 800b51e:	4313      	orrs	r3, r2
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b526:	2b00      	cmp	r3, #0
 800b528:	d005      	beq.n	800b536 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	f043 0208 	orr.w	r2, r3, #8
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d107      	bne.n	800b54c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b544:	f043 0304 	orr.w	r3, r3, #4
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3718      	adds	r7, #24
 800b552:	46bd      	mov	sp, r7
 800b554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b558:	b004      	add	sp, #16
 800b55a:	4770      	bx	lr
 800b55c:	803c3800 	.word	0x803c3800

0800b560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	019b      	lsls	r3, r3, #6
 800b572:	f043 0220 	orr.w	r2, r3, #32
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3301      	adds	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	4a08      	ldr	r2, [pc, #32]	; (800b5a4 <USB_FlushTxFifo+0x44>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d901      	bls.n	800b58a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800b586:	2303      	movs	r3, #3
 800b588:	e006      	b.n	800b598 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b20      	cmp	r3, #32
 800b594:	d0f1      	beq.n	800b57a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	00030d40 	.word	0x00030d40

0800b5a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2210      	movs	r2, #16
 800b5b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	60fb      	str	r3, [r7, #12]
 800b5c0:	4a08      	ldr	r2, [pc, #32]	; (800b5e4 <USB_FlushRxFifo+0x3c>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d901      	bls.n	800b5ca <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e006      	b.n	800b5d8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f003 0310 	and.w	r3, r3, #16
 800b5d2:	2b10      	cmp	r3, #16
 800b5d4:	d0f1      	beq.n	800b5ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	00030d40 	.word	0x00030d40

0800b5e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	68f9      	ldr	r1, [r7, #12]
 800b604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b608:	4313      	orrs	r3, r2
 800b60a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b087      	sub	sp, #28
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	f003 0306 	and.w	r3, r3, #6
 800b632:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d102      	bne.n	800b640 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b63a:	2300      	movs	r3, #0
 800b63c:	75fb      	strb	r3, [r7, #23]
 800b63e:	e00a      	b.n	800b656 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d002      	beq.n	800b64c <USB_GetDevSpeed+0x32>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b06      	cmp	r3, #6
 800b64a:	d102      	bne.n	800b652 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b64c:	2302      	movs	r3, #2
 800b64e:	75fb      	strb	r3, [r7, #23]
 800b650:	e001      	b.n	800b656 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b652:	230f      	movs	r3, #15
 800b654:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b656:	7dfb      	ldrb	r3, [r7, #23]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	371c      	adds	r7, #28
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	785b      	ldrb	r3, [r3, #1]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d13a      	bne.n	800b6f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b686:	69da      	ldr	r2, [r3, #28]
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	f003 030f 	and.w	r3, r3, #15
 800b690:	2101      	movs	r1, #1
 800b692:	fa01 f303 	lsl.w	r3, r1, r3
 800b696:	b29b      	uxth	r3, r3
 800b698:	68f9      	ldr	r1, [r7, #12]
 800b69a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	015a      	lsls	r2, r3, #5
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d155      	bne.n	800b764 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	015a      	lsls	r2, r3, #5
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	78db      	ldrb	r3, [r3, #3]
 800b6d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	059b      	lsls	r3, r3, #22
 800b6da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	0151      	lsls	r1, r2, #5
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	440a      	add	r2, r1
 800b6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	e036      	b.n	800b764 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6fc:	69da      	ldr	r2, [r3, #28]
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	f003 030f 	and.w	r3, r3, #15
 800b706:	2101      	movs	r1, #1
 800b708:	fa01 f303 	lsl.w	r3, r1, r3
 800b70c:	041b      	lsls	r3, r3, #16
 800b70e:	68f9      	ldr	r1, [r7, #12]
 800b710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b714:	4313      	orrs	r3, r2
 800b716:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d11a      	bne.n	800b764 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	015a      	lsls	r2, r3, #5
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	4413      	add	r3, r2
 800b736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	78db      	ldrb	r3, [r3, #3]
 800b748:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b74a:	430b      	orrs	r3, r1
 800b74c:	4313      	orrs	r3, r2
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	0151      	lsls	r1, r2, #5
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	440a      	add	r2, r1
 800b756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b75a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b75e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b762:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
	...

0800b774 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	785b      	ldrb	r3, [r3, #1]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d161      	bne.n	800b854 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4413      	add	r3, r2
 800b798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7a6:	d11f      	bne.n	800b7e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	015a      	lsls	r2, r3, #5
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	0151      	lsls	r1, r2, #5
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	440a      	add	r2, r1
 800b7be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	0151      	lsls	r1, r2, #5
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	440a      	add	r2, r1
 800b7de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	f003 030f 	and.w	r3, r3, #15
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	43db      	mvns	r3, r3
 800b802:	68f9      	ldr	r1, [r7, #12]
 800b804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b808:	4013      	ands	r3, r2
 800b80a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b812:	69da      	ldr	r2, [r3, #28]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	f003 030f 	and.w	r3, r3, #15
 800b81c:	2101      	movs	r1, #1
 800b81e:	fa01 f303 	lsl.w	r3, r1, r3
 800b822:	b29b      	uxth	r3, r3
 800b824:	43db      	mvns	r3, r3
 800b826:	68f9      	ldr	r1, [r7, #12]
 800b828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b82c:	4013      	ands	r3, r2
 800b82e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	015a      	lsls	r2, r3, #5
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4413      	add	r3, r2
 800b838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	0159      	lsls	r1, r3, #5
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	440b      	add	r3, r1
 800b846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b84a:	4619      	mov	r1, r3
 800b84c:	4b35      	ldr	r3, [pc, #212]	; (800b924 <USB_DeactivateEndpoint+0x1b0>)
 800b84e:	4013      	ands	r3, r2
 800b850:	600b      	str	r3, [r1, #0]
 800b852:	e060      	b.n	800b916 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	015a      	lsls	r2, r3, #5
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b86a:	d11f      	bne.n	800b8ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	015a      	lsls	r2, r3, #5
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	4413      	add	r3, r2
 800b874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	0151      	lsls	r1, r2, #5
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	440a      	add	r2, r1
 800b882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b886:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b88a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	015a      	lsls	r2, r3, #5
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4413      	add	r3, r2
 800b894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	0151      	lsls	r1, r2, #5
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	440a      	add	r2, r1
 800b8a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	f003 030f 	and.w	r3, r3, #15
 800b8bc:	2101      	movs	r1, #1
 800b8be:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c2:	041b      	lsls	r3, r3, #16
 800b8c4:	43db      	mvns	r3, r3
 800b8c6:	68f9      	ldr	r1, [r7, #12]
 800b8c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d6:	69da      	ldr	r2, [r3, #28]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	f003 030f 	and.w	r3, r3, #15
 800b8e0:	2101      	movs	r1, #1
 800b8e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e6:	041b      	lsls	r3, r3, #16
 800b8e8:	43db      	mvns	r3, r3
 800b8ea:	68f9      	ldr	r1, [r7, #12]
 800b8ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	015a      	lsls	r2, r3, #5
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	0159      	lsls	r1, r3, #5
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	440b      	add	r3, r1
 800b90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b90e:	4619      	mov	r1, r3
 800b910:	4b05      	ldr	r3, [pc, #20]	; (800b928 <USB_DeactivateEndpoint+0x1b4>)
 800b912:	4013      	ands	r3, r2
 800b914:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	ec337800 	.word	0xec337800
 800b928:	eff37800 	.word	0xeff37800

0800b92c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08a      	sub	sp, #40	; 0x28
 800b930:	af02      	add	r7, sp, #8
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	4613      	mov	r3, r2
 800b938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	785b      	ldrb	r3, [r3, #1]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	f040 815c 	bne.w	800bc06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d132      	bne.n	800b9bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	015a      	lsls	r2, r3, #5
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	4413      	add	r3, r2
 800b95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	69ba      	ldr	r2, [r7, #24]
 800b966:	0151      	lsls	r1, r2, #5
 800b968:	69fa      	ldr	r2, [r7, #28]
 800b96a:	440a      	add	r2, r1
 800b96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	015a      	lsls	r2, r3, #5
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	4413      	add	r3, r2
 800b982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	69ba      	ldr	r2, [r7, #24]
 800b98a:	0151      	lsls	r1, r2, #5
 800b98c:	69fa      	ldr	r2, [r7, #28]
 800b98e:	440a      	add	r2, r1
 800b990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	015a      	lsls	r2, r3, #5
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	69ba      	ldr	r2, [r7, #24]
 800b9aa:	0151      	lsls	r1, r2, #5
 800b9ac:	69fa      	ldr	r2, [r7, #28]
 800b9ae:	440a      	add	r2, r1
 800b9b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b4:	0cdb      	lsrs	r3, r3, #19
 800b9b6:	04db      	lsls	r3, r3, #19
 800b9b8:	6113      	str	r3, [r2, #16]
 800b9ba:	e074      	b.n	800baa6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	015a      	lsls	r2, r3, #5
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	0151      	lsls	r1, r2, #5
 800b9ce:	69fa      	ldr	r2, [r7, #28]
 800b9d0:	440a      	add	r2, r1
 800b9d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9d6:	0cdb      	lsrs	r3, r3, #19
 800b9d8:	04db      	lsls	r3, r3, #19
 800b9da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	69ba      	ldr	r2, [r7, #24]
 800b9ec:	0151      	lsls	r1, r2, #5
 800b9ee:	69fa      	ldr	r2, [r7, #28]
 800b9f0:	440a      	add	r2, r1
 800b9f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b9fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b9fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba0c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	6959      	ldr	r1, [r3, #20]
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	440b      	add	r3, r1
 800ba18:	1e59      	subs	r1, r3, #1
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ba22:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ba24:	4b9d      	ldr	r3, [pc, #628]	; (800bc9c <USB_EPStartXfer+0x370>)
 800ba26:	400b      	ands	r3, r1
 800ba28:	69b9      	ldr	r1, [r7, #24]
 800ba2a:	0148      	lsls	r0, r1, #5
 800ba2c:	69f9      	ldr	r1, [r7, #28]
 800ba2e:	4401      	add	r1, r0
 800ba30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ba34:	4313      	orrs	r3, r2
 800ba36:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba44:	691a      	ldr	r2, [r3, #16]
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba4e:	69b9      	ldr	r1, [r7, #24]
 800ba50:	0148      	lsls	r0, r1, #5
 800ba52:	69f9      	ldr	r1, [r7, #28]
 800ba54:	4401      	add	r1, r0
 800ba56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	78db      	ldrb	r3, [r3, #3]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d11f      	bne.n	800baa6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	69ba      	ldr	r2, [r7, #24]
 800ba76:	0151      	lsls	r1, r2, #5
 800ba78:	69fa      	ldr	r2, [r7, #28]
 800ba7a:	440a      	add	r2, r1
 800ba7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ba84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	015a      	lsls	r2, r3, #5
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	69ba      	ldr	r2, [r7, #24]
 800ba96:	0151      	lsls	r1, r2, #5
 800ba98:	69fa      	ldr	r2, [r7, #28]
 800ba9a:	440a      	add	r2, r1
 800ba9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800baa4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d14b      	bne.n	800bb44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d009      	beq.n	800bac8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	4413      	add	r3, r2
 800babc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac0:	461a      	mov	r2, r3
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	78db      	ldrb	r3, [r3, #3]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d128      	bne.n	800bb22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800badc:	2b00      	cmp	r3, #0
 800bade:	d110      	bne.n	800bb02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	0151      	lsls	r1, r2, #5
 800baf2:	69fa      	ldr	r2, [r7, #28]
 800baf4:	440a      	add	r2, r1
 800baf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bafa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	e00f      	b.n	800bb22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	69ba      	ldr	r2, [r7, #24]
 800bb12:	0151      	lsls	r1, r2, #5
 800bb14:	69fa      	ldr	r2, [r7, #28]
 800bb16:	440a      	add	r2, r1
 800bb18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	69ba      	ldr	r2, [r7, #24]
 800bb32:	0151      	lsls	r1, r2, #5
 800bb34:	69fa      	ldr	r2, [r7, #28]
 800bb36:	440a      	add	r2, r1
 800bb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb40:	6013      	str	r3, [r2, #0]
 800bb42:	e12f      	b.n	800bda4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	015a      	lsls	r2, r3, #5
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	0151      	lsls	r1, r2, #5
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	440a      	add	r2, r1
 800bb5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	78db      	ldrb	r3, [r3, #3]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d015      	beq.n	800bb98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 8117 	beq.w	800bda4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	f003 030f 	and.w	r3, r3, #15
 800bb86:	2101      	movs	r1, #1
 800bb88:	fa01 f303 	lsl.w	r3, r1, r3
 800bb8c:	69f9      	ldr	r1, [r7, #28]
 800bb8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb92:	4313      	orrs	r3, r2
 800bb94:	634b      	str	r3, [r1, #52]	; 0x34
 800bb96:	e105      	b.n	800bda4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d110      	bne.n	800bbca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	015a      	lsls	r2, r3, #5
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	4413      	add	r3, r2
 800bbb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	0151      	lsls	r1, r2, #5
 800bbba:	69fa      	ldr	r2, [r7, #28]
 800bbbc:	440a      	add	r2, r1
 800bbbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	e00f      	b.n	800bbea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	0151      	lsls	r1, r2, #5
 800bbdc:	69fa      	ldr	r2, [r7, #28]
 800bbde:	440a      	add	r2, r1
 800bbe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbe8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	68d9      	ldr	r1, [r3, #12]
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	781a      	ldrb	r2, [r3, #0]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	b298      	uxth	r0, r3
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f000 fa2b 	bl	800c05a <USB_WritePacket>
 800bc04:	e0ce      	b.n	800bda4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	015a      	lsls	r2, r3, #5
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	69ba      	ldr	r2, [r7, #24]
 800bc16:	0151      	lsls	r1, r2, #5
 800bc18:	69fa      	ldr	r2, [r7, #28]
 800bc1a:	440a      	add	r2, r1
 800bc1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc20:	0cdb      	lsrs	r3, r3, #19
 800bc22:	04db      	lsls	r3, r3, #19
 800bc24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	69ba      	ldr	r2, [r7, #24]
 800bc36:	0151      	lsls	r1, r2, #5
 800bc38:	69fa      	ldr	r2, [r7, #28]
 800bc3a:	440a      	add	r2, r1
 800bc3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d126      	bne.n	800bca0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	015a      	lsls	r2, r3, #5
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc5e:	691a      	ldr	r2, [r3, #16]
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc68:	69b9      	ldr	r1, [r7, #24]
 800bc6a:	0148      	lsls	r0, r1, #5
 800bc6c:	69f9      	ldr	r1, [r7, #28]
 800bc6e:	4401      	add	r1, r0
 800bc70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc74:	4313      	orrs	r3, r2
 800bc76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	69ba      	ldr	r2, [r7, #24]
 800bc88:	0151      	lsls	r1, r2, #5
 800bc8a:	69fa      	ldr	r2, [r7, #28]
 800bc8c:	440a      	add	r2, r1
 800bc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc96:	6113      	str	r3, [r2, #16]
 800bc98:	e036      	b.n	800bd08 <USB_EPStartXfer+0x3dc>
 800bc9a:	bf00      	nop
 800bc9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	695a      	ldr	r2, [r3, #20]
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	4413      	add	r3, r2
 800bcaa:	1e5a      	subs	r2, r3, #1
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	015a      	lsls	r2, r3, #5
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc2:	691a      	ldr	r2, [r3, #16]
 800bcc4:	8afb      	ldrh	r3, [r7, #22]
 800bcc6:	04d9      	lsls	r1, r3, #19
 800bcc8:	4b39      	ldr	r3, [pc, #228]	; (800bdb0 <USB_EPStartXfer+0x484>)
 800bcca:	400b      	ands	r3, r1
 800bccc:	69b9      	ldr	r1, [r7, #24]
 800bcce:	0148      	lsls	r0, r1, #5
 800bcd0:	69f9      	ldr	r1, [r7, #28]
 800bcd2:	4401      	add	r1, r0
 800bcd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	015a      	lsls	r2, r3, #5
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	4413      	add	r3, r2
 800bce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce8:	691a      	ldr	r2, [r3, #16]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	8af9      	ldrh	r1, [r7, #22]
 800bcf0:	fb01 f303 	mul.w	r3, r1, r3
 800bcf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcf8:	69b9      	ldr	r1, [r7, #24]
 800bcfa:	0148      	lsls	r0, r1, #5
 800bcfc:	69f9      	ldr	r1, [r7, #28]
 800bcfe:	4401      	add	r1, r0
 800bd00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd04:	4313      	orrs	r3, r2
 800bd06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d10d      	bne.n	800bd2a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d009      	beq.n	800bd2a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	68d9      	ldr	r1, [r3, #12]
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	015a      	lsls	r2, r3, #5
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	4413      	add	r3, r2
 800bd22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd26:	460a      	mov	r2, r1
 800bd28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	78db      	ldrb	r3, [r3, #3]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d128      	bne.n	800bd84 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d110      	bne.n	800bd64 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	015a      	lsls	r2, r3, #5
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	4413      	add	r3, r2
 800bd4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	69ba      	ldr	r2, [r7, #24]
 800bd52:	0151      	lsls	r1, r2, #5
 800bd54:	69fa      	ldr	r2, [r7, #28]
 800bd56:	440a      	add	r2, r1
 800bd58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd60:	6013      	str	r3, [r2, #0]
 800bd62:	e00f      	b.n	800bd84 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	015a      	lsls	r2, r3, #5
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	69ba      	ldr	r2, [r7, #24]
 800bd74:	0151      	lsls	r1, r2, #5
 800bd76:	69fa      	ldr	r2, [r7, #28]
 800bd78:	440a      	add	r2, r1
 800bd7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	015a      	lsls	r2, r3, #5
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	69ba      	ldr	r2, [r7, #24]
 800bd94:	0151      	lsls	r1, r2, #5
 800bd96:	69fa      	ldr	r2, [r7, #28]
 800bd98:	440a      	add	r2, r1
 800bd9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bda2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3720      	adds	r7, #32
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	1ff80000 	.word	0x1ff80000

0800bdb4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	785b      	ldrb	r3, [r3, #1]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	f040 80cd 	bne.w	800bf70 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d132      	bne.n	800be44 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	015a      	lsls	r2, r3, #5
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	4413      	add	r3, r2
 800bde6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	0151      	lsls	r1, r2, #5
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	440a      	add	r2, r1
 800bdf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bdfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	015a      	lsls	r2, r3, #5
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	4413      	add	r3, r2
 800be0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	0151      	lsls	r1, r2, #5
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	440a      	add	r2, r1
 800be18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	015a      	lsls	r2, r3, #5
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	4413      	add	r3, r2
 800be2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	0151      	lsls	r1, r2, #5
 800be34:	697a      	ldr	r2, [r7, #20]
 800be36:	440a      	add	r2, r1
 800be38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be3c:	0cdb      	lsrs	r3, r3, #19
 800be3e:	04db      	lsls	r3, r3, #19
 800be40:	6113      	str	r3, [r2, #16]
 800be42:	e04e      	b.n	800bee2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	015a      	lsls	r2, r3, #5
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	4413      	add	r3, r2
 800be4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	0151      	lsls	r1, r2, #5
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	440a      	add	r2, r1
 800be5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be5e:	0cdb      	lsrs	r3, r3, #19
 800be60:	04db      	lsls	r3, r3, #19
 800be62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	015a      	lsls	r2, r3, #5
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	4413      	add	r3, r2
 800be6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be70:	691b      	ldr	r3, [r3, #16]
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	0151      	lsls	r1, r2, #5
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	440a      	add	r2, r1
 800be7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be86:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	695a      	ldr	r2, [r3, #20]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	429a      	cmp	r2, r3
 800be92:	d903      	bls.n	800be9c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	689a      	ldr	r2, [r3, #8]
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	015a      	lsls	r2, r3, #5
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	4413      	add	r3, r2
 800bea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	0151      	lsls	r1, r2, #5
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	440a      	add	r2, r1
 800beb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800beba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec8:	691a      	ldr	r2, [r3, #16]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bed2:	6939      	ldr	r1, [r7, #16]
 800bed4:	0148      	lsls	r0, r1, #5
 800bed6:	6979      	ldr	r1, [r7, #20]
 800bed8:	4401      	add	r1, r0
 800beda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bede:	4313      	orrs	r3, r2
 800bee0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bee2:	79fb      	ldrb	r3, [r7, #7]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d11e      	bne.n	800bf26 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d009      	beq.n	800bf04 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	015a      	lsls	r2, r3, #5
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	4413      	add	r3, r2
 800bef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800befc:	461a      	mov	r2, r3
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	015a      	lsls	r2, r3, #5
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	693a      	ldr	r2, [r7, #16]
 800bf14:	0151      	lsls	r1, r2, #5
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	440a      	add	r2, r1
 800bf1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf22:	6013      	str	r3, [r2, #0]
 800bf24:	e092      	b.n	800c04c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	015a      	lsls	r2, r3, #5
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	0151      	lsls	r1, r2, #5
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	440a      	add	r2, r1
 800bf3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf44:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	695b      	ldr	r3, [r3, #20]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d07e      	beq.n	800c04c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	f003 030f 	and.w	r3, r3, #15
 800bf5e:	2101      	movs	r1, #1
 800bf60:	fa01 f303 	lsl.w	r3, r1, r3
 800bf64:	6979      	ldr	r1, [r7, #20]
 800bf66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	634b      	str	r3, [r1, #52]	; 0x34
 800bf6e:	e06d      	b.n	800c04c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	0151      	lsls	r1, r2, #5
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	440a      	add	r2, r1
 800bf86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf8a:	0cdb      	lsrs	r3, r3, #19
 800bf8c:	04db      	lsls	r3, r3, #19
 800bf8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bfae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bfb2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	015a      	lsls	r2, r3, #5
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	0151      	lsls	r1, r2, #5
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	440a      	add	r2, r1
 800bfda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	015a      	lsls	r2, r3, #5
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	4413      	add	r3, r2
 800bfec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff0:	691a      	ldr	r2, [r3, #16]
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bffa:	6939      	ldr	r1, [r7, #16]
 800bffc:	0148      	lsls	r0, r1, #5
 800bffe:	6979      	ldr	r1, [r7, #20]
 800c000:	4401      	add	r1, r0
 800c002:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c006:	4313      	orrs	r3, r2
 800c008:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c00a:	79fb      	ldrb	r3, [r7, #7]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d10d      	bne.n	800c02c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d009      	beq.n	800c02c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	68d9      	ldr	r1, [r3, #12]
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	015a      	lsls	r2, r3, #5
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	4413      	add	r3, r2
 800c024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c028:	460a      	mov	r2, r1
 800c02a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	015a      	lsls	r2, r3, #5
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	4413      	add	r3, r2
 800c034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	693a      	ldr	r2, [r7, #16]
 800c03c:	0151      	lsls	r1, r2, #5
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	440a      	add	r2, r1
 800c042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c04a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	371c      	adds	r7, #28
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c05a:	b480      	push	{r7}
 800c05c:	b089      	sub	sp, #36	; 0x24
 800c05e:	af00      	add	r7, sp, #0
 800c060:	60f8      	str	r0, [r7, #12]
 800c062:	60b9      	str	r1, [r7, #8]
 800c064:	4611      	mov	r1, r2
 800c066:	461a      	mov	r2, r3
 800c068:	460b      	mov	r3, r1
 800c06a:	71fb      	strb	r3, [r7, #7]
 800c06c:	4613      	mov	r3, r2
 800c06e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c078:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d123      	bne.n	800c0c8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c080:	88bb      	ldrh	r3, [r7, #4]
 800c082:	3303      	adds	r3, #3
 800c084:	089b      	lsrs	r3, r3, #2
 800c086:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c088:	2300      	movs	r3, #0
 800c08a:	61bb      	str	r3, [r7, #24]
 800c08c:	e018      	b.n	800c0c0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c08e:	79fb      	ldrb	r3, [r7, #7]
 800c090:	031a      	lsls	r2, r3, #12
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	4413      	add	r3, r2
 800c096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c09a:	461a      	mov	r2, r3
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	61bb      	str	r3, [r7, #24]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d3e2      	bcc.n	800c08e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3724      	adds	r7, #36	; 0x24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	b08b      	sub	sp, #44	; 0x2c
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	60f8      	str	r0, [r7, #12]
 800c0de:	60b9      	str	r1, [r7, #8]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c0ec:	88fb      	ldrh	r3, [r7, #6]
 800c0ee:	089b      	lsrs	r3, r3, #2
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c0f4:	88fb      	ldrh	r3, [r7, #6]
 800c0f6:	f003 0303 	and.w	r3, r3, #3
 800c0fa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	623b      	str	r3, [r7, #32]
 800c100:	e014      	b.n	800c12c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	601a      	str	r2, [r3, #0]
    pDest++;
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	3301      	adds	r3, #1
 800c112:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	3301      	adds	r3, #1
 800c118:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11c:	3301      	adds	r3, #1
 800c11e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	3301      	adds	r3, #1
 800c124:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c126:	6a3b      	ldr	r3, [r7, #32]
 800c128:	3301      	adds	r3, #1
 800c12a:	623b      	str	r3, [r7, #32]
 800c12c:	6a3a      	ldr	r2, [r7, #32]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	429a      	cmp	r2, r3
 800c132:	d3e6      	bcc.n	800c102 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c134:	8bfb      	ldrh	r3, [r7, #30]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d01e      	beq.n	800c178 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c144:	461a      	mov	r2, r3
 800c146:	f107 0310 	add.w	r3, r7, #16
 800c14a:	6812      	ldr	r2, [r2, #0]
 800c14c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	fa22 f303 	lsr.w	r3, r2, r3
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	701a      	strb	r2, [r3, #0]
      i++;
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	3301      	adds	r3, #1
 800c164:	623b      	str	r3, [r7, #32]
      pDest++;
 800c166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c168:	3301      	adds	r3, #1
 800c16a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c16c:	8bfb      	ldrh	r3, [r7, #30]
 800c16e:	3b01      	subs	r3, #1
 800c170:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c172:	8bfb      	ldrh	r3, [r7, #30]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1ea      	bne.n	800c14e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	372c      	adds	r7, #44	; 0x2c
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c186:	b480      	push	{r7}
 800c188:	b085      	sub	sp, #20
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d12c      	bne.n	800c1fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	db12      	blt.n	800c1da <USB_EPSetStall+0x54>
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00f      	beq.n	800c1da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	015a      	lsls	r2, r3, #5
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	0151      	lsls	r1, r2, #5
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	440a      	add	r2, r1
 800c1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c1d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	015a      	lsls	r2, r3, #5
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	0151      	lsls	r1, r2, #5
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	440a      	add	r2, r1
 800c1f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1f8:	6013      	str	r3, [r2, #0]
 800c1fa:	e02b      	b.n	800c254 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	015a      	lsls	r2, r3, #5
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4413      	add	r3, r2
 800c204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	db12      	blt.n	800c234 <USB_EPSetStall+0xae>
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00f      	beq.n	800c234 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	015a      	lsls	r2, r3, #5
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	0151      	lsls	r1, r2, #5
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	440a      	add	r2, r1
 800c22a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c22e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c232:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	015a      	lsls	r2, r3, #5
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	0151      	lsls	r1, r2, #5
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	440a      	add	r2, r1
 800c24a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c24e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c252:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c262:	b480      	push	{r7}
 800c264:	b085      	sub	sp, #20
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	785b      	ldrb	r3, [r3, #1]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d128      	bne.n	800c2d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	015a      	lsls	r2, r3, #5
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	4413      	add	r3, r2
 800c286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	0151      	lsls	r1, r2, #5
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	440a      	add	r2, r1
 800c294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c298:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c29c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	78db      	ldrb	r3, [r3, #3]
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d003      	beq.n	800c2ae <USB_EPClearStall+0x4c>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	78db      	ldrb	r3, [r3, #3]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d138      	bne.n	800c320 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	015a      	lsls	r2, r3, #5
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	0151      	lsls	r1, r2, #5
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	440a      	add	r2, r1
 800c2c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2cc:	6013      	str	r3, [r2, #0]
 800c2ce:	e027      	b.n	800c320 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	015a      	lsls	r2, r3, #5
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	0151      	lsls	r1, r2, #5
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	440a      	add	r2, r1
 800c2e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	78db      	ldrb	r3, [r3, #3]
 800c2f4:	2b03      	cmp	r3, #3
 800c2f6:	d003      	beq.n	800c300 <USB_EPClearStall+0x9e>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	78db      	ldrb	r3, [r3, #3]
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d10f      	bne.n	800c320 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	015a      	lsls	r2, r3, #5
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	4413      	add	r3, r2
 800c308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	0151      	lsls	r1, r2, #5
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	440a      	add	r2, r1
 800c316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c31a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c31e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c32e:	b480      	push	{r7}
 800c330:	b085      	sub	sp, #20
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	460b      	mov	r3, r1
 800c338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c34c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c350:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	78fb      	ldrb	r3, [r7, #3]
 800c35c:	011b      	lsls	r3, r3, #4
 800c35e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c362:	68f9      	ldr	r1, [r7, #12]
 800c364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c368:	4313      	orrs	r3, r2
 800c36a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c394:	f023 0303 	bic.w	r3, r3, #3
 800c398:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3a8:	f023 0302 	bic.w	r3, r3, #2
 800c3ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c3d6:	f023 0303 	bic.w	r3, r3, #3
 800c3da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3ea:	f043 0302 	orr.w	r3, r3, #2
 800c3ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c3fe:	b480      	push	{r7}
 800c400:	b085      	sub	sp, #20
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	4013      	ands	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c416:	68fb      	ldr	r3, [r7, #12]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c440:	69db      	ldr	r3, [r3, #28]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	4013      	ands	r3, r2
 800c446:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	0c1b      	lsrs	r3, r3, #16
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c46a:	699b      	ldr	r3, [r3, #24]
 800c46c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c474:	69db      	ldr	r3, [r3, #28]
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	4013      	ands	r3, r2
 800c47a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	b29b      	uxth	r3, r3
}
 800c480:	4618      	mov	r0, r3
 800c482:	3714      	adds	r7, #20
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c49c:	78fb      	ldrb	r3, [r7, #3]
 800c49e:	015a      	lsls	r2, r3, #5
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c4ba:	68bb      	ldr	r3, [r7, #8]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c4ec:	78fb      	ldrb	r3, [r7, #3]
 800c4ee:	f003 030f 	and.w	r3, r3, #15
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f8:	01db      	lsls	r3, r3, #7
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c502:	78fb      	ldrb	r3, [r7, #3]
 800c504:	015a      	lsls	r2, r3, #5
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	4413      	add	r3, r2
 800c50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	4013      	ands	r3, r2
 800c514:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c516:	68bb      	ldr	r3, [r7, #8]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	371c      	adds	r7, #28
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	695b      	ldr	r3, [r3, #20]
 800c530:	f003 0301 	and.w	r3, r3, #1
}
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c55a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c55e:	f023 0307 	bic.w	r3, r3, #7
 800c562:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c576:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
	...

0800c588 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	460b      	mov	r3, r1
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	333c      	adds	r3, #60	; 0x3c
 800c59e:	3304      	adds	r3, #4
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	4a26      	ldr	r2, [pc, #152]	; (800c640 <USB_EP0_OutStart+0xb8>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d90a      	bls.n	800c5c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5bc:	d101      	bne.n	800c5c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	e037      	b.n	800c632 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5f0:	f043 0318 	orr.w	r3, r3, #24
 800c5f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c604:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c608:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c60a:	7afb      	ldrb	r3, [r7, #11]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d10f      	bne.n	800c630 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c616:	461a      	mov	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	697a      	ldr	r2, [r7, #20]
 800c626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c62a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c62e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	371c      	adds	r7, #28
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	4f54300a 	.word	0x4f54300a

0800c644 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c64c:	2300      	movs	r3, #0
 800c64e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3301      	adds	r3, #1
 800c654:	60fb      	str	r3, [r7, #12]
 800c656:	4a13      	ldr	r2, [pc, #76]	; (800c6a4 <USB_CoreReset+0x60>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d901      	bls.n	800c660 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e01a      	b.n	800c696 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	2b00      	cmp	r3, #0
 800c666:	daf3      	bge.n	800c650 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c668:	2300      	movs	r3, #0
 800c66a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	f043 0201 	orr.w	r2, r3, #1
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3301      	adds	r3, #1
 800c67c:	60fb      	str	r3, [r7, #12]
 800c67e:	4a09      	ldr	r2, [pc, #36]	; (800c6a4 <USB_CoreReset+0x60>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d901      	bls.n	800c688 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e006      	b.n	800c696 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	2b01      	cmp	r3, #1
 800c692:	d0f1      	beq.n	800c678 <USB_CoreReset+0x34>

  return HAL_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	00030d40 	.word	0x00030d40

0800c6a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c6ac:	4904      	ldr	r1, [pc, #16]	; (800c6c0 <MX_FATFS_Init+0x18>)
 800c6ae:	4805      	ldr	r0, [pc, #20]	; (800c6c4 <MX_FATFS_Init+0x1c>)
 800c6b0:	f004 ff38 	bl	8011524 <FATFS_LinkDriver>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	4b03      	ldr	r3, [pc, #12]	; (800c6c8 <MX_FATFS_Init+0x20>)
 800c6ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c6bc:	bf00      	nop
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	20013324 	.word	0x20013324
 800c6c4:	20000014 	.word	0x20000014
 800c6c8:	20013328 	.word	0x20013328

0800c6cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c6d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 800c6e6:	79fb      	ldrb	r3, [r7, #7]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7f6 f9e1 	bl	8002ab0 <SD_disk_initialize>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b082      	sub	sp, #8
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	4603      	mov	r3, r0
 800c702:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	4618      	mov	r0, r3
 800c708:	f7f6 fabc 	bl	8002c84 <SD_disk_status>
 800c70c:	4603      	mov	r3, r0
 800c70e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c710:	4618      	mov	r0, r3
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60b9      	str	r1, [r7, #8]
 800c720:	607a      	str	r2, [r7, #4]
 800c722:	603b      	str	r3, [r7, #0]
 800c724:	4603      	mov	r3, r0
 800c726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800c728:	7bf8      	ldrb	r0, [r7, #15]
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	68b9      	ldr	r1, [r7, #8]
 800c730:	f7f6 fabe 	bl	8002cb0 <SD_disk_read>
 800c734:	4603      	mov	r3, r0
 800c736:	b2db      	uxtb	r3, r3
   // return RES_OK;
  /* USER CODE END READ */
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	60b9      	str	r1, [r7, #8]
 800c748:	607a      	str	r2, [r7, #4]
 800c74a:	603b      	str	r3, [r7, #0]
 800c74c:	4603      	mov	r3, r0
 800c74e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800c750:	7bf8      	ldrb	r0, [r7, #15]
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	68b9      	ldr	r1, [r7, #8]
 800c758:	f7f6 fb14 	bl	8002d84 <SD_disk_write>
 800c75c:	4603      	mov	r3, r0
 800c75e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800c760:	4618      	mov	r0, r3
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	4603      	mov	r3, r0
 800c770:	603a      	str	r2, [r7, #0]
 800c772:	71fb      	strb	r3, [r7, #7]
 800c774:	460b      	mov	r3, r1
 800c776:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv,cmd, buff);
 800c778:	79fb      	ldrb	r3, [r7, #7]
 800c77a:	79b9      	ldrb	r1, [r7, #6]
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	4618      	mov	r0, r3
 800c780:	f7f6 fb84 	bl	8002e8c <SD_disk_ioctl>
 800c784:	4603      	mov	r3, r0
 800c786:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	460b      	mov	r3, r1
 800c79a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c79c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c7a0:	f009 fc54 	bl	801604c <USBD_static_malloc>
 800c7a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d105      	bne.n	800c7b8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	e066      	b.n	800c886 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	7c1b      	ldrb	r3, [r3, #16]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d119      	bne.n	800c7fc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c7c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	2181      	movs	r1, #129	; 0x81
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f009 fb18 	bl	8015e06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c7dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f009 fb0e 	bl	8015e06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2210      	movs	r2, #16
 800c7f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c7fa:	e016      	b.n	800c82a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c7fc:	2340      	movs	r3, #64	; 0x40
 800c7fe:	2202      	movs	r2, #2
 800c800:	2181      	movs	r1, #129	; 0x81
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f009 faff 	bl	8015e06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c80e:	2340      	movs	r3, #64	; 0x40
 800c810:	2202      	movs	r2, #2
 800c812:	2101      	movs	r1, #1
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f009 faf6 	bl	8015e06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2210      	movs	r2, #16
 800c826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c82a:	2308      	movs	r3, #8
 800c82c:	2203      	movs	r2, #3
 800c82e:	2182      	movs	r1, #130	; 0x82
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f009 fae8 	bl	8015e06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	7c1b      	ldrb	r3, [r3, #16]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d109      	bne.n	800c874 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c86a:	2101      	movs	r1, #1
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f009 fbb9 	bl	8015fe4 <USBD_LL_PrepareReceive>
 800c872:	e007      	b.n	800c884 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c87a:	2340      	movs	r3, #64	; 0x40
 800c87c:	2101      	movs	r1, #1
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f009 fbb0 	bl	8015fe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b082      	sub	sp, #8
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	460b      	mov	r3, r1
 800c898:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c89a:	2181      	movs	r1, #129	; 0x81
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f009 fad8 	bl	8015e52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c8a8:	2101      	movs	r1, #1
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f009 fad1 	bl	8015e52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c8b8:	2182      	movs	r1, #130	; 0x82
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f009 fac9 	bl	8015e52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00e      	beq.n	800c8f8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f009 fbbc 	bl	8016068 <USBD_static_free>
    pdev->pClassData = NULL;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c914:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c91a:	2300      	movs	r3, #0
 800c91c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d101      	bne.n	800c92c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c928:	2303      	movs	r3, #3
 800c92a:	e0af      	b.n	800ca8c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c934:	2b00      	cmp	r3, #0
 800c936:	d03f      	beq.n	800c9b8 <USBD_CDC_Setup+0xb4>
 800c938:	2b20      	cmp	r3, #32
 800c93a:	f040 809f 	bne.w	800ca7c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	88db      	ldrh	r3, [r3, #6]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d02e      	beq.n	800c9a4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	b25b      	sxtb	r3, r3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	da16      	bge.n	800c97e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c95c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	88d2      	ldrh	r2, [r2, #6]
 800c962:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	88db      	ldrh	r3, [r3, #6]
 800c968:	2b07      	cmp	r3, #7
 800c96a:	bf28      	it	cs
 800c96c:	2307      	movcs	r3, #7
 800c96e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	89fa      	ldrh	r2, [r7, #14]
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 fb19 	bl	800dfae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c97c:	e085      	b.n	800ca8a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	785a      	ldrb	r2, [r3, #1]
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	88db      	ldrh	r3, [r3, #6]
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c994:	6939      	ldr	r1, [r7, #16]
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	88db      	ldrh	r3, [r3, #6]
 800c99a:	461a      	mov	r2, r3
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f001 fb32 	bl	800e006 <USBD_CtlPrepareRx>
      break;
 800c9a2:	e072      	b.n	800ca8a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	7850      	ldrb	r0, [r2, #1]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	6839      	ldr	r1, [r7, #0]
 800c9b4:	4798      	blx	r3
      break;
 800c9b6:	e068      	b.n	800ca8a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	785b      	ldrb	r3, [r3, #1]
 800c9bc:	2b0b      	cmp	r3, #11
 800c9be:	d852      	bhi.n	800ca66 <USBD_CDC_Setup+0x162>
 800c9c0:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <USBD_CDC_Setup+0xc4>)
 800c9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c6:	bf00      	nop
 800c9c8:	0800c9f9 	.word	0x0800c9f9
 800c9cc:	0800ca75 	.word	0x0800ca75
 800c9d0:	0800ca67 	.word	0x0800ca67
 800c9d4:	0800ca67 	.word	0x0800ca67
 800c9d8:	0800ca67 	.word	0x0800ca67
 800c9dc:	0800ca67 	.word	0x0800ca67
 800c9e0:	0800ca67 	.word	0x0800ca67
 800c9e4:	0800ca67 	.word	0x0800ca67
 800c9e8:	0800ca67 	.word	0x0800ca67
 800c9ec:	0800ca67 	.word	0x0800ca67
 800c9f0:	0800ca23 	.word	0x0800ca23
 800c9f4:	0800ca4d 	.word	0x0800ca4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b03      	cmp	r3, #3
 800ca02:	d107      	bne.n	800ca14 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ca04:	f107 030a 	add.w	r3, r7, #10
 800ca08:	2202      	movs	r2, #2
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f001 face 	bl	800dfae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca12:	e032      	b.n	800ca7a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f001 fa58 	bl	800decc <USBD_CtlError>
            ret = USBD_FAIL;
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	75fb      	strb	r3, [r7, #23]
          break;
 800ca20:	e02b      	b.n	800ca7a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d107      	bne.n	800ca3e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ca2e:	f107 030d 	add.w	r3, r7, #13
 800ca32:	2201      	movs	r2, #1
 800ca34:	4619      	mov	r1, r3
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f001 fab9 	bl	800dfae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca3c:	e01d      	b.n	800ca7a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ca3e:	6839      	ldr	r1, [r7, #0]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f001 fa43 	bl	800decc <USBD_CtlError>
            ret = USBD_FAIL;
 800ca46:	2303      	movs	r3, #3
 800ca48:	75fb      	strb	r3, [r7, #23]
          break;
 800ca4a:	e016      	b.n	800ca7a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b03      	cmp	r3, #3
 800ca56:	d00f      	beq.n	800ca78 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f001 fa36 	bl	800decc <USBD_CtlError>
            ret = USBD_FAIL;
 800ca60:	2303      	movs	r3, #3
 800ca62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ca64:	e008      	b.n	800ca78 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f001 fa2f 	bl	800decc <USBD_CtlError>
          ret = USBD_FAIL;
 800ca6e:	2303      	movs	r3, #3
 800ca70:	75fb      	strb	r3, [r7, #23]
          break;
 800ca72:	e002      	b.n	800ca7a <USBD_CDC_Setup+0x176>
          break;
 800ca74:	bf00      	nop
 800ca76:	e008      	b.n	800ca8a <USBD_CDC_Setup+0x186>
          break;
 800ca78:	bf00      	nop
      }
      break;
 800ca7a:	e006      	b.n	800ca8a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f001 fa24 	bl	800decc <USBD_CtlError>
      ret = USBD_FAIL;
 800ca84:	2303      	movs	r3, #3
 800ca86:	75fb      	strb	r3, [r7, #23]
      break;
 800ca88:	bf00      	nop
  }

  return (uint8_t)ret;
 800ca8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800caa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d101      	bne.n	800cab6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cab2:	2303      	movs	r3, #3
 800cab4:	e04f      	b.n	800cb56 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cabc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cabe:	78fa      	ldrb	r2, [r7, #3]
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4613      	mov	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	440b      	add	r3, r1
 800cacc:	3318      	adds	r3, #24
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d029      	beq.n	800cb28 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cad4:	78fa      	ldrb	r2, [r7, #3]
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	4613      	mov	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	440b      	add	r3, r1
 800cae2:	3318      	adds	r3, #24
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	78f9      	ldrb	r1, [r7, #3]
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	460b      	mov	r3, r1
 800caec:	00db      	lsls	r3, r3, #3
 800caee:	1a5b      	subs	r3, r3, r1
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4403      	add	r3, r0
 800caf4:	3344      	adds	r3, #68	; 0x44
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	fbb2 f1f3 	udiv	r1, r2, r3
 800cafc:	fb03 f301 	mul.w	r3, r3, r1
 800cb00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d110      	bne.n	800cb28 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cb06:	78fa      	ldrb	r2, [r7, #3]
 800cb08:	6879      	ldr	r1, [r7, #4]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	4413      	add	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	440b      	add	r3, r1
 800cb14:	3318      	adds	r3, #24
 800cb16:	2200      	movs	r2, #0
 800cb18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cb1a:	78f9      	ldrb	r1, [r7, #3]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	2200      	movs	r2, #0
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f009 fa3e 	bl	8015fa2 <USBD_LL_Transmit>
 800cb26:	e015      	b.n	800cb54 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00b      	beq.n	800cb54 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cb50:	78fa      	ldrb	r2, [r7, #3]
 800cb52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	460b      	mov	r3, r1
 800cb68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb7c:	2303      	movs	r3, #3
 800cb7e:	e015      	b.n	800cbac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cb80:	78fb      	ldrb	r3, [r7, #3]
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f009 fa4e 	bl	8016026 <USBD_LL_GetRxDataSize>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cba6:	4611      	mov	r1, r2
 800cba8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d101      	bne.n	800cbce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	e01b      	b.n	800cc06 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d015      	beq.n	800cc04 <USBD_CDC_EP0_RxReady+0x50>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cbde:	2bff      	cmp	r3, #255	; 0xff
 800cbe0:	d010      	beq.n	800cc04 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cbf0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cbf8:	b292      	uxth	r2, r2
 800cbfa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	22ff      	movs	r2, #255	; 0xff
 800cc00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
	...

0800cc10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2243      	movs	r2, #67	; 0x43
 800cc1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cc1e:	4b03      	ldr	r3, [pc, #12]	; (800cc2c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	200000b0 	.word	0x200000b0

0800cc30 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2243      	movs	r2, #67	; 0x43
 800cc3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cc3e:	4b03      	ldr	r3, [pc, #12]	; (800cc4c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	2000006c 	.word	0x2000006c

0800cc50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2243      	movs	r2, #67	; 0x43
 800cc5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cc5e:	4b03      	ldr	r3, [pc, #12]	; (800cc6c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	200000f4 	.word	0x200000f4

0800cc70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	220a      	movs	r2, #10
 800cc7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cc7e:	4b03      	ldr	r3, [pc, #12]	; (800cc8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	20000028 	.word	0x20000028

0800cc90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d101      	bne.n	800cca4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cca0:	2303      	movs	r3, #3
 800cca2:	e004      	b.n	800ccae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	683a      	ldr	r2, [r7, #0]
 800cca8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	370c      	adds	r7, #12
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b087      	sub	sp, #28
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	60b9      	str	r1, [r7, #8]
 800ccc4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cccc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	e008      	b.n	800ccea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	371c      	adds	r7, #28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b085      	sub	sp, #20
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e004      	b.n	800cd1c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	683a      	ldr	r2, [r7, #0]
 800cd16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd46:	2303      	movs	r3, #3
 800cd48:	e01a      	b.n	800cd80 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d114      	bne.n	800cd7e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cd72:	2181      	movs	r1, #129	; 0x81
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f009 f914 	bl	8015fa2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e016      	b.n	800cdd4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	7c1b      	ldrb	r3, [r3, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d109      	bne.n	800cdc2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cdb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdb8:	2101      	movs	r1, #1
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f009 f912 	bl	8015fe4 <USBD_LL_PrepareReceive>
 800cdc0:	e007      	b.n	800cdd2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cdc8:	2340      	movs	r3, #64	; 0x40
 800cdca:	2101      	movs	r1, #1
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f009 f909 	bl	8015fe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	4613      	mov	r3, r2
 800cde8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	e01f      	b.n	800ce34 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	79fa      	ldrb	r2, [r7, #7]
 800ce26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f008 ff85 	bl	8015d38 <USBD_LL_Init>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3718      	adds	r7, #24
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce46:	2300      	movs	r3, #0
 800ce48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e016      	b.n	800ce82 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00b      	beq.n	800ce80 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce70:	f107 020e 	add.w	r2, r7, #14
 800ce74:	4610      	mov	r0, r2
 800ce76:	4798      	blx	r3
 800ce78:	4602      	mov	r2, r0
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b082      	sub	sp, #8
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f008 ff9c 	bl	8015dd0 <USBD_LL_Start>
 800ce98:	4603      	mov	r3, r0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cea2:	b480      	push	{r7}
 800cea4:	b083      	sub	sp, #12
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	460b      	mov	r3, r1
 800cec2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cec4:	2303      	movs	r3, #3
 800cec6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d009      	beq.n	800cee6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	4611      	mov	r1, r2
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	4798      	blx	r3
 800cee2:	4603      	mov	r3, r0
 800cee4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d007      	beq.n	800cf16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	78fa      	ldrb	r2, [r7, #3]
 800cf10:	4611      	mov	r1, r2
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	4798      	blx	r3
  }

  return USBD_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 ff90 	bl	800de58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cf46:	461a      	mov	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf54:	f003 031f 	and.w	r3, r3, #31
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d01a      	beq.n	800cf92 <USBD_LL_SetupStage+0x72>
 800cf5c:	2b02      	cmp	r3, #2
 800cf5e:	d822      	bhi.n	800cfa6 <USBD_LL_SetupStage+0x86>
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <USBD_LL_SetupStage+0x4a>
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d00a      	beq.n	800cf7e <USBD_LL_SetupStage+0x5e>
 800cf68:	e01d      	b.n	800cfa6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fa62 	bl	800d43c <USBD_StdDevReq>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf7c:	e020      	b.n	800cfc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fac6 	bl	800d518 <USBD_StdItfReq>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf90:	e016      	b.n	800cfc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fb05 	bl	800d5aa <USBD_StdEPReq>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]
      break;
 800cfa4:	e00c      	b.n	800cfc0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cfac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f008 ff6b 	bl	8015e90 <USBD_LL_StallEP>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	73fb      	strb	r3, [r7, #15]
      break;
 800cfbe:	bf00      	nop
  }

  return ret;
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b086      	sub	sp, #24
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	60f8      	str	r0, [r7, #12]
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cfd8:	7afb      	ldrb	r3, [r7, #11]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d138      	bne.n	800d050 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cfe4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	d14a      	bne.n	800d086 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	689a      	ldr	r2, [r3, #8]
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d913      	bls.n	800d024 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	689a      	ldr	r2, [r3, #8]
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	1ad2      	subs	r2, r2, r3
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	68da      	ldr	r2, [r3, #12]
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	4293      	cmp	r3, r2
 800d014:	bf28      	it	cs
 800d016:	4613      	movcs	r3, r2
 800d018:	461a      	mov	r2, r3
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f001 f80f 	bl	800e040 <USBD_CtlContinueRx>
 800d022:	e030      	b.n	800d086 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2b03      	cmp	r3, #3
 800d02e:	d10b      	bne.n	800d048 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d005      	beq.n	800d048 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d042:	691b      	ldr	r3, [r3, #16]
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f001 f80a 	bl	800e062 <USBD_CtlSendStatus>
 800d04e:	e01a      	b.n	800d086 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d056:	b2db      	uxtb	r3, r3
 800d058:	2b03      	cmp	r3, #3
 800d05a:	d114      	bne.n	800d086 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00e      	beq.n	800d086 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d06e:	699b      	ldr	r3, [r3, #24]
 800d070:	7afa      	ldrb	r2, [r7, #11]
 800d072:	4611      	mov	r1, r2
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	4798      	blx	r3
 800d078:	4603      	mov	r3, r0
 800d07a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d082:	7dfb      	ldrb	r3, [r7, #23]
 800d084:	e000      	b.n	800d088 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3718      	adds	r7, #24
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	460b      	mov	r3, r1
 800d09a:	607a      	str	r2, [r7, #4]
 800d09c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d09e:	7afb      	ldrb	r3, [r7, #11]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d16b      	bne.n	800d17c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	3314      	adds	r3, #20
 800d0a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d156      	bne.n	800d162 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	689a      	ldr	r2, [r3, #8]
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d914      	bls.n	800d0ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	1ad2      	subs	r2, r2, r3
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	6879      	ldr	r1, [r7, #4]
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f000 ff84 	bl	800dfe4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0dc:	2300      	movs	r3, #0
 800d0de:	2200      	movs	r2, #0
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f008 ff7e 	bl	8015fe4 <USBD_LL_PrepareReceive>
 800d0e8:	e03b      	b.n	800d162 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	68da      	ldr	r2, [r3, #12]
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d11c      	bne.n	800d130 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d316      	bcc.n	800d130 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d20f      	bcs.n	800d130 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d110:	2200      	movs	r2, #0
 800d112:	2100      	movs	r1, #0
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f000 ff65 	bl	800dfe4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d122:	2300      	movs	r3, #0
 800d124:	2200      	movs	r2, #0
 800d126:	2100      	movs	r1, #0
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f008 ff5b 	bl	8015fe4 <USBD_LL_PrepareReceive>
 800d12e:	e018      	b.n	800d162 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b03      	cmp	r3, #3
 800d13a:	d10b      	bne.n	800d154 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d005      	beq.n	800d154 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d154:	2180      	movs	r1, #128	; 0x80
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f008 fe9a 	bl	8015e90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f000 ff93 	bl	800e088 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d122      	bne.n	800d1b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f7ff fe98 	bl	800cea2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d17a:	e01a      	b.n	800d1b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b03      	cmp	r3, #3
 800d186:	d114      	bne.n	800d1b2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d18e:	695b      	ldr	r3, [r3, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00e      	beq.n	800d1b2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d19a:	695b      	ldr	r3, [r3, #20]
 800d19c:	7afa      	ldrb	r2, [r7, #11]
 800d19e:	4611      	mov	r1, r2
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	4798      	blx	r3
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d1a8:	7dfb      	ldrb	r3, [r7, #23]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	e000      	b.n	800d1b4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3718      	adds	r7, #24
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d101      	bne.n	800d1f0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	e02f      	b.n	800d250 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00f      	beq.n	800d21a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d009      	beq.n	800d21a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	6852      	ldr	r2, [r2, #4]
 800d212:	b2d2      	uxtb	r2, r2
 800d214:	4611      	mov	r1, r2
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d21a:	2340      	movs	r3, #64	; 0x40
 800d21c:	2200      	movs	r2, #0
 800d21e:	2100      	movs	r1, #0
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f008 fdf0 	bl	8015e06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2240      	movs	r2, #64	; 0x40
 800d232:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d236:	2340      	movs	r3, #64	; 0x40
 800d238:	2200      	movs	r2, #0
 800d23a:	2180      	movs	r1, #128	; 0x80
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f008 fde2 	bl	8015e06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2201      	movs	r2, #1
 800d246:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2240      	movs	r2, #64	; 0x40
 800d24c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	78fa      	ldrb	r2, [r7, #3]
 800d268:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d286:	b2da      	uxtb	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2204      	movs	r2, #4
 800d292:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d296:	2300      	movs	r3, #0
}
 800d298:	4618      	mov	r0, r3
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b04      	cmp	r3, #4
 800d2b6:	d106      	bne.n	800d2c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d101      	bne.n	800d2ea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	e012      	b.n	800d310 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b03      	cmp	r3, #3
 800d2f4:	d10b      	bne.n	800d30e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2fc:	69db      	ldr	r3, [r3, #28]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d005      	beq.n	800d30e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d308:	69db      	ldr	r3, [r3, #28]
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d32e:	2303      	movs	r3, #3
 800d330:	e014      	b.n	800d35c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d10d      	bne.n	800d35a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d007      	beq.n	800d35a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	78fa      	ldrb	r2, [r7, #3]
 800d354:	4611      	mov	r1, r2
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d37a:	2303      	movs	r3, #3
 800d37c:	e014      	b.n	800d3a8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b03      	cmp	r3, #3
 800d388:	d10d      	bne.n	800d3a6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d392:	2b00      	cmp	r3, #0
 800d394:	d007      	beq.n	800d3a6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39e:	78fa      	ldrb	r2, [r7, #3]
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	370c      	adds	r7, #12
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr

0800d3c6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b082      	sub	sp, #8
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d009      	beq.n	800d3f4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	6852      	ldr	r2, [r2, #4]
 800d3ec:	b2d2      	uxtb	r2, r2
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	4798      	blx	r3
  }

  return USBD_OK;
 800d3f4:	2300      	movs	r3, #0
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d3fe:	b480      	push	{r7}
 800d400:	b087      	sub	sp, #28
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	3301      	adds	r3, #1
 800d414:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d41c:	8a3b      	ldrh	r3, [r7, #16]
 800d41e:	021b      	lsls	r3, r3, #8
 800d420:	b21a      	sxth	r2, r3
 800d422:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d426:	4313      	orrs	r3, r2
 800d428:	b21b      	sxth	r3, r3
 800d42a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d42c:	89fb      	ldrh	r3, [r7, #14]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	371c      	adds	r7, #28
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
	...

0800d43c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d452:	2b40      	cmp	r3, #64	; 0x40
 800d454:	d005      	beq.n	800d462 <USBD_StdDevReq+0x26>
 800d456:	2b40      	cmp	r3, #64	; 0x40
 800d458:	d853      	bhi.n	800d502 <USBD_StdDevReq+0xc6>
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00b      	beq.n	800d476 <USBD_StdDevReq+0x3a>
 800d45e:	2b20      	cmp	r3, #32
 800d460:	d14f      	bne.n	800d502 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	6839      	ldr	r1, [r7, #0]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	4798      	blx	r3
 800d470:	4603      	mov	r3, r0
 800d472:	73fb      	strb	r3, [r7, #15]
      break;
 800d474:	e04a      	b.n	800d50c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	785b      	ldrb	r3, [r3, #1]
 800d47a:	2b09      	cmp	r3, #9
 800d47c:	d83b      	bhi.n	800d4f6 <USBD_StdDevReq+0xba>
 800d47e:	a201      	add	r2, pc, #4	; (adr r2, 800d484 <USBD_StdDevReq+0x48>)
 800d480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d484:	0800d4d9 	.word	0x0800d4d9
 800d488:	0800d4ed 	.word	0x0800d4ed
 800d48c:	0800d4f7 	.word	0x0800d4f7
 800d490:	0800d4e3 	.word	0x0800d4e3
 800d494:	0800d4f7 	.word	0x0800d4f7
 800d498:	0800d4b7 	.word	0x0800d4b7
 800d49c:	0800d4ad 	.word	0x0800d4ad
 800d4a0:	0800d4f7 	.word	0x0800d4f7
 800d4a4:	0800d4cf 	.word	0x0800d4cf
 800d4a8:	0800d4c1 	.word	0x0800d4c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d4ac:	6839      	ldr	r1, [r7, #0]
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f9de 	bl	800d870 <USBD_GetDescriptor>
          break;
 800d4b4:	e024      	b.n	800d500 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fb43 	bl	800db44 <USBD_SetAddress>
          break;
 800d4be:	e01f      	b.n	800d500 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fb82 	bl	800dbcc <USBD_SetConfig>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	73fb      	strb	r3, [r7, #15]
          break;
 800d4cc:	e018      	b.n	800d500 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d4ce:	6839      	ldr	r1, [r7, #0]
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fc21 	bl	800dd18 <USBD_GetConfig>
          break;
 800d4d6:	e013      	b.n	800d500 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 fc52 	bl	800dd84 <USBD_GetStatus>
          break;
 800d4e0:	e00e      	b.n	800d500 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 fc81 	bl	800ddec <USBD_SetFeature>
          break;
 800d4ea:	e009      	b.n	800d500 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 fc90 	bl	800de14 <USBD_ClrFeature>
          break;
 800d4f4:	e004      	b.n	800d500 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d4f6:	6839      	ldr	r1, [r7, #0]
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fce7 	bl	800decc <USBD_CtlError>
          break;
 800d4fe:	bf00      	nop
      }
      break;
 800d500:	e004      	b.n	800d50c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fce1 	bl	800decc <USBD_CtlError>
      break;
 800d50a:	bf00      	nop
  }

  return ret;
 800d50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop

0800d518 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d522:	2300      	movs	r3, #0
 800d524:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d52e:	2b40      	cmp	r3, #64	; 0x40
 800d530:	d005      	beq.n	800d53e <USBD_StdItfReq+0x26>
 800d532:	2b40      	cmp	r3, #64	; 0x40
 800d534:	d82f      	bhi.n	800d596 <USBD_StdItfReq+0x7e>
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <USBD_StdItfReq+0x26>
 800d53a:	2b20      	cmp	r3, #32
 800d53c:	d12b      	bne.n	800d596 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d544:	b2db      	uxtb	r3, r3
 800d546:	3b01      	subs	r3, #1
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d81d      	bhi.n	800d588 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	889b      	ldrh	r3, [r3, #4]
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b01      	cmp	r3, #1
 800d554:	d813      	bhi.n	800d57e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	6839      	ldr	r1, [r7, #0]
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	4798      	blx	r3
 800d564:	4603      	mov	r3, r0
 800d566:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	88db      	ldrh	r3, [r3, #6]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d110      	bne.n	800d592 <USBD_StdItfReq+0x7a>
 800d570:	7bfb      	ldrb	r3, [r7, #15]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10d      	bne.n	800d592 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fd73 	bl	800e062 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d57c:	e009      	b.n	800d592 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d57e:	6839      	ldr	r1, [r7, #0]
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 fca3 	bl	800decc <USBD_CtlError>
          break;
 800d586:	e004      	b.n	800d592 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fc9e 	bl	800decc <USBD_CtlError>
          break;
 800d590:	e000      	b.n	800d594 <USBD_StdItfReq+0x7c>
          break;
 800d592:	bf00      	nop
      }
      break;
 800d594:	e004      	b.n	800d5a0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 fc97 	bl	800decc <USBD_CtlError>
      break;
 800d59e:	bf00      	nop
  }

  return ret;
 800d5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b084      	sub	sp, #16
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	889b      	ldrh	r3, [r3, #4]
 800d5bc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d5c6:	2b40      	cmp	r3, #64	; 0x40
 800d5c8:	d007      	beq.n	800d5da <USBD_StdEPReq+0x30>
 800d5ca:	2b40      	cmp	r3, #64	; 0x40
 800d5cc:	f200 8145 	bhi.w	800d85a <USBD_StdEPReq+0x2b0>
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00c      	beq.n	800d5ee <USBD_StdEPReq+0x44>
 800d5d4:	2b20      	cmp	r3, #32
 800d5d6:	f040 8140 	bne.w	800d85a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	4798      	blx	r3
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ec:	e13a      	b.n	800d864 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	785b      	ldrb	r3, [r3, #1]
 800d5f2:	2b03      	cmp	r3, #3
 800d5f4:	d007      	beq.n	800d606 <USBD_StdEPReq+0x5c>
 800d5f6:	2b03      	cmp	r3, #3
 800d5f8:	f300 8129 	bgt.w	800d84e <USBD_StdEPReq+0x2a4>
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d07f      	beq.n	800d700 <USBD_StdEPReq+0x156>
 800d600:	2b01      	cmp	r3, #1
 800d602:	d03c      	beq.n	800d67e <USBD_StdEPReq+0xd4>
 800d604:	e123      	b.n	800d84e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d002      	beq.n	800d618 <USBD_StdEPReq+0x6e>
 800d612:	2b03      	cmp	r3, #3
 800d614:	d016      	beq.n	800d644 <USBD_StdEPReq+0x9a>
 800d616:	e02c      	b.n	800d672 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d618:	7bbb      	ldrb	r3, [r7, #14]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00d      	beq.n	800d63a <USBD_StdEPReq+0x90>
 800d61e:	7bbb      	ldrb	r3, [r7, #14]
 800d620:	2b80      	cmp	r3, #128	; 0x80
 800d622:	d00a      	beq.n	800d63a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d624:	7bbb      	ldrb	r3, [r7, #14]
 800d626:	4619      	mov	r1, r3
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f008 fc31 	bl	8015e90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d62e:	2180      	movs	r1, #128	; 0x80
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f008 fc2d 	bl	8015e90 <USBD_LL_StallEP>
 800d636:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d638:	e020      	b.n	800d67c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d63a:	6839      	ldr	r1, [r7, #0]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 fc45 	bl	800decc <USBD_CtlError>
              break;
 800d642:	e01b      	b.n	800d67c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	885b      	ldrh	r3, [r3, #2]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10e      	bne.n	800d66a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d64c:	7bbb      	ldrb	r3, [r7, #14]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00b      	beq.n	800d66a <USBD_StdEPReq+0xc0>
 800d652:	7bbb      	ldrb	r3, [r7, #14]
 800d654:	2b80      	cmp	r3, #128	; 0x80
 800d656:	d008      	beq.n	800d66a <USBD_StdEPReq+0xc0>
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	88db      	ldrh	r3, [r3, #6]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d104      	bne.n	800d66a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d660:	7bbb      	ldrb	r3, [r7, #14]
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f008 fc13 	bl	8015e90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fcf9 	bl	800e062 <USBD_CtlSendStatus>

              break;
 800d670:	e004      	b.n	800d67c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fc29 	bl	800decc <USBD_CtlError>
              break;
 800d67a:	bf00      	nop
          }
          break;
 800d67c:	e0ec      	b.n	800d858 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d684:	b2db      	uxtb	r3, r3
 800d686:	2b02      	cmp	r3, #2
 800d688:	d002      	beq.n	800d690 <USBD_StdEPReq+0xe6>
 800d68a:	2b03      	cmp	r3, #3
 800d68c:	d016      	beq.n	800d6bc <USBD_StdEPReq+0x112>
 800d68e:	e030      	b.n	800d6f2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d690:	7bbb      	ldrb	r3, [r7, #14]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00d      	beq.n	800d6b2 <USBD_StdEPReq+0x108>
 800d696:	7bbb      	ldrb	r3, [r7, #14]
 800d698:	2b80      	cmp	r3, #128	; 0x80
 800d69a:	d00a      	beq.n	800d6b2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d69c:	7bbb      	ldrb	r3, [r7, #14]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f008 fbf5 	bl	8015e90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6a6:	2180      	movs	r1, #128	; 0x80
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f008 fbf1 	bl	8015e90 <USBD_LL_StallEP>
 800d6ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d6b0:	e025      	b.n	800d6fe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d6b2:	6839      	ldr	r1, [r7, #0]
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fc09 	bl	800decc <USBD_CtlError>
              break;
 800d6ba:	e020      	b.n	800d6fe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	885b      	ldrh	r3, [r3, #2]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d11b      	bne.n	800d6fc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
 800d6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d004      	beq.n	800d6d8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d6ce:	7bbb      	ldrb	r3, [r7, #14]
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f008 fbfb 	bl	8015ece <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 fcc2 	bl	800e062 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	4798      	blx	r3
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d6f0:	e004      	b.n	800d6fc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fbe9 	bl	800decc <USBD_CtlError>
              break;
 800d6fa:	e000      	b.n	800d6fe <USBD_StdEPReq+0x154>
              break;
 800d6fc:	bf00      	nop
          }
          break;
 800d6fe:	e0ab      	b.n	800d858 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d706:	b2db      	uxtb	r3, r3
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d002      	beq.n	800d712 <USBD_StdEPReq+0x168>
 800d70c:	2b03      	cmp	r3, #3
 800d70e:	d032      	beq.n	800d776 <USBD_StdEPReq+0x1cc>
 800d710:	e097      	b.n	800d842 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d712:	7bbb      	ldrb	r3, [r7, #14]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d007      	beq.n	800d728 <USBD_StdEPReq+0x17e>
 800d718:	7bbb      	ldrb	r3, [r7, #14]
 800d71a:	2b80      	cmp	r3, #128	; 0x80
 800d71c:	d004      	beq.n	800d728 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d71e:	6839      	ldr	r1, [r7, #0]
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 fbd3 	bl	800decc <USBD_CtlError>
                break;
 800d726:	e091      	b.n	800d84c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	da0b      	bge.n	800d748 <USBD_StdEPReq+0x19e>
 800d730:	7bbb      	ldrb	r3, [r7, #14]
 800d732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d736:	4613      	mov	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	3310      	adds	r3, #16
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	4413      	add	r3, r2
 800d744:	3304      	adds	r3, #4
 800d746:	e00b      	b.n	800d760 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d748:	7bbb      	ldrb	r3, [r7, #14]
 800d74a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d74e:	4613      	mov	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	4413      	add	r3, r2
 800d75e:	3304      	adds	r3, #4
 800d760:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2202      	movs	r2, #2
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fc1d 	bl	800dfae <USBD_CtlSendData>
              break;
 800d774:	e06a      	b.n	800d84c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	da11      	bge.n	800d7a2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d77e:	7bbb      	ldrb	r3, [r7, #14]
 800d780:	f003 020f 	and.w	r2, r3, #15
 800d784:	6879      	ldr	r1, [r7, #4]
 800d786:	4613      	mov	r3, r2
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	4413      	add	r3, r2
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	440b      	add	r3, r1
 800d790:	3324      	adds	r3, #36	; 0x24
 800d792:	881b      	ldrh	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d117      	bne.n	800d7c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d798:	6839      	ldr	r1, [r7, #0]
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 fb96 	bl	800decc <USBD_CtlError>
                  break;
 800d7a0:	e054      	b.n	800d84c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d7a2:	7bbb      	ldrb	r3, [r7, #14]
 800d7a4:	f003 020f 	and.w	r2, r3, #15
 800d7a8:	6879      	ldr	r1, [r7, #4]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4413      	add	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	440b      	add	r3, r1
 800d7b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d104      	bne.n	800d7c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fb83 	bl	800decc <USBD_CtlError>
                  break;
 800d7c6:	e041      	b.n	800d84c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	da0b      	bge.n	800d7e8 <USBD_StdEPReq+0x23e>
 800d7d0:	7bbb      	ldrb	r3, [r7, #14]
 800d7d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	3310      	adds	r3, #16
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	e00b      	b.n	800d800 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	3304      	adds	r3, #4
 800d800:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d802:	7bbb      	ldrb	r3, [r7, #14]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <USBD_StdEPReq+0x264>
 800d808:	7bbb      	ldrb	r3, [r7, #14]
 800d80a:	2b80      	cmp	r3, #128	; 0x80
 800d80c:	d103      	bne.n	800d816 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2200      	movs	r2, #0
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	e00e      	b.n	800d834 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d816:	7bbb      	ldrb	r3, [r7, #14]
 800d818:	4619      	mov	r1, r3
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f008 fb76 	bl	8015f0c <USBD_LL_IsStallEP>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d003      	beq.n	800d82e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	2201      	movs	r2, #1
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	e002      	b.n	800d834 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	2202      	movs	r2, #2
 800d838:	4619      	mov	r1, r3
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fbb7 	bl	800dfae <USBD_CtlSendData>
              break;
 800d840:	e004      	b.n	800d84c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fb41 	bl	800decc <USBD_CtlError>
              break;
 800d84a:	bf00      	nop
          }
          break;
 800d84c:	e004      	b.n	800d858 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d84e:	6839      	ldr	r1, [r7, #0]
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f000 fb3b 	bl	800decc <USBD_CtlError>
          break;
 800d856:	bf00      	nop
      }
      break;
 800d858:	e004      	b.n	800d864 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d85a:	6839      	ldr	r1, [r7, #0]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fb35 	bl	800decc <USBD_CtlError>
      break;
 800d862:	bf00      	nop
  }

  return ret;
 800d864:	7bfb      	ldrb	r3, [r7, #15]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d87a:	2300      	movs	r3, #0
 800d87c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d87e:	2300      	movs	r3, #0
 800d880:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d882:	2300      	movs	r3, #0
 800d884:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	885b      	ldrh	r3, [r3, #2]
 800d88a:	0a1b      	lsrs	r3, r3, #8
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	3b01      	subs	r3, #1
 800d890:	2b06      	cmp	r3, #6
 800d892:	f200 8128 	bhi.w	800dae6 <USBD_GetDescriptor+0x276>
 800d896:	a201      	add	r2, pc, #4	; (adr r2, 800d89c <USBD_GetDescriptor+0x2c>)
 800d898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d89c:	0800d8b9 	.word	0x0800d8b9
 800d8a0:	0800d8d1 	.word	0x0800d8d1
 800d8a4:	0800d911 	.word	0x0800d911
 800d8a8:	0800dae7 	.word	0x0800dae7
 800d8ac:	0800dae7 	.word	0x0800dae7
 800d8b0:	0800da87 	.word	0x0800da87
 800d8b4:	0800dab3 	.word	0x0800dab3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	7c12      	ldrb	r2, [r2, #16]
 800d8c4:	f107 0108 	add.w	r1, r7, #8
 800d8c8:	4610      	mov	r0, r2
 800d8ca:	4798      	blx	r3
 800d8cc:	60f8      	str	r0, [r7, #12]
      break;
 800d8ce:	e112      	b.n	800daf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	7c1b      	ldrb	r3, [r3, #16]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10d      	bne.n	800d8f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e0:	f107 0208 	add.w	r2, r7, #8
 800d8e4:	4610      	mov	r0, r2
 800d8e6:	4798      	blx	r3
 800d8e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d8f2:	e100      	b.n	800daf6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8fc:	f107 0208 	add.w	r2, r7, #8
 800d900:	4610      	mov	r0, r2
 800d902:	4798      	blx	r3
 800d904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	3301      	adds	r3, #1
 800d90a:	2202      	movs	r2, #2
 800d90c:	701a      	strb	r2, [r3, #0]
      break;
 800d90e:	e0f2      	b.n	800daf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	885b      	ldrh	r3, [r3, #2]
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b05      	cmp	r3, #5
 800d918:	f200 80ac 	bhi.w	800da74 <USBD_GetDescriptor+0x204>
 800d91c:	a201      	add	r2, pc, #4	; (adr r2, 800d924 <USBD_GetDescriptor+0xb4>)
 800d91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d922:	bf00      	nop
 800d924:	0800d93d 	.word	0x0800d93d
 800d928:	0800d971 	.word	0x0800d971
 800d92c:	0800d9a5 	.word	0x0800d9a5
 800d930:	0800d9d9 	.word	0x0800d9d9
 800d934:	0800da0d 	.word	0x0800da0d
 800d938:	0800da41 	.word	0x0800da41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00b      	beq.n	800d960 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	7c12      	ldrb	r2, [r2, #16]
 800d954:	f107 0108 	add.w	r1, r7, #8
 800d958:	4610      	mov	r0, r2
 800d95a:	4798      	blx	r3
 800d95c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d95e:	e091      	b.n	800da84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d960:	6839      	ldr	r1, [r7, #0]
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fab2 	bl	800decc <USBD_CtlError>
            err++;
 800d968:	7afb      	ldrb	r3, [r7, #11]
 800d96a:	3301      	adds	r3, #1
 800d96c:	72fb      	strb	r3, [r7, #11]
          break;
 800d96e:	e089      	b.n	800da84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00b      	beq.n	800d994 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	7c12      	ldrb	r2, [r2, #16]
 800d988:	f107 0108 	add.w	r1, r7, #8
 800d98c:	4610      	mov	r0, r2
 800d98e:	4798      	blx	r3
 800d990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d992:	e077      	b.n	800da84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d994:	6839      	ldr	r1, [r7, #0]
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fa98 	bl	800decc <USBD_CtlError>
            err++;
 800d99c:	7afb      	ldrb	r3, [r7, #11]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d9a2:	e06f      	b.n	800da84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00b      	beq.n	800d9c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	7c12      	ldrb	r2, [r2, #16]
 800d9bc:	f107 0108 	add.w	r1, r7, #8
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	4798      	blx	r3
 800d9c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9c6:	e05d      	b.n	800da84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 fa7e 	bl	800decc <USBD_CtlError>
            err++;
 800d9d0:	7afb      	ldrb	r3, [r7, #11]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d9d6:	e055      	b.n	800da84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	7c12      	ldrb	r2, [r2, #16]
 800d9f0:	f107 0108 	add.w	r1, r7, #8
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	4798      	blx	r3
 800d9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9fa:	e043      	b.n	800da84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fa64 	bl	800decc <USBD_CtlError>
            err++;
 800da04:	7afb      	ldrb	r3, [r7, #11]
 800da06:	3301      	adds	r3, #1
 800da08:	72fb      	strb	r3, [r7, #11]
          break;
 800da0a:	e03b      	b.n	800da84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00b      	beq.n	800da30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	7c12      	ldrb	r2, [r2, #16]
 800da24:	f107 0108 	add.w	r1, r7, #8
 800da28:	4610      	mov	r0, r2
 800da2a:	4798      	blx	r3
 800da2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da2e:	e029      	b.n	800da84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800da30:	6839      	ldr	r1, [r7, #0]
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 fa4a 	bl	800decc <USBD_CtlError>
            err++;
 800da38:	7afb      	ldrb	r3, [r7, #11]
 800da3a:	3301      	adds	r3, #1
 800da3c:	72fb      	strb	r3, [r7, #11]
          break;
 800da3e:	e021      	b.n	800da84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00b      	beq.n	800da64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	7c12      	ldrb	r2, [r2, #16]
 800da58:	f107 0108 	add.w	r1, r7, #8
 800da5c:	4610      	mov	r0, r2
 800da5e:	4798      	blx	r3
 800da60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da62:	e00f      	b.n	800da84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800da64:	6839      	ldr	r1, [r7, #0]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fa30 	bl	800decc <USBD_CtlError>
            err++;
 800da6c:	7afb      	ldrb	r3, [r7, #11]
 800da6e:	3301      	adds	r3, #1
 800da70:	72fb      	strb	r3, [r7, #11]
          break;
 800da72:	e007      	b.n	800da84 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da74:	6839      	ldr	r1, [r7, #0]
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fa28 	bl	800decc <USBD_CtlError>
          err++;
 800da7c:	7afb      	ldrb	r3, [r7, #11]
 800da7e:	3301      	adds	r3, #1
 800da80:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800da82:	bf00      	nop
      }
      break;
 800da84:	e037      	b.n	800daf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	7c1b      	ldrb	r3, [r3, #16]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d109      	bne.n	800daa2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da96:	f107 0208 	add.w	r2, r7, #8
 800da9a:	4610      	mov	r0, r2
 800da9c:	4798      	blx	r3
 800da9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800daa0:	e029      	b.n	800daf6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 fa11 	bl	800decc <USBD_CtlError>
        err++;
 800daaa:	7afb      	ldrb	r3, [r7, #11]
 800daac:	3301      	adds	r3, #1
 800daae:	72fb      	strb	r3, [r7, #11]
      break;
 800dab0:	e021      	b.n	800daf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7c1b      	ldrb	r3, [r3, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10d      	bne.n	800dad6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac2:	f107 0208 	add.w	r2, r7, #8
 800dac6:	4610      	mov	r0, r2
 800dac8:	4798      	blx	r3
 800daca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	3301      	adds	r3, #1
 800dad0:	2207      	movs	r2, #7
 800dad2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dad4:	e00f      	b.n	800daf6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dad6:	6839      	ldr	r1, [r7, #0]
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f9f7 	bl	800decc <USBD_CtlError>
        err++;
 800dade:	7afb      	ldrb	r3, [r7, #11]
 800dae0:	3301      	adds	r3, #1
 800dae2:	72fb      	strb	r3, [r7, #11]
      break;
 800dae4:	e007      	b.n	800daf6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f9ef 	bl	800decc <USBD_CtlError>
      err++;
 800daee:	7afb      	ldrb	r3, [r7, #11]
 800daf0:	3301      	adds	r3, #1
 800daf2:	72fb      	strb	r3, [r7, #11]
      break;
 800daf4:	bf00      	nop
  }

  if (err != 0U)
 800daf6:	7afb      	ldrb	r3, [r7, #11]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d11e      	bne.n	800db3a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	88db      	ldrh	r3, [r3, #6]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d016      	beq.n	800db32 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800db04:	893b      	ldrh	r3, [r7, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00e      	beq.n	800db28 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	88da      	ldrh	r2, [r3, #6]
 800db0e:	893b      	ldrh	r3, [r7, #8]
 800db10:	4293      	cmp	r3, r2
 800db12:	bf28      	it	cs
 800db14:	4613      	movcs	r3, r2
 800db16:	b29b      	uxth	r3, r3
 800db18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800db1a:	893b      	ldrh	r3, [r7, #8]
 800db1c:	461a      	mov	r2, r3
 800db1e:	68f9      	ldr	r1, [r7, #12]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 fa44 	bl	800dfae <USBD_CtlSendData>
 800db26:	e009      	b.n	800db3c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 f9ce 	bl	800decc <USBD_CtlError>
 800db30:	e004      	b.n	800db3c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 fa95 	bl	800e062 <USBD_CtlSendStatus>
 800db38:	e000      	b.n	800db3c <USBD_GetDescriptor+0x2cc>
    return;
 800db3a:	bf00      	nop
  }
}
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop

0800db44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	889b      	ldrh	r3, [r3, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d131      	bne.n	800dbba <USBD_SetAddress+0x76>
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	88db      	ldrh	r3, [r3, #6]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d12d      	bne.n	800dbba <USBD_SetAddress+0x76>
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	885b      	ldrh	r3, [r3, #2]
 800db62:	2b7f      	cmp	r3, #127	; 0x7f
 800db64:	d829      	bhi.n	800dbba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	885b      	ldrh	r3, [r3, #2]
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d104      	bne.n	800db88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 f9a3 	bl	800decc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db86:	e01d      	b.n	800dbc4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	7bfa      	ldrb	r2, [r7, #15]
 800db8c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db90:	7bfb      	ldrb	r3, [r7, #15]
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f008 f9e5 	bl	8015f64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 fa61 	bl	800e062 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d004      	beq.n	800dbb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2202      	movs	r2, #2
 800dbaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbae:	e009      	b.n	800dbc4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbb8:	e004      	b.n	800dbc4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dbba:	6839      	ldr	r1, [r7, #0]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 f985 	bl	800decc <USBD_CtlError>
  }
}
 800dbc2:	bf00      	nop
 800dbc4:	bf00      	nop
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	885b      	ldrh	r3, [r3, #2]
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	4b4c      	ldr	r3, [pc, #304]	; (800dd14 <USBD_SetConfig+0x148>)
 800dbe2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dbe4:	4b4b      	ldr	r3, [pc, #300]	; (800dd14 <USBD_SetConfig+0x148>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d905      	bls.n	800dbf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f96c 	bl	800decc <USBD_CtlError>
    return USBD_FAIL;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	e088      	b.n	800dd0a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	d002      	beq.n	800dc0a <USBD_SetConfig+0x3e>
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	d025      	beq.n	800dc54 <USBD_SetConfig+0x88>
 800dc08:	e071      	b.n	800dcee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dc0a:	4b42      	ldr	r3, [pc, #264]	; (800dd14 <USBD_SetConfig+0x148>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d01c      	beq.n	800dc4c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dc12:	4b40      	ldr	r3, [pc, #256]	; (800dd14 <USBD_SetConfig+0x148>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	461a      	mov	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc1c:	4b3d      	ldr	r3, [pc, #244]	; (800dd14 <USBD_SetConfig+0x148>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	4619      	mov	r1, r3
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7ff f948 	bl	800ceb8 <USBD_SetClassConfig>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dc2c:	7bfb      	ldrb	r3, [r7, #15]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d004      	beq.n	800dc3c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 f949 	bl	800decc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc3a:	e065      	b.n	800dd08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 fa10 	bl	800e062 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2203      	movs	r2, #3
 800dc46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dc4a:	e05d      	b.n	800dd08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fa08 	bl	800e062 <USBD_CtlSendStatus>
      break;
 800dc52:	e059      	b.n	800dd08 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dc54:	4b2f      	ldr	r3, [pc, #188]	; (800dd14 <USBD_SetConfig+0x148>)
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d112      	bne.n	800dc82 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2202      	movs	r2, #2
 800dc60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dc64:	4b2b      	ldr	r3, [pc, #172]	; (800dd14 <USBD_SetConfig+0x148>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc6e:	4b29      	ldr	r3, [pc, #164]	; (800dd14 <USBD_SetConfig+0x148>)
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7ff f93b 	bl	800cef0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f9f1 	bl	800e062 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc80:	e042      	b.n	800dd08 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dc82:	4b24      	ldr	r3, [pc, #144]	; (800dd14 <USBD_SetConfig+0x148>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d02a      	beq.n	800dce6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	4619      	mov	r1, r3
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f7ff f929 	bl	800cef0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dc9e:	4b1d      	ldr	r3, [pc, #116]	; (800dd14 <USBD_SetConfig+0x148>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dca8:	4b1a      	ldr	r3, [pc, #104]	; (800dd14 <USBD_SetConfig+0x148>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7ff f902 	bl	800ceb8 <USBD_SetClassConfig>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00f      	beq.n	800dcde <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f903 	bl	800decc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7ff f90e 	bl	800cef0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2202      	movs	r2, #2
 800dcd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dcdc:	e014      	b.n	800dd08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f9bf 	bl	800e062 <USBD_CtlSendStatus>
      break;
 800dce4:	e010      	b.n	800dd08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f9bb 	bl	800e062 <USBD_CtlSendStatus>
      break;
 800dcec:	e00c      	b.n	800dd08 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 f8eb 	bl	800decc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dcf6:	4b07      	ldr	r3, [pc, #28]	; (800dd14 <USBD_SetConfig+0x148>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff f8f7 	bl	800cef0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dd02:	2303      	movs	r3, #3
 800dd04:	73fb      	strb	r3, [r7, #15]
      break;
 800dd06:	bf00      	nop
  }

  return ret;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20000788 	.word	0x20000788

0800dd18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	88db      	ldrh	r3, [r3, #6]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d004      	beq.n	800dd34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd2a:	6839      	ldr	r1, [r7, #0]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 f8cd 	bl	800decc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dd32:	e023      	b.n	800dd7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	dc02      	bgt.n	800dd46 <USBD_GetConfig+0x2e>
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	dc03      	bgt.n	800dd4c <USBD_GetConfig+0x34>
 800dd44:	e015      	b.n	800dd72 <USBD_GetConfig+0x5a>
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	d00b      	beq.n	800dd62 <USBD_GetConfig+0x4a>
 800dd4a:	e012      	b.n	800dd72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	3308      	adds	r3, #8
 800dd56:	2201      	movs	r2, #1
 800dd58:	4619      	mov	r1, r3
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f927 	bl	800dfae <USBD_CtlSendData>
        break;
 800dd60:	e00c      	b.n	800dd7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	3304      	adds	r3, #4
 800dd66:	2201      	movs	r2, #1
 800dd68:	4619      	mov	r1, r3
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f91f 	bl	800dfae <USBD_CtlSendData>
        break;
 800dd70:	e004      	b.n	800dd7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dd72:	6839      	ldr	r1, [r7, #0]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f8a9 	bl	800decc <USBD_CtlError>
        break;
 800dd7a:	bf00      	nop
}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	3b01      	subs	r3, #1
 800dd98:	2b02      	cmp	r3, #2
 800dd9a:	d81e      	bhi.n	800ddda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	88db      	ldrh	r3, [r3, #6]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d004      	beq.n	800ddae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dda4:	6839      	ldr	r1, [r7, #0]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 f890 	bl	800decc <USBD_CtlError>
        break;
 800ddac:	e01a      	b.n	800dde4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d005      	beq.n	800ddca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	f043 0202 	orr.w	r2, r3, #2
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	330c      	adds	r3, #12
 800ddce:	2202      	movs	r2, #2
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 f8eb 	bl	800dfae <USBD_CtlSendData>
      break;
 800ddd8:	e004      	b.n	800dde4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 f875 	bl	800decc <USBD_CtlError>
      break;
 800dde2:	bf00      	nop
  }
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	885b      	ldrh	r3, [r3, #2]
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d106      	bne.n	800de0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2201      	movs	r2, #1
 800de02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 f92b 	bl	800e062 <USBD_CtlSendStatus>
  }
}
 800de0c:	bf00      	nop
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de24:	b2db      	uxtb	r3, r3
 800de26:	3b01      	subs	r3, #1
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d80b      	bhi.n	800de44 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	885b      	ldrh	r3, [r3, #2]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d10c      	bne.n	800de4e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f910 	bl	800e062 <USBD_CtlSendStatus>
      }
      break;
 800de42:	e004      	b.n	800de4e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f840 	bl	800decc <USBD_CtlError>
      break;
 800de4c:	e000      	b.n	800de50 <USBD_ClrFeature+0x3c>
      break;
 800de4e:	bf00      	nop
  }
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	781a      	ldrb	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3301      	adds	r3, #1
 800de72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	781a      	ldrb	r2, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	3301      	adds	r3, #1
 800de80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f7ff fabb 	bl	800d3fe <SWAPBYTE>
 800de88:	4603      	mov	r3, r0
 800de8a:	461a      	mov	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3301      	adds	r3, #1
 800de94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	3301      	adds	r3, #1
 800de9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f7ff faae 	bl	800d3fe <SWAPBYTE>
 800dea2:	4603      	mov	r3, r0
 800dea4:	461a      	mov	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3301      	adds	r3, #1
 800deae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	3301      	adds	r3, #1
 800deb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f7ff faa1 	bl	800d3fe <SWAPBYTE>
 800debc:	4603      	mov	r3, r0
 800debe:	461a      	mov	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	80da      	strh	r2, [r3, #6]
}
 800dec4:	bf00      	nop
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ded6:	2180      	movs	r1, #128	; 0x80
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f007 ffd9 	bl	8015e90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dede:	2100      	movs	r1, #0
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f007 ffd5 	bl	8015e90 <USBD_LL_StallEP>
}
 800dee6:	bf00      	nop
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b086      	sub	sp, #24
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	60b9      	str	r1, [r7, #8]
 800def8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800defa:	2300      	movs	r3, #0
 800defc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d036      	beq.n	800df72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800df08:	6938      	ldr	r0, [r7, #16]
 800df0a:	f000 f836 	bl	800df7a <USBD_GetLen>
 800df0e:	4603      	mov	r3, r0
 800df10:	3301      	adds	r3, #1
 800df12:	b29b      	uxth	r3, r3
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	b29a      	uxth	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800df1c:	7dfb      	ldrb	r3, [r7, #23]
 800df1e:	68ba      	ldr	r2, [r7, #8]
 800df20:	4413      	add	r3, r2
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	7812      	ldrb	r2, [r2, #0]
 800df26:	701a      	strb	r2, [r3, #0]
  idx++;
 800df28:	7dfb      	ldrb	r3, [r7, #23]
 800df2a:	3301      	adds	r3, #1
 800df2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800df2e:	7dfb      	ldrb	r3, [r7, #23]
 800df30:	68ba      	ldr	r2, [r7, #8]
 800df32:	4413      	add	r3, r2
 800df34:	2203      	movs	r2, #3
 800df36:	701a      	strb	r2, [r3, #0]
  idx++;
 800df38:	7dfb      	ldrb	r3, [r7, #23]
 800df3a:	3301      	adds	r3, #1
 800df3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df3e:	e013      	b.n	800df68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df40:	7dfb      	ldrb	r3, [r7, #23]
 800df42:	68ba      	ldr	r2, [r7, #8]
 800df44:	4413      	add	r3, r2
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	7812      	ldrb	r2, [r2, #0]
 800df4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	3301      	adds	r3, #1
 800df50:	613b      	str	r3, [r7, #16]
    idx++;
 800df52:	7dfb      	ldrb	r3, [r7, #23]
 800df54:	3301      	adds	r3, #1
 800df56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800df58:	7dfb      	ldrb	r3, [r7, #23]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	4413      	add	r3, r2
 800df5e:	2200      	movs	r2, #0
 800df60:	701a      	strb	r2, [r3, #0]
    idx++;
 800df62:	7dfb      	ldrb	r3, [r7, #23]
 800df64:	3301      	adds	r3, #1
 800df66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1e7      	bne.n	800df40 <USBD_GetString+0x52>
 800df70:	e000      	b.n	800df74 <USBD_GetString+0x86>
    return;
 800df72:	bf00      	nop
  }
}
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b085      	sub	sp, #20
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df82:	2300      	movs	r3, #0
 800df84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df8a:	e005      	b.n	800df98 <USBD_GetLen+0x1e>
  {
    len++;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	3301      	adds	r3, #1
 800df90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	3301      	adds	r3, #1
 800df96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1f5      	bne.n	800df8c <USBD_GetLen+0x12>
  }

  return len;
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr

0800dfae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b084      	sub	sp, #16
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	60b9      	str	r1, [r7, #8]
 800dfb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2202      	movs	r2, #2
 800dfbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f007 ffe4 	bl	8015fa2 <USBD_LL_Transmit>

  return USBD_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	2100      	movs	r1, #0
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f007 ffd3 	bl	8015fa2 <USBD_LL_Transmit>

  return USBD_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b084      	sub	sp, #16
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2203      	movs	r2, #3
 800e016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	2100      	movs	r1, #0
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f007 ffd7 	bl	8015fe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	2100      	movs	r1, #0
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f007 ffc6 	bl	8015fe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b082      	sub	sp, #8
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2204      	movs	r2, #4
 800e06e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e072:	2300      	movs	r3, #0
 800e074:	2200      	movs	r2, #0
 800e076:	2100      	movs	r1, #0
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f007 ff92 	bl	8015fa2 <USBD_LL_Transmit>

  return USBD_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2205      	movs	r2, #5
 800e094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e098:	2300      	movs	r3, #0
 800e09a:	2200      	movs	r2, #0
 800e09c:	2100      	movs	r1, #0
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f007 ffa0 	bl	8015fe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
	...

0800e0b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e0ba:	79fb      	ldrb	r3, [r7, #7]
 800e0bc:	4a08      	ldr	r2, [pc, #32]	; (800e0e0 <disk_status+0x30>)
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	79fa      	ldrb	r2, [r7, #7]
 800e0c8:	4905      	ldr	r1, [pc, #20]	; (800e0e0 <disk_status+0x30>)
 800e0ca:	440a      	add	r2, r1
 800e0cc:	7a12      	ldrb	r2, [r2, #8]
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	4798      	blx	r3
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	200007b4 	.word	0x200007b4

0800e0e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e0f2:	79fb      	ldrb	r3, [r7, #7]
 800e0f4:	4a0d      	ldr	r2, [pc, #52]	; (800e12c <disk_initialize+0x48>)
 800e0f6:	5cd3      	ldrb	r3, [r2, r3]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d111      	bne.n	800e120 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e0fc:	79fb      	ldrb	r3, [r7, #7]
 800e0fe:	4a0b      	ldr	r2, [pc, #44]	; (800e12c <disk_initialize+0x48>)
 800e100:	2101      	movs	r1, #1
 800e102:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e104:	79fb      	ldrb	r3, [r7, #7]
 800e106:	4a09      	ldr	r2, [pc, #36]	; (800e12c <disk_initialize+0x48>)
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	4413      	add	r3, r2
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	79fa      	ldrb	r2, [r7, #7]
 800e112:	4906      	ldr	r1, [pc, #24]	; (800e12c <disk_initialize+0x48>)
 800e114:	440a      	add	r2, r1
 800e116:	7a12      	ldrb	r2, [r2, #8]
 800e118:	4610      	mov	r0, r2
 800e11a:	4798      	blx	r3
 800e11c:	4603      	mov	r3, r0
 800e11e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e120:	7bfb      	ldrb	r3, [r7, #15]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	200007b4 	.word	0x200007b4

0800e130 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e130:	b590      	push	{r4, r7, lr}
 800e132:	b087      	sub	sp, #28
 800e134:	af00      	add	r7, sp, #0
 800e136:	60b9      	str	r1, [r7, #8]
 800e138:	607a      	str	r2, [r7, #4]
 800e13a:	603b      	str	r3, [r7, #0]
 800e13c:	4603      	mov	r3, r0
 800e13e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e140:	7bfb      	ldrb	r3, [r7, #15]
 800e142:	4a0a      	ldr	r2, [pc, #40]	; (800e16c <disk_read+0x3c>)
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4413      	add	r3, r2
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	689c      	ldr	r4, [r3, #8]
 800e14c:	7bfb      	ldrb	r3, [r7, #15]
 800e14e:	4a07      	ldr	r2, [pc, #28]	; (800e16c <disk_read+0x3c>)
 800e150:	4413      	add	r3, r2
 800e152:	7a18      	ldrb	r0, [r3, #8]
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	68b9      	ldr	r1, [r7, #8]
 800e15a:	47a0      	blx	r4
 800e15c:	4603      	mov	r3, r0
 800e15e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e160:	7dfb      	ldrb	r3, [r7, #23]
}
 800e162:	4618      	mov	r0, r3
 800e164:	371c      	adds	r7, #28
 800e166:	46bd      	mov	sp, r7
 800e168:	bd90      	pop	{r4, r7, pc}
 800e16a:	bf00      	nop
 800e16c:	200007b4 	.word	0x200007b4

0800e170 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e170:	b590      	push	{r4, r7, lr}
 800e172:	b087      	sub	sp, #28
 800e174:	af00      	add	r7, sp, #0
 800e176:	60b9      	str	r1, [r7, #8]
 800e178:	607a      	str	r2, [r7, #4]
 800e17a:	603b      	str	r3, [r7, #0]
 800e17c:	4603      	mov	r3, r0
 800e17e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e180:	7bfb      	ldrb	r3, [r7, #15]
 800e182:	4a0a      	ldr	r2, [pc, #40]	; (800e1ac <disk_write+0x3c>)
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4413      	add	r3, r2
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	68dc      	ldr	r4, [r3, #12]
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
 800e18e:	4a07      	ldr	r2, [pc, #28]	; (800e1ac <disk_write+0x3c>)
 800e190:	4413      	add	r3, r2
 800e192:	7a18      	ldrb	r0, [r3, #8]
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	68b9      	ldr	r1, [r7, #8]
 800e19a:	47a0      	blx	r4
 800e19c:	4603      	mov	r3, r0
 800e19e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	371c      	adds	r7, #28
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd90      	pop	{r4, r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	200007b4 	.word	0x200007b4

0800e1b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	603a      	str	r2, [r7, #0]
 800e1ba:	71fb      	strb	r3, [r7, #7]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e1c0:	79fb      	ldrb	r3, [r7, #7]
 800e1c2:	4a09      	ldr	r2, [pc, #36]	; (800e1e8 <disk_ioctl+0x38>)
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4413      	add	r3, r2
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	79fa      	ldrb	r2, [r7, #7]
 800e1ce:	4906      	ldr	r1, [pc, #24]	; (800e1e8 <disk_ioctl+0x38>)
 800e1d0:	440a      	add	r2, r1
 800e1d2:	7a10      	ldrb	r0, [r2, #8]
 800e1d4:	79b9      	ldrb	r1, [r7, #6]
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	4798      	blx	r3
 800e1da:	4603      	mov	r3, r0
 800e1dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3710      	adds	r7, #16
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	200007b4 	.word	0x200007b4

0800e1ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e1fc:	89fb      	ldrh	r3, [r7, #14]
 800e1fe:	021b      	lsls	r3, r3, #8
 800e200:	b21a      	sxth	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	b21b      	sxth	r3, r3
 800e208:	4313      	orrs	r3, r2
 800e20a:	b21b      	sxth	r3, r3
 800e20c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e20e:	89fb      	ldrh	r3, [r7, #14]
}
 800e210:	4618      	mov	r0, r3
 800e212:	3714      	adds	r7, #20
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e21c:	b480      	push	{r7}
 800e21e:	b085      	sub	sp, #20
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	3303      	adds	r3, #3
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	021b      	lsls	r3, r3, #8
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	3202      	adds	r2, #2
 800e234:	7812      	ldrb	r2, [r2, #0]
 800e236:	4313      	orrs	r3, r2
 800e238:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	021b      	lsls	r3, r3, #8
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	3201      	adds	r2, #1
 800e242:	7812      	ldrb	r2, [r2, #0]
 800e244:	4313      	orrs	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	021b      	lsls	r3, r3, #8
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	7812      	ldrb	r2, [r2, #0]
 800e250:	4313      	orrs	r3, r2
 800e252:	60fb      	str	r3, [r7, #12]
	return rv;
 800e254:	68fb      	ldr	r3, [r7, #12]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3714      	adds	r7, #20
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e262:	b480      	push	{r7}
 800e264:	b083      	sub	sp, #12
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	460b      	mov	r3, r1
 800e26c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	1c5a      	adds	r2, r3, #1
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	887a      	ldrh	r2, [r7, #2]
 800e276:	b2d2      	uxtb	r2, r2
 800e278:	701a      	strb	r2, [r3, #0]
 800e27a:	887b      	ldrh	r3, [r7, #2]
 800e27c:	0a1b      	lsrs	r3, r3, #8
 800e27e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	607a      	str	r2, [r7, #4]
 800e286:	887a      	ldrh	r2, [r7, #2]
 800e288:	b2d2      	uxtb	r2, r2
 800e28a:	701a      	strb	r2, [r3, #0]
}
 800e28c:	bf00      	nop
 800e28e:	370c      	adds	r7, #12
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	1c5a      	adds	r2, r3, #1
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	b2d2      	uxtb	r2, r2
 800e2ac:	701a      	strb	r2, [r3, #0]
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	0a1b      	lsrs	r3, r3, #8
 800e2b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	1c5a      	adds	r2, r3, #1
 800e2b8:	607a      	str	r2, [r7, #4]
 800e2ba:	683a      	ldr	r2, [r7, #0]
 800e2bc:	b2d2      	uxtb	r2, r2
 800e2be:	701a      	strb	r2, [r3, #0]
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	0a1b      	lsrs	r3, r3, #8
 800e2c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	1c5a      	adds	r2, r3, #1
 800e2ca:	607a      	str	r2, [r7, #4]
 800e2cc:	683a      	ldr	r2, [r7, #0]
 800e2ce:	b2d2      	uxtb	r2, r2
 800e2d0:	701a      	strb	r2, [r3, #0]
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	0a1b      	lsrs	r3, r3, #8
 800e2d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	1c5a      	adds	r2, r3, #1
 800e2dc:	607a      	str	r2, [r7, #4]
 800e2de:	683a      	ldr	r2, [r7, #0]
 800e2e0:	b2d2      	uxtb	r2, r2
 800e2e2:	701a      	strb	r2, [r3, #0]
}
 800e2e4:	bf00      	nop
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e2f0:	b480      	push	{r7}
 800e2f2:	b087      	sub	sp, #28
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00d      	beq.n	800e326 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	1c53      	adds	r3, r2, #1
 800e30e:	613b      	str	r3, [r7, #16]
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	1c59      	adds	r1, r3, #1
 800e314:	6179      	str	r1, [r7, #20]
 800e316:	7812      	ldrb	r2, [r2, #0]
 800e318:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	3b01      	subs	r3, #1
 800e31e:	607b      	str	r3, [r7, #4]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1f1      	bne.n	800e30a <mem_cpy+0x1a>
	}
}
 800e326:	bf00      	nop
 800e328:	371c      	adds	r7, #28
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e332:	b480      	push	{r7}
 800e334:	b087      	sub	sp, #28
 800e336:	af00      	add	r7, sp, #0
 800e338:	60f8      	str	r0, [r7, #12]
 800e33a:	60b9      	str	r1, [r7, #8]
 800e33c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	1c5a      	adds	r2, r3, #1
 800e346:	617a      	str	r2, [r7, #20]
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	b2d2      	uxtb	r2, r2
 800e34c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	3b01      	subs	r3, #1
 800e352:	607b      	str	r3, [r7, #4]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1f3      	bne.n	800e342 <mem_set+0x10>
}
 800e35a:	bf00      	nop
 800e35c:	bf00      	nop
 800e35e:	371c      	adds	r7, #28
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e368:	b480      	push	{r7}
 800e36a:	b089      	sub	sp, #36	; 0x24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	61fb      	str	r3, [r7, #28]
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e37c:	2300      	movs	r3, #0
 800e37e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	61fa      	str	r2, [r7, #28]
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	4619      	mov	r1, r3
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	1c5a      	adds	r2, r3, #1
 800e38e:	61ba      	str	r2, [r7, #24]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	1acb      	subs	r3, r1, r3
 800e394:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3b01      	subs	r3, #1
 800e39a:	607b      	str	r3, [r7, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d002      	beq.n	800e3a8 <mem_cmp+0x40>
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d0eb      	beq.n	800e380 <mem_cmp+0x18>

	return r;
 800e3a8:	697b      	ldr	r3, [r7, #20]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3724      	adds	r7, #36	; 0x24
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr

0800e3b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e3b6:	b480      	push	{r7}
 800e3b8:	b083      	sub	sp, #12
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e3c0:	e002      	b.n	800e3c8 <chk_chr+0x12>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	607b      	str	r3, [r7, #4]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d005      	beq.n	800e3dc <chk_chr+0x26>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d1f2      	bne.n	800e3c2 <chk_chr+0xc>
	return *str;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	781b      	ldrb	r3, [r3, #0]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	370c      	adds	r7, #12
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d009      	beq.n	800e40e <lock_fs+0x22>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	695b      	ldr	r3, [r3, #20]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f003 f98d 	bl	801171e <ff_req_grant>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <lock_fs+0x22>
 800e40a:	2301      	movs	r3, #1
 800e40c:	e000      	b.n	800e410 <lock_fs+0x24>
 800e40e:	2300      	movs	r3, #0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	460b      	mov	r3, r1
 800e422:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00d      	beq.n	800e446 <unlock_fs+0x2e>
 800e42a:	78fb      	ldrb	r3, [r7, #3]
 800e42c:	2b0c      	cmp	r3, #12
 800e42e:	d00a      	beq.n	800e446 <unlock_fs+0x2e>
 800e430:	78fb      	ldrb	r3, [r7, #3]
 800e432:	2b0b      	cmp	r3, #11
 800e434:	d007      	beq.n	800e446 <unlock_fs+0x2e>
 800e436:	78fb      	ldrb	r3, [r7, #3]
 800e438:	2b0f      	cmp	r3, #15
 800e43a:	d004      	beq.n	800e446 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	4618      	mov	r0, r3
 800e442:	f003 f981 	bl	8011748 <ff_rel_grant>
	}
}
 800e446:	bf00      	nop
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
	...

0800e450 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e45a:	2300      	movs	r3, #0
 800e45c:	60bb      	str	r3, [r7, #8]
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	e029      	b.n	800e4b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e464:	4a27      	ldr	r2, [pc, #156]	; (800e504 <chk_lock+0xb4>)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	011b      	lsls	r3, r3, #4
 800e46a:	4413      	add	r3, r2
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d01d      	beq.n	800e4ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e472:	4a24      	ldr	r2, [pc, #144]	; (800e504 <chk_lock+0xb4>)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	011b      	lsls	r3, r3, #4
 800e478:	4413      	add	r3, r2
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	429a      	cmp	r2, r3
 800e482:	d116      	bne.n	800e4b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e484:	4a1f      	ldr	r2, [pc, #124]	; (800e504 <chk_lock+0xb4>)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	011b      	lsls	r3, r3, #4
 800e48a:	4413      	add	r3, r2
 800e48c:	3304      	adds	r3, #4
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e494:	429a      	cmp	r2, r3
 800e496:	d10c      	bne.n	800e4b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e498:	4a1a      	ldr	r2, [pc, #104]	; (800e504 <chk_lock+0xb4>)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	011b      	lsls	r3, r3, #4
 800e49e:	4413      	add	r3, r2
 800e4a0:	3308      	adds	r3, #8
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d102      	bne.n	800e4b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e4ac:	e007      	b.n	800e4be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	60fb      	str	r3, [r7, #12]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d9d2      	bls.n	800e464 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2b02      	cmp	r3, #2
 800e4c2:	d109      	bne.n	800e4d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d102      	bne.n	800e4d0 <chk_lock+0x80>
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	2b02      	cmp	r3, #2
 800e4ce:	d101      	bne.n	800e4d4 <chk_lock+0x84>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e010      	b.n	800e4f6 <chk_lock+0xa6>
 800e4d4:	2312      	movs	r3, #18
 800e4d6:	e00e      	b.n	800e4f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d108      	bne.n	800e4f0 <chk_lock+0xa0>
 800e4de:	4a09      	ldr	r2, [pc, #36]	; (800e504 <chk_lock+0xb4>)
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	011b      	lsls	r3, r3, #4
 800e4e4:	4413      	add	r3, r2
 800e4e6:	330c      	adds	r3, #12
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4ee:	d101      	bne.n	800e4f4 <chk_lock+0xa4>
 800e4f0:	2310      	movs	r3, #16
 800e4f2:	e000      	b.n	800e4f6 <chk_lock+0xa6>
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3714      	adds	r7, #20
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	20000794 	.word	0x20000794

0800e508 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e50e:	2300      	movs	r3, #0
 800e510:	607b      	str	r3, [r7, #4]
 800e512:	e002      	b.n	800e51a <enq_lock+0x12>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	3301      	adds	r3, #1
 800e518:	607b      	str	r3, [r7, #4]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d806      	bhi.n	800e52e <enq_lock+0x26>
 800e520:	4a09      	ldr	r2, [pc, #36]	; (800e548 <enq_lock+0x40>)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	011b      	lsls	r3, r3, #4
 800e526:	4413      	add	r3, r2
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d1f2      	bne.n	800e514 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b02      	cmp	r3, #2
 800e532:	bf14      	ite	ne
 800e534:	2301      	movne	r3, #1
 800e536:	2300      	moveq	r3, #0
 800e538:	b2db      	uxtb	r3, r3
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	370c      	adds	r7, #12
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	20000794 	.word	0x20000794

0800e54c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e556:	2300      	movs	r3, #0
 800e558:	60fb      	str	r3, [r7, #12]
 800e55a:	e01f      	b.n	800e59c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e55c:	4a41      	ldr	r2, [pc, #260]	; (800e664 <inc_lock+0x118>)
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	011b      	lsls	r3, r3, #4
 800e562:	4413      	add	r3, r2
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d113      	bne.n	800e596 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e56e:	4a3d      	ldr	r2, [pc, #244]	; (800e664 <inc_lock+0x118>)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	011b      	lsls	r3, r3, #4
 800e574:	4413      	add	r3, r2
 800e576:	3304      	adds	r3, #4
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e57e:	429a      	cmp	r2, r3
 800e580:	d109      	bne.n	800e596 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e582:	4a38      	ldr	r2, [pc, #224]	; (800e664 <inc_lock+0x118>)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	011b      	lsls	r3, r3, #4
 800e588:	4413      	add	r3, r2
 800e58a:	3308      	adds	r3, #8
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e592:	429a      	cmp	r2, r3
 800e594:	d006      	beq.n	800e5a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3301      	adds	r3, #1
 800e59a:	60fb      	str	r3, [r7, #12]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d9dc      	bls.n	800e55c <inc_lock+0x10>
 800e5a2:	e000      	b.n	800e5a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e5a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2b02      	cmp	r3, #2
 800e5aa:	d132      	bne.n	800e612 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	60fb      	str	r3, [r7, #12]
 800e5b0:	e002      	b.n	800e5b8 <inc_lock+0x6c>
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	60fb      	str	r3, [r7, #12]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d806      	bhi.n	800e5cc <inc_lock+0x80>
 800e5be:	4a29      	ldr	r2, [pc, #164]	; (800e664 <inc_lock+0x118>)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	011b      	lsls	r3, r3, #4
 800e5c4:	4413      	add	r3, r2
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d1f2      	bne.n	800e5b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2b02      	cmp	r3, #2
 800e5d0:	d101      	bne.n	800e5d6 <inc_lock+0x8a>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	e040      	b.n	800e658 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	4922      	ldr	r1, [pc, #136]	; (800e664 <inc_lock+0x118>)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	011b      	lsls	r3, r3, #4
 800e5e0:	440b      	add	r3, r1
 800e5e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	689a      	ldr	r2, [r3, #8]
 800e5e8:	491e      	ldr	r1, [pc, #120]	; (800e664 <inc_lock+0x118>)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	011b      	lsls	r3, r3, #4
 800e5ee:	440b      	add	r3, r1
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	695a      	ldr	r2, [r3, #20]
 800e5f8:	491a      	ldr	r1, [pc, #104]	; (800e664 <inc_lock+0x118>)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	011b      	lsls	r3, r3, #4
 800e5fe:	440b      	add	r3, r1
 800e600:	3308      	adds	r3, #8
 800e602:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e604:	4a17      	ldr	r2, [pc, #92]	; (800e664 <inc_lock+0x118>)
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	011b      	lsls	r3, r3, #4
 800e60a:	4413      	add	r3, r2
 800e60c:	330c      	adds	r3, #12
 800e60e:	2200      	movs	r2, #0
 800e610:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d009      	beq.n	800e62c <inc_lock+0xe0>
 800e618:	4a12      	ldr	r2, [pc, #72]	; (800e664 <inc_lock+0x118>)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	011b      	lsls	r3, r3, #4
 800e61e:	4413      	add	r3, r2
 800e620:	330c      	adds	r3, #12
 800e622:	881b      	ldrh	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <inc_lock+0xe0>
 800e628:	2300      	movs	r3, #0
 800e62a:	e015      	b.n	800e658 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d108      	bne.n	800e644 <inc_lock+0xf8>
 800e632:	4a0c      	ldr	r2, [pc, #48]	; (800e664 <inc_lock+0x118>)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	011b      	lsls	r3, r3, #4
 800e638:	4413      	add	r3, r2
 800e63a:	330c      	adds	r3, #12
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	3301      	adds	r3, #1
 800e640:	b29a      	uxth	r2, r3
 800e642:	e001      	b.n	800e648 <inc_lock+0xfc>
 800e644:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e648:	4906      	ldr	r1, [pc, #24]	; (800e664 <inc_lock+0x118>)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	011b      	lsls	r3, r3, #4
 800e64e:	440b      	add	r3, r1
 800e650:	330c      	adds	r3, #12
 800e652:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	3301      	adds	r3, #1
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3714      	adds	r7, #20
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	20000794 	.word	0x20000794

0800e668 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e668:	b480      	push	{r7}
 800e66a:	b085      	sub	sp, #20
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	3b01      	subs	r3, #1
 800e674:	607b      	str	r3, [r7, #4]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d825      	bhi.n	800e6c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e67c:	4a17      	ldr	r2, [pc, #92]	; (800e6dc <dec_lock+0x74>)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	011b      	lsls	r3, r3, #4
 800e682:	4413      	add	r3, r2
 800e684:	330c      	adds	r3, #12
 800e686:	881b      	ldrh	r3, [r3, #0]
 800e688:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e68a:	89fb      	ldrh	r3, [r7, #14]
 800e68c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e690:	d101      	bne.n	800e696 <dec_lock+0x2e>
 800e692:	2300      	movs	r3, #0
 800e694:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e696:	89fb      	ldrh	r3, [r7, #14]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <dec_lock+0x3a>
 800e69c:	89fb      	ldrh	r3, [r7, #14]
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e6a2:	4a0e      	ldr	r2, [pc, #56]	; (800e6dc <dec_lock+0x74>)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	011b      	lsls	r3, r3, #4
 800e6a8:	4413      	add	r3, r2
 800e6aa:	330c      	adds	r3, #12
 800e6ac:	89fa      	ldrh	r2, [r7, #14]
 800e6ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e6b0:	89fb      	ldrh	r3, [r7, #14]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d105      	bne.n	800e6c2 <dec_lock+0x5a>
 800e6b6:	4a09      	ldr	r2, [pc, #36]	; (800e6dc <dec_lock+0x74>)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	011b      	lsls	r3, r3, #4
 800e6bc:	4413      	add	r3, r2
 800e6be:	2200      	movs	r2, #0
 800e6c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	737b      	strb	r3, [r7, #13]
 800e6c6:	e001      	b.n	800e6cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e6cc:	7b7b      	ldrb	r3, [r7, #13]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3714      	adds	r7, #20
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	20000794 	.word	0x20000794

0800e6e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	60fb      	str	r3, [r7, #12]
 800e6ec:	e010      	b.n	800e710 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e6ee:	4a0d      	ldr	r2, [pc, #52]	; (800e724 <clear_lock+0x44>)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	011b      	lsls	r3, r3, #4
 800e6f4:	4413      	add	r3, r2
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d105      	bne.n	800e70a <clear_lock+0x2a>
 800e6fe:	4a09      	ldr	r2, [pc, #36]	; (800e724 <clear_lock+0x44>)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	011b      	lsls	r3, r3, #4
 800e704:	4413      	add	r3, r2
 800e706:	2200      	movs	r2, #0
 800e708:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	3301      	adds	r3, #1
 800e70e:	60fb      	str	r3, [r7, #12]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b01      	cmp	r3, #1
 800e714:	d9eb      	bls.n	800e6ee <clear_lock+0xe>
	}
}
 800e716:	bf00      	nop
 800e718:	bf00      	nop
 800e71a:	3714      	adds	r7, #20
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr
 800e724:	20000794 	.word	0x20000794

0800e728 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b086      	sub	sp, #24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e730:	2300      	movs	r3, #0
 800e732:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	78db      	ldrb	r3, [r3, #3]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d034      	beq.n	800e7a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e740:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	7858      	ldrb	r0, [r3, #1]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e74c:	2301      	movs	r3, #1
 800e74e:	697a      	ldr	r2, [r7, #20]
 800e750:	f7ff fd0e 	bl	800e170 <disk_write>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d002      	beq.n	800e760 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	73fb      	strb	r3, [r7, #15]
 800e75e:	e022      	b.n	800e7a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2200      	movs	r2, #0
 800e764:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e76a:	697a      	ldr	r2, [r7, #20]
 800e76c:	1ad2      	subs	r2, r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e772:	429a      	cmp	r2, r3
 800e774:	d217      	bcs.n	800e7a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	789b      	ldrb	r3, [r3, #2]
 800e77a:	613b      	str	r3, [r7, #16]
 800e77c:	e010      	b.n	800e7a0 <sync_window+0x78>
					wsect += fs->fsize;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e782:	697a      	ldr	r2, [r7, #20]
 800e784:	4413      	add	r3, r2
 800e786:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	7858      	ldrb	r0, [r3, #1]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e792:	2301      	movs	r3, #1
 800e794:	697a      	ldr	r2, [r7, #20]
 800e796:	f7ff fceb 	bl	800e170 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	3b01      	subs	r3, #1
 800e79e:	613b      	str	r3, [r7, #16]
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d8eb      	bhi.n	800e77e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3718      	adds	r7, #24
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d01b      	beq.n	800e800 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff ffad 	bl	800e728 <sync_window>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d113      	bne.n	800e800 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7858      	ldrb	r0, [r3, #1]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	683a      	ldr	r2, [r7, #0]
 800e7e6:	f7ff fca3 	bl	800e130 <disk_read>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d004      	beq.n	800e7fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e7f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800e800:	7bfb      	ldrb	r3, [r7, #15]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
	...

0800e80c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f7ff ff87 	bl	800e728 <sync_window>
 800e81a:	4603      	mov	r3, r0
 800e81c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d159      	bne.n	800e8d8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	2b03      	cmp	r3, #3
 800e82a:	d149      	bne.n	800e8c0 <sync_fs+0xb4>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	791b      	ldrb	r3, [r3, #4]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d145      	bne.n	800e8c0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	899b      	ldrh	r3, [r3, #12]
 800e83e:	461a      	mov	r2, r3
 800e840:	2100      	movs	r1, #0
 800e842:	f7ff fd76 	bl	800e332 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	333c      	adds	r3, #60	; 0x3c
 800e84a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e84e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e852:	4618      	mov	r0, r3
 800e854:	f7ff fd05 	bl	800e262 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	333c      	adds	r3, #60	; 0x3c
 800e85c:	4921      	ldr	r1, [pc, #132]	; (800e8e4 <sync_fs+0xd8>)
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff fd1a 	bl	800e298 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	333c      	adds	r3, #60	; 0x3c
 800e868:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e86c:	491e      	ldr	r1, [pc, #120]	; (800e8e8 <sync_fs+0xdc>)
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff fd12 	bl	800e298 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	333c      	adds	r3, #60	; 0x3c
 800e878:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	69db      	ldr	r3, [r3, #28]
 800e880:	4619      	mov	r1, r3
 800e882:	4610      	mov	r0, r2
 800e884:	f7ff fd08 	bl	800e298 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	333c      	adds	r3, #60	; 0x3c
 800e88c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	699b      	ldr	r3, [r3, #24]
 800e894:	4619      	mov	r1, r3
 800e896:	4610      	mov	r0, r2
 800e898:	f7ff fcfe 	bl	800e298 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8a0:	1c5a      	adds	r2, r3, #1
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	7858      	ldrb	r0, [r3, #1]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	f7ff fc5b 	bl	800e170 <disk_write>
			fs->fsi_flag = 0;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	785b      	ldrb	r3, [r3, #1]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7ff fc71 	bl	800e1b0 <disk_ioctl>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d001      	beq.n	800e8d8 <sync_fs+0xcc>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	41615252 	.word	0x41615252
 800e8e8:	61417272 	.word	0x61417272

0800e8ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	3b02      	subs	r3, #2
 800e8fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6a1b      	ldr	r3, [r3, #32]
 800e900:	3b02      	subs	r3, #2
 800e902:	683a      	ldr	r2, [r7, #0]
 800e904:	429a      	cmp	r2, r3
 800e906:	d301      	bcc.n	800e90c <clust2sect+0x20>
 800e908:	2300      	movs	r3, #0
 800e90a:	e008      	b.n	800e91e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	895b      	ldrh	r3, [r3, #10]
 800e910:	461a      	mov	r2, r3
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	fb03 f202 	mul.w	r2, r3, r2
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e91c:	4413      	add	r3, r2
}
 800e91e:	4618      	mov	r0, r3
 800e920:	370c      	adds	r7, #12
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr

0800e92a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b086      	sub	sp, #24
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
 800e932:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d904      	bls.n	800e94a <get_fat+0x20>
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	6a1b      	ldr	r3, [r3, #32]
 800e944:	683a      	ldr	r2, [r7, #0]
 800e946:	429a      	cmp	r2, r3
 800e948:	d302      	bcc.n	800e950 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e94a:	2301      	movs	r3, #1
 800e94c:	617b      	str	r3, [r7, #20]
 800e94e:	e0bb      	b.n	800eac8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e954:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	2b03      	cmp	r3, #3
 800e95c:	f000 8083 	beq.w	800ea66 <get_fat+0x13c>
 800e960:	2b03      	cmp	r3, #3
 800e962:	f300 80a7 	bgt.w	800eab4 <get_fat+0x18a>
 800e966:	2b01      	cmp	r3, #1
 800e968:	d002      	beq.n	800e970 <get_fat+0x46>
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	d056      	beq.n	800ea1c <get_fat+0xf2>
 800e96e:	e0a1      	b.n	800eab4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	60fb      	str	r3, [r7, #12]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	085b      	lsrs	r3, r3, #1
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	4413      	add	r3, r2
 800e97c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	899b      	ldrh	r3, [r3, #12]
 800e986:	4619      	mov	r1, r3
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e98e:	4413      	add	r3, r2
 800e990:	4619      	mov	r1, r3
 800e992:	6938      	ldr	r0, [r7, #16]
 800e994:	f7ff ff0c 	bl	800e7b0 <move_window>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f040 808d 	bne.w	800eaba <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	1c5a      	adds	r2, r3, #1
 800e9a4:	60fa      	str	r2, [r7, #12]
 800e9a6:	693a      	ldr	r2, [r7, #16]
 800e9a8:	8992      	ldrh	r2, [r2, #12]
 800e9aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9ae:	fb02 f201 	mul.w	r2, r2, r1
 800e9b2:	1a9b      	subs	r3, r3, r2
 800e9b4:	693a      	ldr	r2, [r7, #16]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	899b      	ldrh	r3, [r3, #12]
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9ce:	4413      	add	r3, r2
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	6938      	ldr	r0, [r7, #16]
 800e9d4:	f7ff feec 	bl	800e7b0 <move_window>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d16f      	bne.n	800eabe <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	899b      	ldrh	r3, [r3, #12]
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9ea:	fb02 f201 	mul.w	r2, r2, r1
 800e9ee:	1a9b      	subs	r3, r3, r2
 800e9f0:	693a      	ldr	r2, [r7, #16]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9f8:	021b      	lsls	r3, r3, #8
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <get_fat+0xe8>
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	091b      	lsrs	r3, r3, #4
 800ea10:	e002      	b.n	800ea18 <get_fat+0xee>
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ea18:	617b      	str	r3, [r7, #20]
			break;
 800ea1a:	e055      	b.n	800eac8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	899b      	ldrh	r3, [r3, #12]
 800ea24:	085b      	lsrs	r3, r3, #1
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	4619      	mov	r1, r3
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea30:	4413      	add	r3, r2
 800ea32:	4619      	mov	r1, r3
 800ea34:	6938      	ldr	r0, [r7, #16]
 800ea36:	f7ff febb 	bl	800e7b0 <move_window>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d140      	bne.n	800eac2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	693a      	ldr	r2, [r7, #16]
 800ea4c:	8992      	ldrh	r2, [r2, #12]
 800ea4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea52:	fb02 f200 	mul.w	r2, r2, r0
 800ea56:	1a9b      	subs	r3, r3, r2
 800ea58:	440b      	add	r3, r1
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7ff fbc6 	bl	800e1ec <ld_word>
 800ea60:	4603      	mov	r3, r0
 800ea62:	617b      	str	r3, [r7, #20]
			break;
 800ea64:	e030      	b.n	800eac8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	899b      	ldrh	r3, [r3, #12]
 800ea6e:	089b      	lsrs	r3, r3, #2
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	4619      	mov	r1, r3
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea7a:	4413      	add	r3, r2
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	6938      	ldr	r0, [r7, #16]
 800ea80:	f7ff fe96 	bl	800e7b0 <move_window>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d11d      	bne.n	800eac6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	8992      	ldrh	r2, [r2, #12]
 800ea98:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea9c:	fb02 f200 	mul.w	r2, r2, r0
 800eaa0:	1a9b      	subs	r3, r3, r2
 800eaa2:	440b      	add	r3, r1
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff fbb9 	bl	800e21c <ld_dword>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eab0:	617b      	str	r3, [r7, #20]
			break;
 800eab2:	e009      	b.n	800eac8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800eab4:	2301      	movs	r3, #1
 800eab6:	617b      	str	r3, [r7, #20]
 800eab8:	e006      	b.n	800eac8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eaba:	bf00      	nop
 800eabc:	e004      	b.n	800eac8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eabe:	bf00      	nop
 800eac0:	e002      	b.n	800eac8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eac2:	bf00      	nop
 800eac4:	e000      	b.n	800eac8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eac6:	bf00      	nop
		}
	}

	return val;
 800eac8:	697b      	ldr	r3, [r7, #20]
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ead2:	b590      	push	{r4, r7, lr}
 800ead4:	b089      	sub	sp, #36	; 0x24
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	60f8      	str	r0, [r7, #12]
 800eada:	60b9      	str	r1, [r7, #8]
 800eadc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800eade:	2302      	movs	r3, #2
 800eae0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	f240 8102 	bls.w	800ecee <put_fat+0x21c>
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6a1b      	ldr	r3, [r3, #32]
 800eaee:	68ba      	ldr	r2, [r7, #8]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	f080 80fc 	bcs.w	800ecee <put_fat+0x21c>
		switch (fs->fs_type) {
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	2b03      	cmp	r3, #3
 800eafc:	f000 80b6 	beq.w	800ec6c <put_fat+0x19a>
 800eb00:	2b03      	cmp	r3, #3
 800eb02:	f300 80fd 	bgt.w	800ed00 <put_fat+0x22e>
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d003      	beq.n	800eb12 <put_fat+0x40>
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	f000 8083 	beq.w	800ec16 <put_fat+0x144>
 800eb10:	e0f6      	b.n	800ed00 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	61bb      	str	r3, [r7, #24]
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	085b      	lsrs	r3, r3, #1
 800eb1a:	69ba      	ldr	r2, [r7, #24]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	899b      	ldrh	r3, [r3, #12]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb30:	4413      	add	r3, r2
 800eb32:	4619      	mov	r1, r3
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f7ff fe3b 	bl	800e7b0 <move_window>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb3e:	7ffb      	ldrb	r3, [r7, #31]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f040 80d6 	bne.w	800ecf2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	1c5a      	adds	r2, r3, #1
 800eb50:	61ba      	str	r2, [r7, #24]
 800eb52:	68fa      	ldr	r2, [r7, #12]
 800eb54:	8992      	ldrh	r2, [r2, #12]
 800eb56:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb5a:	fb02 f200 	mul.w	r2, r2, r0
 800eb5e:	1a9b      	subs	r3, r3, r2
 800eb60:	440b      	add	r3, r1
 800eb62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d00d      	beq.n	800eb8a <put_fat+0xb8>
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	b25b      	sxtb	r3, r3
 800eb74:	f003 030f 	and.w	r3, r3, #15
 800eb78:	b25a      	sxtb	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	011b      	lsls	r3, r3, #4
 800eb80:	b25b      	sxtb	r3, r3
 800eb82:	4313      	orrs	r3, r2
 800eb84:	b25b      	sxtb	r3, r3
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	e001      	b.n	800eb8e <put_fat+0xbc>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	697a      	ldr	r2, [r7, #20]
 800eb90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2201      	movs	r2, #1
 800eb96:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	899b      	ldrh	r3, [r3, #12]
 800eba0:	4619      	mov	r1, r3
 800eba2:	69bb      	ldr	r3, [r7, #24]
 800eba4:	fbb3 f3f1 	udiv	r3, r3, r1
 800eba8:	4413      	add	r3, r2
 800ebaa:	4619      	mov	r1, r3
 800ebac:	68f8      	ldr	r0, [r7, #12]
 800ebae:	f7ff fdff 	bl	800e7b0 <move_window>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ebb6:	7ffb      	ldrb	r3, [r7, #31]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f040 809c 	bne.w	800ecf6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	899b      	ldrh	r3, [r3, #12]
 800ebc8:	461a      	mov	r2, r3
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebd0:	fb02 f200 	mul.w	r2, r2, r0
 800ebd4:	1a9b      	subs	r3, r3, r2
 800ebd6:	440b      	add	r3, r1
 800ebd8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d003      	beq.n	800ebec <put_fat+0x11a>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	091b      	lsrs	r3, r3, #4
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	e00e      	b.n	800ec0a <put_fat+0x138>
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	b25b      	sxtb	r3, r3
 800ebf2:	f023 030f 	bic.w	r3, r3, #15
 800ebf6:	b25a      	sxtb	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	0a1b      	lsrs	r3, r3, #8
 800ebfc:	b25b      	sxtb	r3, r3
 800ebfe:	f003 030f 	and.w	r3, r3, #15
 800ec02:	b25b      	sxtb	r3, r3
 800ec04:	4313      	orrs	r3, r2
 800ec06:	b25b      	sxtb	r3, r3
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	697a      	ldr	r2, [r7, #20]
 800ec0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2201      	movs	r2, #1
 800ec12:	70da      	strb	r2, [r3, #3]
			break;
 800ec14:	e074      	b.n	800ed00 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	899b      	ldrh	r3, [r3, #12]
 800ec1e:	085b      	lsrs	r3, r3, #1
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	4619      	mov	r1, r3
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec2a:	4413      	add	r3, r2
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f7ff fdbe 	bl	800e7b0 <move_window>
 800ec34:	4603      	mov	r3, r0
 800ec36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec38:	7ffb      	ldrb	r3, [r7, #31]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d15d      	bne.n	800ecfa <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	005b      	lsls	r3, r3, #1
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	8992      	ldrh	r2, [r2, #12]
 800ec4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec50:	fb02 f200 	mul.w	r2, r2, r0
 800ec54:	1a9b      	subs	r3, r3, r2
 800ec56:	440b      	add	r3, r1
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	b292      	uxth	r2, r2
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7ff faff 	bl	800e262 <st_word>
			fs->wflag = 1;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2201      	movs	r2, #1
 800ec68:	70da      	strb	r2, [r3, #3]
			break;
 800ec6a:	e049      	b.n	800ed00 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	899b      	ldrh	r3, [r3, #12]
 800ec74:	089b      	lsrs	r3, r3, #2
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	4619      	mov	r1, r3
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec80:	4413      	add	r3, r2
 800ec82:	4619      	mov	r1, r3
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f7ff fd93 	bl	800e7b0 <move_window>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec8e:	7ffb      	ldrb	r3, [r7, #31]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d134      	bne.n	800ecfe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	8992      	ldrh	r2, [r2, #12]
 800eca8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecac:	fb02 f200 	mul.w	r2, r2, r0
 800ecb0:	1a9b      	subs	r3, r3, r2
 800ecb2:	440b      	add	r3, r1
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7ff fab1 	bl	800e21c <ld_dword>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ecc0:	4323      	orrs	r3, r4
 800ecc2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	68fa      	ldr	r2, [r7, #12]
 800ecd0:	8992      	ldrh	r2, [r2, #12]
 800ecd2:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecd6:	fb02 f200 	mul.w	r2, r2, r0
 800ecda:	1a9b      	subs	r3, r3, r2
 800ecdc:	440b      	add	r3, r1
 800ecde:	6879      	ldr	r1, [r7, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff fad9 	bl	800e298 <st_dword>
			fs->wflag = 1;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2201      	movs	r2, #1
 800ecea:	70da      	strb	r2, [r3, #3]
			break;
 800ecec:	e008      	b.n	800ed00 <put_fat+0x22e>
		}
	}
 800ecee:	bf00      	nop
 800ecf0:	e006      	b.n	800ed00 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ecf2:	bf00      	nop
 800ecf4:	e004      	b.n	800ed00 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ecf6:	bf00      	nop
 800ecf8:	e002      	b.n	800ed00 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ecfa:	bf00      	nop
 800ecfc:	e000      	b.n	800ed00 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ecfe:	bf00      	nop
	return res;
 800ed00:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3724      	adds	r7, #36	; 0x24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd90      	pop	{r4, r7, pc}

0800ed0a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b088      	sub	sp, #32
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	60f8      	str	r0, [r7, #12]
 800ed12:	60b9      	str	r1, [r7, #8]
 800ed14:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ed16:	2300      	movs	r3, #0
 800ed18:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d904      	bls.n	800ed30 <remove_chain+0x26>
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	6a1b      	ldr	r3, [r3, #32]
 800ed2a:	68ba      	ldr	r2, [r7, #8]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d301      	bcc.n	800ed34 <remove_chain+0x2a>
 800ed30:	2302      	movs	r3, #2
 800ed32:	e04b      	b.n	800edcc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00c      	beq.n	800ed54 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ed3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed3e:	6879      	ldr	r1, [r7, #4]
 800ed40:	69b8      	ldr	r0, [r7, #24]
 800ed42:	f7ff fec6 	bl	800ead2 <put_fat>
 800ed46:	4603      	mov	r3, r0
 800ed48:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ed4a:	7ffb      	ldrb	r3, [r7, #31]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <remove_chain+0x4a>
 800ed50:	7ffb      	ldrb	r3, [r7, #31]
 800ed52:	e03b      	b.n	800edcc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ed54:	68b9      	ldr	r1, [r7, #8]
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	f7ff fde7 	bl	800e92a <get_fat>
 800ed5c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d031      	beq.n	800edc8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d101      	bne.n	800ed6e <remove_chain+0x64>
 800ed6a:	2302      	movs	r3, #2
 800ed6c:	e02e      	b.n	800edcc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed74:	d101      	bne.n	800ed7a <remove_chain+0x70>
 800ed76:	2301      	movs	r3, #1
 800ed78:	e028      	b.n	800edcc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	68b9      	ldr	r1, [r7, #8]
 800ed7e:	69b8      	ldr	r0, [r7, #24]
 800ed80:	f7ff fea7 	bl	800ead2 <put_fat>
 800ed84:	4603      	mov	r3, r0
 800ed86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ed88:	7ffb      	ldrb	r3, [r7, #31]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <remove_chain+0x88>
 800ed8e:	7ffb      	ldrb	r3, [r7, #31]
 800ed90:	e01c      	b.n	800edcc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	69da      	ldr	r2, [r3, #28]
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	6a1b      	ldr	r3, [r3, #32]
 800ed9a:	3b02      	subs	r3, #2
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d20b      	bcs.n	800edb8 <remove_chain+0xae>
			fs->free_clst++;
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	69db      	ldr	r3, [r3, #28]
 800eda4:	1c5a      	adds	r2, r3, #1
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	791b      	ldrb	r3, [r3, #4]
 800edae:	f043 0301 	orr.w	r3, r3, #1
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	6a1b      	ldr	r3, [r3, #32]
 800edc0:	68ba      	ldr	r2, [r7, #8]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d3c6      	bcc.n	800ed54 <remove_chain+0x4a>
 800edc6:	e000      	b.n	800edca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800edc8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3720      	adds	r7, #32
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b088      	sub	sp, #32
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10d      	bne.n	800ee06 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	699b      	ldr	r3, [r3, #24]
 800edee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d004      	beq.n	800ee00 <create_chain+0x2c>
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	6a1b      	ldr	r3, [r3, #32]
 800edfa:	69ba      	ldr	r2, [r7, #24]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d31b      	bcc.n	800ee38 <create_chain+0x64>
 800ee00:	2301      	movs	r3, #1
 800ee02:	61bb      	str	r3, [r7, #24]
 800ee04:	e018      	b.n	800ee38 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ee06:	6839      	ldr	r1, [r7, #0]
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7ff fd8e 	bl	800e92a <get_fat>
 800ee0e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d801      	bhi.n	800ee1a <create_chain+0x46>
 800ee16:	2301      	movs	r3, #1
 800ee18:	e070      	b.n	800eefc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee20:	d101      	bne.n	800ee26 <create_chain+0x52>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	e06a      	b.n	800eefc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	6a1b      	ldr	r3, [r3, #32]
 800ee2a:	68fa      	ldr	r2, [r7, #12]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d201      	bcs.n	800ee34 <create_chain+0x60>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	e063      	b.n	800eefc <create_chain+0x128>
		scl = clst;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	6a1b      	ldr	r3, [r3, #32]
 800ee46:	69fa      	ldr	r2, [r7, #28]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d307      	bcc.n	800ee5c <create_chain+0x88>
				ncl = 2;
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ee50:	69fa      	ldr	r2, [r7, #28]
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d901      	bls.n	800ee5c <create_chain+0x88>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	e04f      	b.n	800eefc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ee5c:	69f9      	ldr	r1, [r7, #28]
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff fd63 	bl	800e92a <get_fat>
 800ee64:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00e      	beq.n	800ee8a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d003      	beq.n	800ee7a <create_chain+0xa6>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee78:	d101      	bne.n	800ee7e <create_chain+0xaa>
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	e03e      	b.n	800eefc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ee7e:	69fa      	ldr	r2, [r7, #28]
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d1da      	bne.n	800ee3c <create_chain+0x68>
 800ee86:	2300      	movs	r3, #0
 800ee88:	e038      	b.n	800eefc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ee8a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ee8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee90:	69f9      	ldr	r1, [r7, #28]
 800ee92:	6938      	ldr	r0, [r7, #16]
 800ee94:	f7ff fe1d 	bl	800ead2 <put_fat>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ee9c:	7dfb      	ldrb	r3, [r7, #23]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d109      	bne.n	800eeb6 <create_chain+0xe2>
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d006      	beq.n	800eeb6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800eea8:	69fa      	ldr	r2, [r7, #28]
 800eeaa:	6839      	ldr	r1, [r7, #0]
 800eeac:	6938      	ldr	r0, [r7, #16]
 800eeae:	f7ff fe10 	bl	800ead2 <put_fat>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eeb6:	7dfb      	ldrb	r3, [r7, #23]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d116      	bne.n	800eeea <create_chain+0x116>
		fs->last_clst = ncl;
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	69fa      	ldr	r2, [r7, #28]
 800eec0:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	69da      	ldr	r2, [r3, #28]
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	6a1b      	ldr	r3, [r3, #32]
 800eeca:	3b02      	subs	r3, #2
 800eecc:	429a      	cmp	r2, r3
 800eece:	d804      	bhi.n	800eeda <create_chain+0x106>
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	69db      	ldr	r3, [r3, #28]
 800eed4:	1e5a      	subs	r2, r3, #1
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	791b      	ldrb	r3, [r3, #4]
 800eede:	f043 0301 	orr.w	r3, r3, #1
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	711a      	strb	r2, [r3, #4]
 800eee8:	e007      	b.n	800eefa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800eeea:	7dfb      	ldrb	r3, [r7, #23]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d102      	bne.n	800eef6 <create_chain+0x122>
 800eef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eef4:	e000      	b.n	800eef8 <create_chain+0x124>
 800eef6:	2301      	movs	r3, #1
 800eef8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eefa:	69fb      	ldr	r3, [r7, #28]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3720      	adds	r7, #32
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b087      	sub	sp, #28
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef18:	3304      	adds	r3, #4
 800ef1a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	899b      	ldrh	r3, [r3, #12]
 800ef20:	461a      	mov	r2, r3
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	8952      	ldrh	r2, [r2, #10]
 800ef2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef30:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	1d1a      	adds	r2, r3, #4
 800ef36:	613a      	str	r2, [r7, #16]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d101      	bne.n	800ef46 <clmt_clust+0x42>
 800ef42:	2300      	movs	r3, #0
 800ef44:	e010      	b.n	800ef68 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ef46:	697a      	ldr	r2, [r7, #20]
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d307      	bcc.n	800ef5e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ef4e:	697a      	ldr	r2, [r7, #20]
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	617b      	str	r3, [r7, #20]
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	3304      	adds	r3, #4
 800ef5a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef5c:	e7e9      	b.n	800ef32 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ef5e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	4413      	add	r3, r2
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	371c      	adds	r7, #28
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b086      	sub	sp, #24
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef8a:	d204      	bcs.n	800ef96 <dir_sdi+0x22>
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	f003 031f 	and.w	r3, r3, #31
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d001      	beq.n	800ef9a <dir_sdi+0x26>
		return FR_INT_ERR;
 800ef96:	2302      	movs	r3, #2
 800ef98:	e071      	b.n	800f07e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	683a      	ldr	r2, [r7, #0]
 800ef9e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	689b      	ldr	r3, [r3, #8]
 800efa4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d106      	bne.n	800efba <dir_sdi+0x46>
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d902      	bls.n	800efba <dir_sdi+0x46>
		clst = fs->dirbase;
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efb8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d10c      	bne.n	800efda <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	095b      	lsrs	r3, r3, #5
 800efc4:	693a      	ldr	r2, [r7, #16]
 800efc6:	8912      	ldrh	r2, [r2, #8]
 800efc8:	4293      	cmp	r3, r2
 800efca:	d301      	bcc.n	800efd0 <dir_sdi+0x5c>
 800efcc:	2302      	movs	r3, #2
 800efce:	e056      	b.n	800f07e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	61da      	str	r2, [r3, #28]
 800efd8:	e02d      	b.n	800f036 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	895b      	ldrh	r3, [r3, #10]
 800efde:	461a      	mov	r2, r3
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	899b      	ldrh	r3, [r3, #12]
 800efe4:	fb03 f302 	mul.w	r3, r3, r2
 800efe8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800efea:	e019      	b.n	800f020 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6979      	ldr	r1, [r7, #20]
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7ff fc9a 	bl	800e92a <get_fat>
 800eff6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800effe:	d101      	bne.n	800f004 <dir_sdi+0x90>
 800f000:	2301      	movs	r3, #1
 800f002:	e03c      	b.n	800f07e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	2b01      	cmp	r3, #1
 800f008:	d904      	bls.n	800f014 <dir_sdi+0xa0>
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	429a      	cmp	r2, r3
 800f012:	d301      	bcc.n	800f018 <dir_sdi+0xa4>
 800f014:	2302      	movs	r3, #2
 800f016:	e032      	b.n	800f07e <dir_sdi+0x10a>
			ofs -= csz;
 800f018:	683a      	ldr	r2, [r7, #0]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f020:	683a      	ldr	r2, [r7, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	429a      	cmp	r2, r3
 800f026:	d2e1      	bcs.n	800efec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f028:	6979      	ldr	r1, [r7, #20]
 800f02a:	6938      	ldr	r0, [r7, #16]
 800f02c:	f7ff fc5e 	bl	800e8ec <clust2sect>
 800f030:	4602      	mov	r2, r0
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	697a      	ldr	r2, [r7, #20]
 800f03a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	69db      	ldr	r3, [r3, #28]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d101      	bne.n	800f048 <dir_sdi+0xd4>
 800f044:	2302      	movs	r3, #2
 800f046:	e01a      	b.n	800f07e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	69da      	ldr	r2, [r3, #28]
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	899b      	ldrh	r3, [r3, #12]
 800f050:	4619      	mov	r1, r3
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	fbb3 f3f1 	udiv	r3, r3, r1
 800f058:	441a      	add	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	899b      	ldrh	r3, [r3, #12]
 800f068:	461a      	mov	r2, r3
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f070:	fb02 f200 	mul.w	r2, r2, r0
 800f074:	1a9b      	subs	r3, r3, r2
 800f076:	18ca      	adds	r2, r1, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3718      	adds	r7, #24
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b086      	sub	sp, #24
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	695b      	ldr	r3, [r3, #20]
 800f09a:	3320      	adds	r3, #32
 800f09c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	69db      	ldr	r3, [r3, #28]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d003      	beq.n	800f0ae <dir_next+0x28>
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0ac:	d301      	bcc.n	800f0b2 <dir_next+0x2c>
 800f0ae:	2304      	movs	r3, #4
 800f0b0:	e0bb      	b.n	800f22a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	899b      	ldrh	r3, [r3, #12]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0be:	fb02 f201 	mul.w	r2, r2, r1
 800f0c2:	1a9b      	subs	r3, r3, r2
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f040 809d 	bne.w	800f204 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	69db      	ldr	r3, [r3, #28]
 800f0ce:	1c5a      	adds	r2, r3, #1
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	699b      	ldr	r3, [r3, #24]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d10b      	bne.n	800f0f4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	095b      	lsrs	r3, r3, #5
 800f0e0:	68fa      	ldr	r2, [r7, #12]
 800f0e2:	8912      	ldrh	r2, [r2, #8]
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	f0c0 808d 	bcc.w	800f204 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	61da      	str	r2, [r3, #28]
 800f0f0:	2304      	movs	r3, #4
 800f0f2:	e09a      	b.n	800f22a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	899b      	ldrh	r3, [r3, #12]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f100:	68fa      	ldr	r2, [r7, #12]
 800f102:	8952      	ldrh	r2, [r2, #10]
 800f104:	3a01      	subs	r2, #1
 800f106:	4013      	ands	r3, r2
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d17b      	bne.n	800f204 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	699b      	ldr	r3, [r3, #24]
 800f112:	4619      	mov	r1, r3
 800f114:	4610      	mov	r0, r2
 800f116:	f7ff fc08 	bl	800e92a <get_fat>
 800f11a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d801      	bhi.n	800f126 <dir_next+0xa0>
 800f122:	2302      	movs	r3, #2
 800f124:	e081      	b.n	800f22a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f12c:	d101      	bne.n	800f132 <dir_next+0xac>
 800f12e:	2301      	movs	r3, #1
 800f130:	e07b      	b.n	800f22a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	6a1b      	ldr	r3, [r3, #32]
 800f136:	697a      	ldr	r2, [r7, #20]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d359      	bcc.n	800f1f0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d104      	bne.n	800f14c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2200      	movs	r2, #0
 800f146:	61da      	str	r2, [r3, #28]
 800f148:	2304      	movs	r3, #4
 800f14a:	e06e      	b.n	800f22a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	699b      	ldr	r3, [r3, #24]
 800f152:	4619      	mov	r1, r3
 800f154:	4610      	mov	r0, r2
 800f156:	f7ff fe3d 	bl	800edd4 <create_chain>
 800f15a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d101      	bne.n	800f166 <dir_next+0xe0>
 800f162:	2307      	movs	r3, #7
 800f164:	e061      	b.n	800f22a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d101      	bne.n	800f170 <dir_next+0xea>
 800f16c:	2302      	movs	r3, #2
 800f16e:	e05c      	b.n	800f22a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f176:	d101      	bne.n	800f17c <dir_next+0xf6>
 800f178:	2301      	movs	r3, #1
 800f17a:	e056      	b.n	800f22a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f7ff fad3 	bl	800e728 <sync_window>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d001      	beq.n	800f18c <dir_next+0x106>
 800f188:	2301      	movs	r3, #1
 800f18a:	e04e      	b.n	800f22a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	899b      	ldrh	r3, [r3, #12]
 800f196:	461a      	mov	r2, r3
 800f198:	2100      	movs	r1, #0
 800f19a:	f7ff f8ca 	bl	800e332 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f19e:	2300      	movs	r3, #0
 800f1a0:	613b      	str	r3, [r7, #16]
 800f1a2:	6979      	ldr	r1, [r7, #20]
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f7ff fba1 	bl	800e8ec <clust2sect>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	639a      	str	r2, [r3, #56]	; 0x38
 800f1b0:	e012      	b.n	800f1d8 <dir_next+0x152>
						fs->wflag = 1;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f7ff fab5 	bl	800e728 <sync_window>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d001      	beq.n	800f1c8 <dir_next+0x142>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e030      	b.n	800f22a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	613b      	str	r3, [r7, #16]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d2:	1c5a      	adds	r2, r3, #1
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	639a      	str	r2, [r3, #56]	; 0x38
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	895b      	ldrh	r3, [r3, #10]
 800f1dc:	461a      	mov	r2, r3
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d3e6      	bcc.n	800f1b2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	1ad2      	subs	r2, r2, r3
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	697a      	ldr	r2, [r7, #20]
 800f1f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f1f6:	6979      	ldr	r1, [r7, #20]
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f7ff fb77 	bl	800e8ec <clust2sect>
 800f1fe:	4602      	mov	r2, r0
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	68ba      	ldr	r2, [r7, #8]
 800f208:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	899b      	ldrh	r3, [r3, #12]
 800f214:	461a      	mov	r2, r3
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	fbb3 f0f2 	udiv	r0, r3, r2
 800f21c:	fb02 f200 	mul.w	r2, r2, r0
 800f220:	1a9b      	subs	r3, r3, r2
 800f222:	18ca      	adds	r2, r1, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f228:	2300      	movs	r3, #0
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3718      	adds	r7, #24
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b086      	sub	sp, #24
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f242:	2100      	movs	r1, #0
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff fe95 	bl	800ef74 <dir_sdi>
 800f24a:	4603      	mov	r3, r0
 800f24c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d12b      	bne.n	800f2ac <dir_alloc+0x7a>
		n = 0;
 800f254:	2300      	movs	r3, #0
 800f256:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	69db      	ldr	r3, [r3, #28]
 800f25c:	4619      	mov	r1, r3
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7ff faa6 	bl	800e7b0 <move_window>
 800f264:	4603      	mov	r3, r0
 800f266:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f268:	7dfb      	ldrb	r3, [r7, #23]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d11d      	bne.n	800f2aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a1b      	ldr	r3, [r3, #32]
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	2be5      	cmp	r3, #229	; 0xe5
 800f276:	d004      	beq.n	800f282 <dir_alloc+0x50>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a1b      	ldr	r3, [r3, #32]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d107      	bne.n	800f292 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	3301      	adds	r3, #1
 800f286:	613b      	str	r3, [r7, #16]
 800f288:	693a      	ldr	r2, [r7, #16]
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d102      	bne.n	800f296 <dir_alloc+0x64>
 800f290:	e00c      	b.n	800f2ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f292:	2300      	movs	r3, #0
 800f294:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f296:	2101      	movs	r1, #1
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7ff fef4 	bl	800f086 <dir_next>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f2a2:	7dfb      	ldrb	r3, [r7, #23]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d0d7      	beq.n	800f258 <dir_alloc+0x26>
 800f2a8:	e000      	b.n	800f2ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f2aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f2ac:	7dfb      	ldrb	r3, [r7, #23]
 800f2ae:	2b04      	cmp	r3, #4
 800f2b0:	d101      	bne.n	800f2b6 <dir_alloc+0x84>
 800f2b2:	2307      	movs	r3, #7
 800f2b4:	75fb      	strb	r3, [r7, #23]
	return res;
 800f2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3718      	adds	r7, #24
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	331a      	adds	r3, #26
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fe ff8c 	bl	800e1ec <ld_word>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	2b03      	cmp	r3, #3
 800f2de:	d109      	bne.n	800f2f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	3314      	adds	r3, #20
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fe ff81 	bl	800e1ec <ld_word>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	041b      	lsls	r3, r3, #16
 800f2ee:	68fa      	ldr	r2, [r7, #12]
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b084      	sub	sp, #16
 800f302:	af00      	add	r7, sp, #0
 800f304:	60f8      	str	r0, [r7, #12]
 800f306:	60b9      	str	r1, [r7, #8]
 800f308:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	331a      	adds	r3, #26
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	b292      	uxth	r2, r2
 800f312:	4611      	mov	r1, r2
 800f314:	4618      	mov	r0, r3
 800f316:	f7fe ffa4 	bl	800e262 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d109      	bne.n	800f336 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	f103 0214 	add.w	r2, r3, #20
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	0c1b      	lsrs	r3, r3, #16
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	4619      	mov	r1, r3
 800f330:	4610      	mov	r0, r2
 800f332:	f7fe ff96 	bl	800e262 <st_word>
	}
}
 800f336:	bf00      	nop
 800f338:	3710      	adds	r7, #16
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
	...

0800f340 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f340:	b590      	push	{r4, r7, lr}
 800f342:	b087      	sub	sp, #28
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	331a      	adds	r3, #26
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fe ff4c 	bl	800e1ec <ld_word>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d001      	beq.n	800f35e <cmp_lfn+0x1e>
 800f35a:	2300      	movs	r3, #0
 800f35c:	e059      	b.n	800f412 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f366:	1e5a      	subs	r2, r3, #1
 800f368:	4613      	mov	r3, r2
 800f36a:	005b      	lsls	r3, r3, #1
 800f36c:	4413      	add	r3, r2
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	4413      	add	r3, r2
 800f372:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f374:	2301      	movs	r3, #1
 800f376:	81fb      	strh	r3, [r7, #14]
 800f378:	2300      	movs	r3, #0
 800f37a:	613b      	str	r3, [r7, #16]
 800f37c:	e033      	b.n	800f3e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f37e:	4a27      	ldr	r2, [pc, #156]	; (800f41c <cmp_lfn+0xdc>)
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	4413      	add	r3, r2
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	461a      	mov	r2, r3
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	4413      	add	r3, r2
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe ff2d 	bl	800e1ec <ld_word>
 800f392:	4603      	mov	r3, r0
 800f394:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f396:	89fb      	ldrh	r3, [r7, #14]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d01a      	beq.n	800f3d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	2bfe      	cmp	r3, #254	; 0xfe
 800f3a0:	d812      	bhi.n	800f3c8 <cmp_lfn+0x88>
 800f3a2:	89bb      	ldrh	r3, [r7, #12]
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f002 f909 	bl	80115bc <ff_wtoupper>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	461c      	mov	r4, r3
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	1c5a      	adds	r2, r3, #1
 800f3b2:	617a      	str	r2, [r7, #20]
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	881b      	ldrh	r3, [r3, #0]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f002 f8fd 	bl	80115bc <ff_wtoupper>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	429c      	cmp	r4, r3
 800f3c6:	d001      	beq.n	800f3cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	e022      	b.n	800f412 <cmp_lfn+0xd2>
			}
			wc = uc;
 800f3cc:	89bb      	ldrh	r3, [r7, #12]
 800f3ce:	81fb      	strh	r3, [r7, #14]
 800f3d0:	e006      	b.n	800f3e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f3d2:	89bb      	ldrh	r3, [r7, #12]
 800f3d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d001      	beq.n	800f3e0 <cmp_lfn+0xa0>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	e018      	b.n	800f412 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	613b      	str	r3, [r7, #16]
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	2b0c      	cmp	r3, #12
 800f3ea:	d9c8      	bls.n	800f37e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00b      	beq.n	800f410 <cmp_lfn+0xd0>
 800f3f8:	89fb      	ldrh	r3, [r7, #14]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d008      	beq.n	800f410 <cmp_lfn+0xd0>
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	4413      	add	r3, r2
 800f406:	881b      	ldrh	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <cmp_lfn+0xd0>
 800f40c:	2300      	movs	r3, #0
 800f40e:	e000      	b.n	800f412 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f410:	2301      	movs	r3, #1
}
 800f412:	4618      	mov	r0, r3
 800f414:	371c      	adds	r7, #28
 800f416:	46bd      	mov	sp, r7
 800f418:	bd90      	pop	{r4, r7, pc}
 800f41a:	bf00      	nop
 800f41c:	08019b88 	.word	0x08019b88

0800f420 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b088      	sub	sp, #32
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	4611      	mov	r1, r2
 800f42c:	461a      	mov	r2, r3
 800f42e:	460b      	mov	r3, r1
 800f430:	71fb      	strb	r3, [r7, #7]
 800f432:	4613      	mov	r3, r2
 800f434:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	330d      	adds	r3, #13
 800f43a:	79ba      	ldrb	r2, [r7, #6]
 800f43c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	330b      	adds	r3, #11
 800f442:	220f      	movs	r2, #15
 800f444:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	330c      	adds	r3, #12
 800f44a:	2200      	movs	r2, #0
 800f44c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	331a      	adds	r3, #26
 800f452:	2100      	movs	r1, #0
 800f454:	4618      	mov	r0, r3
 800f456:	f7fe ff04 	bl	800e262 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f45a:	79fb      	ldrb	r3, [r7, #7]
 800f45c:	1e5a      	subs	r2, r3, #1
 800f45e:	4613      	mov	r3, r2
 800f460:	005b      	lsls	r3, r3, #1
 800f462:	4413      	add	r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	4413      	add	r3, r2
 800f468:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f46a:	2300      	movs	r3, #0
 800f46c:	82fb      	strh	r3, [r7, #22]
 800f46e:	2300      	movs	r3, #0
 800f470:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f472:	8afb      	ldrh	r3, [r7, #22]
 800f474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f478:	4293      	cmp	r3, r2
 800f47a:	d007      	beq.n	800f48c <put_lfn+0x6c>
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	1c5a      	adds	r2, r3, #1
 800f480:	61fa      	str	r2, [r7, #28]
 800f482:	005b      	lsls	r3, r3, #1
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	4413      	add	r3, r2
 800f488:	881b      	ldrh	r3, [r3, #0]
 800f48a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f48c:	4a17      	ldr	r2, [pc, #92]	; (800f4ec <put_lfn+0xcc>)
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	4413      	add	r3, r2
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	461a      	mov	r2, r3
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	4413      	add	r3, r2
 800f49a:	8afa      	ldrh	r2, [r7, #22]
 800f49c:	4611      	mov	r1, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fedf 	bl	800e262 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f4a4:	8afb      	ldrh	r3, [r7, #22]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d102      	bne.n	800f4b0 <put_lfn+0x90>
 800f4aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	61bb      	str	r3, [r7, #24]
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	2b0c      	cmp	r3, #12
 800f4ba:	d9da      	bls.n	800f472 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f4bc:	8afb      	ldrh	r3, [r7, #22]
 800f4be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d006      	beq.n	800f4d4 <put_lfn+0xb4>
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	005b      	lsls	r3, r3, #1
 800f4ca:	68fa      	ldr	r2, [r7, #12]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d103      	bne.n	800f4dc <put_lfn+0xbc>
 800f4d4:	79fb      	ldrb	r3, [r7, #7]
 800f4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	79fa      	ldrb	r2, [r7, #7]
 800f4e0:	701a      	strb	r2, [r3, #0]
}
 800f4e2:	bf00      	nop
 800f4e4:	3720      	adds	r7, #32
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	08019b88 	.word	0x08019b88

0800f4f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b08c      	sub	sp, #48	; 0x30
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	60b9      	str	r1, [r7, #8]
 800f4fa:	607a      	str	r2, [r7, #4]
 800f4fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f4fe:	220b      	movs	r2, #11
 800f500:	68b9      	ldr	r1, [r7, #8]
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f7fe fef4 	bl	800e2f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	2b05      	cmp	r3, #5
 800f50c:	d92b      	bls.n	800f566 <gen_numname+0x76>
		sr = seq;
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f512:	e022      	b.n	800f55a <gen_numname+0x6a>
			wc = *lfn++;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	1c9a      	adds	r2, r3, #2
 800f518:	607a      	str	r2, [r7, #4]
 800f51a:	881b      	ldrh	r3, [r3, #0]
 800f51c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f51e:	2300      	movs	r3, #0
 800f520:	62bb      	str	r3, [r7, #40]	; 0x28
 800f522:	e017      	b.n	800f554 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	005a      	lsls	r2, r3, #1
 800f528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f52a:	f003 0301 	and.w	r3, r3, #1
 800f52e:	4413      	add	r3, r2
 800f530:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f534:	085b      	lsrs	r3, r3, #1
 800f536:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d005      	beq.n	800f54e <gen_numname+0x5e>
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f548:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f54c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f550:	3301      	adds	r3, #1
 800f552:	62bb      	str	r3, [r7, #40]	; 0x28
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	2b0f      	cmp	r3, #15
 800f558:	d9e4      	bls.n	800f524 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1d8      	bne.n	800f514 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f566:	2307      	movs	r3, #7
 800f568:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	f003 030f 	and.w	r3, r3, #15
 800f572:	b2db      	uxtb	r3, r3
 800f574:	3330      	adds	r3, #48	; 0x30
 800f576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f57a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f57e:	2b39      	cmp	r3, #57	; 0x39
 800f580:	d904      	bls.n	800f58c <gen_numname+0x9c>
 800f582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f586:	3307      	adds	r3, #7
 800f588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58e:	1e5a      	subs	r2, r3, #1
 800f590:	62ba      	str	r2, [r7, #40]	; 0x28
 800f592:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f596:	4413      	add	r3, r2
 800f598:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f59c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	091b      	lsrs	r3, r3, #4
 800f5a4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d1de      	bne.n	800f56a <gen_numname+0x7a>
	ns[i] = '~';
 800f5ac:	f107 0214 	add.w	r2, r7, #20
 800f5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b2:	4413      	add	r3, r2
 800f5b4:	227e      	movs	r2, #126	; 0x7e
 800f5b6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f5bc:	e002      	b.n	800f5c4 <gen_numname+0xd4>
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	627b      	str	r3, [r7, #36]	; 0x24
 800f5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d205      	bcs.n	800f5d8 <gen_numname+0xe8>
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d0:	4413      	add	r3, r2
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	2b20      	cmp	r3, #32
 800f5d6:	d1f2      	bne.n	800f5be <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5da:	2b07      	cmp	r3, #7
 800f5dc:	d808      	bhi.n	800f5f0 <gen_numname+0x100>
 800f5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	62ba      	str	r2, [r7, #40]	; 0x28
 800f5e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f5e8:	4413      	add	r3, r2
 800f5ea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f5ee:	e000      	b.n	800f5f2 <gen_numname+0x102>
 800f5f0:	2120      	movs	r1, #32
 800f5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f4:	1c5a      	adds	r2, r3, #1
 800f5f6:	627a      	str	r2, [r7, #36]	; 0x24
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	460a      	mov	r2, r1
 800f5fe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f602:	2b07      	cmp	r3, #7
 800f604:	d9e8      	bls.n	800f5d8 <gen_numname+0xe8>
}
 800f606:	bf00      	nop
 800f608:	bf00      	nop
 800f60a:	3730      	adds	r7, #48	; 0x30
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f610:	b480      	push	{r7}
 800f612:	b085      	sub	sp, #20
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f618:	2300      	movs	r3, #0
 800f61a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f61c:	230b      	movs	r3, #11
 800f61e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f620:	7bfb      	ldrb	r3, [r7, #15]
 800f622:	b2da      	uxtb	r2, r3
 800f624:	0852      	lsrs	r2, r2, #1
 800f626:	01db      	lsls	r3, r3, #7
 800f628:	4313      	orrs	r3, r2
 800f62a:	b2da      	uxtb	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	1c59      	adds	r1, r3, #1
 800f630:	6079      	str	r1, [r7, #4]
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	4413      	add	r3, r2
 800f636:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	3b01      	subs	r3, #1
 800f63c:	60bb      	str	r3, [r7, #8]
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1ed      	bne.n	800f620 <sum_sfn+0x10>
	return sum;
 800f644:	7bfb      	ldrb	r3, [r7, #15]
}
 800f646:	4618      	mov	r0, r3
 800f648:	3714      	adds	r7, #20
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr

0800f652 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b086      	sub	sp, #24
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f660:	2100      	movs	r1, #0
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f7ff fc86 	bl	800ef74 <dir_sdi>
 800f668:	4603      	mov	r3, r0
 800f66a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d001      	beq.n	800f676 <dir_find+0x24>
 800f672:	7dfb      	ldrb	r3, [r7, #23]
 800f674:	e0a9      	b.n	800f7ca <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f676:	23ff      	movs	r3, #255	; 0xff
 800f678:	753b      	strb	r3, [r7, #20]
 800f67a:	7d3b      	ldrb	r3, [r7, #20]
 800f67c:	757b      	strb	r3, [r7, #21]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f684:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	69db      	ldr	r3, [r3, #28]
 800f68a:	4619      	mov	r1, r3
 800f68c:	6938      	ldr	r0, [r7, #16]
 800f68e:	f7ff f88f 	bl	800e7b0 <move_window>
 800f692:	4603      	mov	r3, r0
 800f694:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f696:	7dfb      	ldrb	r3, [r7, #23]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f040 8090 	bne.w	800f7be <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6a1b      	ldr	r3, [r3, #32]
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f6a6:	7dbb      	ldrb	r3, [r7, #22]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d102      	bne.n	800f6b2 <dir_find+0x60>
 800f6ac:	2304      	movs	r3, #4
 800f6ae:	75fb      	strb	r3, [r7, #23]
 800f6b0:	e08a      	b.n	800f7c8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a1b      	ldr	r3, [r3, #32]
 800f6b6:	330b      	adds	r3, #11
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6be:	73fb      	strb	r3, [r7, #15]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	7bfa      	ldrb	r2, [r7, #15]
 800f6c4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f6c6:	7dbb      	ldrb	r3, [r7, #22]
 800f6c8:	2be5      	cmp	r3, #229	; 0xe5
 800f6ca:	d007      	beq.n	800f6dc <dir_find+0x8a>
 800f6cc:	7bfb      	ldrb	r3, [r7, #15]
 800f6ce:	f003 0308 	and.w	r3, r3, #8
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d009      	beq.n	800f6ea <dir_find+0x98>
 800f6d6:	7bfb      	ldrb	r3, [r7, #15]
 800f6d8:	2b0f      	cmp	r3, #15
 800f6da:	d006      	beq.n	800f6ea <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f6dc:	23ff      	movs	r3, #255	; 0xff
 800f6de:	757b      	strb	r3, [r7, #21]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6e6:	631a      	str	r2, [r3, #48]	; 0x30
 800f6e8:	e05e      	b.n	800f7a8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
 800f6ec:	2b0f      	cmp	r3, #15
 800f6ee:	d136      	bne.n	800f75e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d154      	bne.n	800f7a8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f6fe:	7dbb      	ldrb	r3, [r7, #22]
 800f700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00d      	beq.n	800f724 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6a1b      	ldr	r3, [r3, #32]
 800f70c:	7b5b      	ldrb	r3, [r3, #13]
 800f70e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f710:	7dbb      	ldrb	r3, [r7, #22]
 800f712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f716:	75bb      	strb	r3, [r7, #22]
 800f718:	7dbb      	ldrb	r3, [r7, #22]
 800f71a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	695a      	ldr	r2, [r3, #20]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f724:	7dba      	ldrb	r2, [r7, #22]
 800f726:	7d7b      	ldrb	r3, [r7, #21]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d115      	bne.n	800f758 <dir_find+0x106>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6a1b      	ldr	r3, [r3, #32]
 800f730:	330d      	adds	r3, #13
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	7d3a      	ldrb	r2, [r7, #20]
 800f736:	429a      	cmp	r2, r3
 800f738:	d10e      	bne.n	800f758 <dir_find+0x106>
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	691a      	ldr	r2, [r3, #16]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6a1b      	ldr	r3, [r3, #32]
 800f742:	4619      	mov	r1, r3
 800f744:	4610      	mov	r0, r2
 800f746:	f7ff fdfb 	bl	800f340 <cmp_lfn>
 800f74a:	4603      	mov	r3, r0
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d003      	beq.n	800f758 <dir_find+0x106>
 800f750:	7d7b      	ldrb	r3, [r7, #21]
 800f752:	3b01      	subs	r3, #1
 800f754:	b2db      	uxtb	r3, r3
 800f756:	e000      	b.n	800f75a <dir_find+0x108>
 800f758:	23ff      	movs	r3, #255	; 0xff
 800f75a:	757b      	strb	r3, [r7, #21]
 800f75c:	e024      	b.n	800f7a8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f75e:	7d7b      	ldrb	r3, [r7, #21]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d109      	bne.n	800f778 <dir_find+0x126>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6a1b      	ldr	r3, [r3, #32]
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff ff51 	bl	800f610 <sum_sfn>
 800f76e:	4603      	mov	r3, r0
 800f770:	461a      	mov	r2, r3
 800f772:	7d3b      	ldrb	r3, [r7, #20]
 800f774:	4293      	cmp	r3, r2
 800f776:	d024      	beq.n	800f7c2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f77e:	f003 0301 	and.w	r3, r3, #1
 800f782:	2b00      	cmp	r3, #0
 800f784:	d10a      	bne.n	800f79c <dir_find+0x14a>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6a18      	ldr	r0, [r3, #32]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	3324      	adds	r3, #36	; 0x24
 800f78e:	220b      	movs	r2, #11
 800f790:	4619      	mov	r1, r3
 800f792:	f7fe fde9 	bl	800e368 <mem_cmp>
 800f796:	4603      	mov	r3, r0
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d014      	beq.n	800f7c6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f79c:	23ff      	movs	r3, #255	; 0xff
 800f79e:	757b      	strb	r3, [r7, #21]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f7ff fc6b 	bl	800f086 <dir_next>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f7b4:	7dfb      	ldrb	r3, [r7, #23]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	f43f af65 	beq.w	800f686 <dir_find+0x34>
 800f7bc:	e004      	b.n	800f7c8 <dir_find+0x176>
		if (res != FR_OK) break;
 800f7be:	bf00      	nop
 800f7c0:	e002      	b.n	800f7c8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f7c2:	bf00      	nop
 800f7c4:	e000      	b.n	800f7c8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f7c6:	bf00      	nop

	return res;
 800f7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3718      	adds	r7, #24
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
	...

0800f7d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b08c      	sub	sp, #48	; 0x30
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f7e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <dir_register+0x20>
 800f7f0:	2306      	movs	r3, #6
 800f7f2:	e0e0      	b.n	800f9b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f7f8:	e002      	b.n	800f800 <dir_register+0x2c>
 800f7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	627b      	str	r3, [r7, #36]	; 0x24
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	691a      	ldr	r2, [r3, #16]
 800f804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f806:	005b      	lsls	r3, r3, #1
 800f808:	4413      	add	r3, r2
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d1f4      	bne.n	800f7fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f816:	f107 030c 	add.w	r3, r7, #12
 800f81a:	220c      	movs	r2, #12
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fe fd67 	bl	800e2f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f822:	7dfb      	ldrb	r3, [r7, #23]
 800f824:	f003 0301 	and.w	r3, r3, #1
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d032      	beq.n	800f892 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2240      	movs	r2, #64	; 0x40
 800f830:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f834:	2301      	movs	r3, #1
 800f836:	62bb      	str	r3, [r7, #40]	; 0x28
 800f838:	e016      	b.n	800f868 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	691a      	ldr	r2, [r3, #16]
 800f844:	f107 010c 	add.w	r1, r7, #12
 800f848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84a:	f7ff fe51 	bl	800f4f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff feff 	bl	800f652 <dir_find>
 800f854:	4603      	mov	r3, r0
 800f856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f85a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d106      	bne.n	800f870 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f864:	3301      	adds	r3, #1
 800f866:	62bb      	str	r3, [r7, #40]	; 0x28
 800f868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86a:	2b63      	cmp	r3, #99	; 0x63
 800f86c:	d9e5      	bls.n	800f83a <dir_register+0x66>
 800f86e:	e000      	b.n	800f872 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f870:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f874:	2b64      	cmp	r3, #100	; 0x64
 800f876:	d101      	bne.n	800f87c <dir_register+0xa8>
 800f878:	2307      	movs	r3, #7
 800f87a:	e09c      	b.n	800f9b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f87c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f880:	2b04      	cmp	r3, #4
 800f882:	d002      	beq.n	800f88a <dir_register+0xb6>
 800f884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f888:	e095      	b.n	800f9b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f88a:	7dfa      	ldrb	r2, [r7, #23]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f892:	7dfb      	ldrb	r3, [r7, #23]
 800f894:	f003 0302 	and.w	r3, r3, #2
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d007      	beq.n	800f8ac <dir_register+0xd8>
 800f89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89e:	330c      	adds	r3, #12
 800f8a0:	4a47      	ldr	r2, [pc, #284]	; (800f9c0 <dir_register+0x1ec>)
 800f8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8a6:	089b      	lsrs	r3, r3, #2
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	e000      	b.n	800f8ae <dir_register+0xda>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f8b0:	6a39      	ldr	r1, [r7, #32]
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7ff fcbd 	bl	800f232 <dir_alloc>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f8be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d148      	bne.n	800f958 <dir_register+0x184>
 800f8c6:	6a3b      	ldr	r3, [r7, #32]
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	623b      	str	r3, [r7, #32]
 800f8cc:	6a3b      	ldr	r3, [r7, #32]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d042      	beq.n	800f958 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	695a      	ldr	r2, [r3, #20]
 800f8d6:	6a3b      	ldr	r3, [r7, #32]
 800f8d8:	015b      	lsls	r3, r3, #5
 800f8da:	1ad3      	subs	r3, r2, r3
 800f8dc:	4619      	mov	r1, r3
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f7ff fb48 	bl	800ef74 <dir_sdi>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f8ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d132      	bne.n	800f958 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	3324      	adds	r3, #36	; 0x24
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7ff fe8a 	bl	800f610 <sum_sfn>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	69db      	ldr	r3, [r3, #28]
 800f904:	4619      	mov	r1, r3
 800f906:	69f8      	ldr	r0, [r7, #28]
 800f908:	f7fe ff52 	bl	800e7b0 <move_window>
 800f90c:	4603      	mov	r3, r0
 800f90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f916:	2b00      	cmp	r3, #0
 800f918:	d11d      	bne.n	800f956 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	6918      	ldr	r0, [r3, #16]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a19      	ldr	r1, [r3, #32]
 800f922:	6a3b      	ldr	r3, [r7, #32]
 800f924:	b2da      	uxtb	r2, r3
 800f926:	7efb      	ldrb	r3, [r7, #27]
 800f928:	f7ff fd7a 	bl	800f420 <put_lfn>
				fs->wflag = 1;
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	2201      	movs	r2, #1
 800f930:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f932:	2100      	movs	r1, #0
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff fba6 	bl	800f086 <dir_next>
 800f93a:	4603      	mov	r3, r0
 800f93c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f944:	2b00      	cmp	r3, #0
 800f946:	d107      	bne.n	800f958 <dir_register+0x184>
 800f948:	6a3b      	ldr	r3, [r7, #32]
 800f94a:	3b01      	subs	r3, #1
 800f94c:	623b      	str	r3, [r7, #32]
 800f94e:	6a3b      	ldr	r3, [r7, #32]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1d5      	bne.n	800f900 <dir_register+0x12c>
 800f954:	e000      	b.n	800f958 <dir_register+0x184>
				if (res != FR_OK) break;
 800f956:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d128      	bne.n	800f9b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	69db      	ldr	r3, [r3, #28]
 800f964:	4619      	mov	r1, r3
 800f966:	69f8      	ldr	r0, [r7, #28]
 800f968:	f7fe ff22 	bl	800e7b0 <move_window>
 800f96c:	4603      	mov	r3, r0
 800f96e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f976:	2b00      	cmp	r3, #0
 800f978:	d11b      	bne.n	800f9b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6a1b      	ldr	r3, [r3, #32]
 800f97e:	2220      	movs	r2, #32
 800f980:	2100      	movs	r1, #0
 800f982:	4618      	mov	r0, r3
 800f984:	f7fe fcd5 	bl	800e332 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a18      	ldr	r0, [r3, #32]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	3324      	adds	r3, #36	; 0x24
 800f990:	220b      	movs	r2, #11
 800f992:	4619      	mov	r1, r3
 800f994:	f7fe fcac 	bl	800e2f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a1b      	ldr	r3, [r3, #32]
 800f9a2:	330c      	adds	r3, #12
 800f9a4:	f002 0218 	and.w	r2, r2, #24
 800f9a8:	b2d2      	uxtb	r2, r2
 800f9aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f9b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3730      	adds	r7, #48	; 0x30
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	4ec4ec4f 	.word	0x4ec4ec4f

0800f9c4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b088      	sub	sp, #32
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	69db      	ldr	r3, [r3, #28]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f000 80c9 	beq.w	800fb76 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9ec:	d032      	beq.n	800fa54 <get_fileinfo+0x90>
			i = j = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	61bb      	str	r3, [r7, #24]
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f9f6:	e01b      	b.n	800fa30 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f9f8:	89fb      	ldrh	r3, [r7, #14]
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f001 fda1 	bl	8011544 <ff_convert>
 800fa02:	4603      	mov	r3, r0
 800fa04:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800fa06:	89fb      	ldrh	r3, [r7, #14]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d102      	bne.n	800fa12 <get_fileinfo+0x4e>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	61fb      	str	r3, [r7, #28]
 800fa10:	e01a      	b.n	800fa48 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	2bfe      	cmp	r3, #254	; 0xfe
 800fa16:	d902      	bls.n	800fa1e <get_fileinfo+0x5a>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	61fb      	str	r3, [r7, #28]
 800fa1c:	e014      	b.n	800fa48 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	1c5a      	adds	r2, r3, #1
 800fa22:	61fa      	str	r2, [r7, #28]
 800fa24:	89fa      	ldrh	r2, [r7, #14]
 800fa26:	b2d1      	uxtb	r1, r2
 800fa28:	683a      	ldr	r2, [r7, #0]
 800fa2a:	4413      	add	r3, r2
 800fa2c:	460a      	mov	r2, r1
 800fa2e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	691a      	ldr	r2, [r3, #16]
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	1c59      	adds	r1, r3, #1
 800fa38:	61b9      	str	r1, [r7, #24]
 800fa3a:	005b      	lsls	r3, r3, #1
 800fa3c:	4413      	add	r3, r2
 800fa3e:	881b      	ldrh	r3, [r3, #0]
 800fa40:	81fb      	strh	r3, [r7, #14]
 800fa42:	89fb      	ldrh	r3, [r7, #14]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d1d7      	bne.n	800f9f8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800fa48:	683a      	ldr	r2, [r7, #0]
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	3316      	adds	r3, #22
 800fa50:	2200      	movs	r2, #0
 800fa52:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800fa54:	2300      	movs	r3, #0
 800fa56:	61bb      	str	r3, [r7, #24]
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800fa5c:	683a      	ldr	r2, [r7, #0]
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	4413      	add	r3, r2
 800fa62:	3316      	adds	r3, #22
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800fa68:	e04c      	b.n	800fb04 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6a1a      	ldr	r2, [r3, #32]
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	1c59      	adds	r1, r3, #1
 800fa72:	61f9      	str	r1, [r7, #28]
 800fa74:	4413      	add	r3, r2
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fa7a:	7dfb      	ldrb	r3, [r7, #23]
 800fa7c:	2b20      	cmp	r3, #32
 800fa7e:	d100      	bne.n	800fa82 <get_fileinfo+0xbe>
 800fa80:	e040      	b.n	800fb04 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fa82:	7dfb      	ldrb	r3, [r7, #23]
 800fa84:	2b05      	cmp	r3, #5
 800fa86:	d101      	bne.n	800fa8c <get_fileinfo+0xc8>
 800fa88:	23e5      	movs	r3, #229	; 0xe5
 800fa8a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	2b09      	cmp	r3, #9
 800fa90:	d10f      	bne.n	800fab2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800fa92:	89bb      	ldrh	r3, [r7, #12]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d105      	bne.n	800faa4 <get_fileinfo+0xe0>
 800fa98:	683a      	ldr	r2, [r7, #0]
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	3316      	adds	r3, #22
 800faa0:	222e      	movs	r2, #46	; 0x2e
 800faa2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800faa4:	69bb      	ldr	r3, [r7, #24]
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	61ba      	str	r2, [r7, #24]
 800faaa:	683a      	ldr	r2, [r7, #0]
 800faac:	4413      	add	r3, r2
 800faae:	222e      	movs	r2, #46	; 0x2e
 800fab0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	4413      	add	r3, r2
 800fab8:	3309      	adds	r3, #9
 800faba:	7dfa      	ldrb	r2, [r7, #23]
 800fabc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800fabe:	89bb      	ldrh	r3, [r7, #12]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d11c      	bne.n	800fafe <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800fac4:	7dfb      	ldrb	r3, [r7, #23]
 800fac6:	2b40      	cmp	r3, #64	; 0x40
 800fac8:	d913      	bls.n	800faf2 <get_fileinfo+0x12e>
 800faca:	7dfb      	ldrb	r3, [r7, #23]
 800facc:	2b5a      	cmp	r3, #90	; 0x5a
 800face:	d810      	bhi.n	800faf2 <get_fileinfo+0x12e>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6a1b      	ldr	r3, [r3, #32]
 800fad4:	330c      	adds	r3, #12
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	461a      	mov	r2, r3
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	2b08      	cmp	r3, #8
 800fade:	d901      	bls.n	800fae4 <get_fileinfo+0x120>
 800fae0:	2310      	movs	r3, #16
 800fae2:	e000      	b.n	800fae6 <get_fileinfo+0x122>
 800fae4:	2308      	movs	r3, #8
 800fae6:	4013      	ands	r3, r2
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d002      	beq.n	800faf2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800faec:	7dfb      	ldrb	r3, [r7, #23]
 800faee:	3320      	adds	r3, #32
 800faf0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800faf2:	683a      	ldr	r2, [r7, #0]
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	4413      	add	r3, r2
 800faf8:	3316      	adds	r3, #22
 800fafa:	7dfa      	ldrb	r2, [r7, #23]
 800fafc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	3301      	adds	r3, #1
 800fb02:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	2b0a      	cmp	r3, #10
 800fb08:	d9af      	bls.n	800fa6a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800fb0a:	89bb      	ldrh	r3, [r7, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d10d      	bne.n	800fb2c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800fb10:	683a      	ldr	r2, [r7, #0]
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	4413      	add	r3, r2
 800fb16:	3316      	adds	r3, #22
 800fb18:	2200      	movs	r2, #0
 800fb1a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a1b      	ldr	r3, [r3, #32]
 800fb20:	330c      	adds	r3, #12
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d101      	bne.n	800fb2c <get_fileinfo+0x168>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800fb2c:	683a      	ldr	r2, [r7, #0]
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	4413      	add	r3, r2
 800fb32:	3309      	adds	r3, #9
 800fb34:	2200      	movs	r2, #0
 800fb36:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a1b      	ldr	r3, [r3, #32]
 800fb3c:	7ada      	ldrb	r2, [r3, #11]
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6a1b      	ldr	r3, [r3, #32]
 800fb46:	331c      	adds	r3, #28
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fe fb67 	bl	800e21c <ld_dword>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6a1b      	ldr	r3, [r3, #32]
 800fb58:	3316      	adds	r3, #22
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fe fb5e 	bl	800e21c <ld_dword>
 800fb60:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	b29a      	uxth	r2, r3
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	80da      	strh	r2, [r3, #6]
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	0c1b      	lsrs	r3, r3, #16
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	809a      	strh	r2, [r3, #4]
 800fb74:	e000      	b.n	800fb78 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fb76:	bf00      	nop
}
 800fb78:	3720      	adds	r7, #32
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
	...

0800fb80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b08a      	sub	sp, #40	; 0x28
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	613b      	str	r3, [r7, #16]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	60fb      	str	r3, [r7, #12]
 800fb98:	2300      	movs	r3, #0
 800fb9a:	617b      	str	r3, [r7, #20]
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	1c5a      	adds	r2, r3, #1
 800fba4:	61ba      	str	r2, [r7, #24]
 800fba6:	693a      	ldr	r2, [r7, #16]
 800fba8:	4413      	add	r3, r2
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fbae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbb0:	2b1f      	cmp	r3, #31
 800fbb2:	d940      	bls.n	800fc36 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fbb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbb6:	2b2f      	cmp	r3, #47	; 0x2f
 800fbb8:	d006      	beq.n	800fbc8 <create_name+0x48>
 800fbba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbbc:	2b5c      	cmp	r3, #92	; 0x5c
 800fbbe:	d110      	bne.n	800fbe2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fbc0:	e002      	b.n	800fbc8 <create_name+0x48>
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	61bb      	str	r3, [r7, #24]
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	4413      	add	r3, r2
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	2b2f      	cmp	r3, #47	; 0x2f
 800fbd2:	d0f6      	beq.n	800fbc2 <create_name+0x42>
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	4413      	add	r3, r2
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	2b5c      	cmp	r3, #92	; 0x5c
 800fbde:	d0f0      	beq.n	800fbc2 <create_name+0x42>
			break;
 800fbe0:	e02a      	b.n	800fc38 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	2bfe      	cmp	r3, #254	; 0xfe
 800fbe6:	d901      	bls.n	800fbec <create_name+0x6c>
 800fbe8:	2306      	movs	r3, #6
 800fbea:	e177      	b.n	800fedc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fbec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fbf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbf4:	2101      	movs	r1, #1
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f001 fca4 	bl	8011544 <ff_convert>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fc00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d101      	bne.n	800fc0a <create_name+0x8a>
 800fc06:	2306      	movs	r3, #6
 800fc08:	e168      	b.n	800fedc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fc0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc0c:	2b7f      	cmp	r3, #127	; 0x7f
 800fc0e:	d809      	bhi.n	800fc24 <create_name+0xa4>
 800fc10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc12:	4619      	mov	r1, r3
 800fc14:	48b3      	ldr	r0, [pc, #716]	; (800fee4 <create_name+0x364>)
 800fc16:	f7fe fbce 	bl	800e3b6 <chk_chr>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d001      	beq.n	800fc24 <create_name+0xa4>
 800fc20:	2306      	movs	r3, #6
 800fc22:	e15b      	b.n	800fedc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	1c5a      	adds	r2, r3, #1
 800fc28:	617a      	str	r2, [r7, #20]
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	4413      	add	r3, r2
 800fc30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc32:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fc34:	e7b4      	b.n	800fba0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fc36:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fc38:	693a      	ldr	r2, [r7, #16]
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	441a      	add	r2, r3
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fc42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc44:	2b1f      	cmp	r3, #31
 800fc46:	d801      	bhi.n	800fc4c <create_name+0xcc>
 800fc48:	2304      	movs	r3, #4
 800fc4a:	e000      	b.n	800fc4e <create_name+0xce>
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fc52:	e011      	b.n	800fc78 <create_name+0xf8>
		w = lfn[di - 1];
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fc5a:	3b01      	subs	r3, #1
 800fc5c:	005b      	lsls	r3, r3, #1
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	4413      	add	r3, r2
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fc66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc68:	2b20      	cmp	r3, #32
 800fc6a:	d002      	beq.n	800fc72 <create_name+0xf2>
 800fc6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc6e:	2b2e      	cmp	r3, #46	; 0x2e
 800fc70:	d106      	bne.n	800fc80 <create_name+0x100>
		di--;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	3b01      	subs	r3, #1
 800fc76:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d1ea      	bne.n	800fc54 <create_name+0xd4>
 800fc7e:	e000      	b.n	800fc82 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fc80:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	005b      	lsls	r3, r3, #1
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	4413      	add	r3, r2
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d101      	bne.n	800fc98 <create_name+0x118>
 800fc94:	2306      	movs	r3, #6
 800fc96:	e121      	b.n	800fedc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	3324      	adds	r3, #36	; 0x24
 800fc9c:	220b      	movs	r2, #11
 800fc9e:	2120      	movs	r1, #32
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fe fb46 	bl	800e332 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fca6:	2300      	movs	r3, #0
 800fca8:	61bb      	str	r3, [r7, #24]
 800fcaa:	e002      	b.n	800fcb2 <create_name+0x132>
 800fcac:	69bb      	ldr	r3, [r7, #24]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	61bb      	str	r3, [r7, #24]
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	005b      	lsls	r3, r3, #1
 800fcb6:	68fa      	ldr	r2, [r7, #12]
 800fcb8:	4413      	add	r3, r2
 800fcba:	881b      	ldrh	r3, [r3, #0]
 800fcbc:	2b20      	cmp	r3, #32
 800fcbe:	d0f5      	beq.n	800fcac <create_name+0x12c>
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	005b      	lsls	r3, r3, #1
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	2b2e      	cmp	r3, #46	; 0x2e
 800fccc:	d0ee      	beq.n	800fcac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d009      	beq.n	800fce8 <create_name+0x168>
 800fcd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcd8:	f043 0303 	orr.w	r3, r3, #3
 800fcdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fce0:	e002      	b.n	800fce8 <create_name+0x168>
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	3b01      	subs	r3, #1
 800fce6:	617b      	str	r3, [r7, #20]
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d009      	beq.n	800fd02 <create_name+0x182>
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	005b      	lsls	r3, r3, #1
 800fcf8:	68fa      	ldr	r2, [r7, #12]
 800fcfa:	4413      	add	r3, r2
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	2b2e      	cmp	r3, #46	; 0x2e
 800fd00:	d1ef      	bne.n	800fce2 <create_name+0x162>

	i = b = 0; ni = 8;
 800fd02:	2300      	movs	r3, #0
 800fd04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd08:	2300      	movs	r3, #0
 800fd0a:	623b      	str	r3, [r7, #32]
 800fd0c:	2308      	movs	r3, #8
 800fd0e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	1c5a      	adds	r2, r3, #1
 800fd14:	61ba      	str	r2, [r7, #24]
 800fd16:	005b      	lsls	r3, r3, #1
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	881b      	ldrh	r3, [r3, #0]
 800fd1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fd20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	f000 8090 	beq.w	800fe48 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fd28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd2a:	2b20      	cmp	r3, #32
 800fd2c:	d006      	beq.n	800fd3c <create_name+0x1bc>
 800fd2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd30:	2b2e      	cmp	r3, #46	; 0x2e
 800fd32:	d10a      	bne.n	800fd4a <create_name+0x1ca>
 800fd34:	69ba      	ldr	r2, [r7, #24]
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d006      	beq.n	800fd4a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800fd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd40:	f043 0303 	orr.w	r3, r3, #3
 800fd44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd48:	e07d      	b.n	800fe46 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fd4a:	6a3a      	ldr	r2, [r7, #32]
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d203      	bcs.n	800fd5a <create_name+0x1da>
 800fd52:	69ba      	ldr	r2, [r7, #24]
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d123      	bne.n	800fda2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	2b0b      	cmp	r3, #11
 800fd5e:	d106      	bne.n	800fd6e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd64:	f043 0303 	orr.w	r3, r3, #3
 800fd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd6c:	e06f      	b.n	800fe4e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fd6e:	69ba      	ldr	r2, [r7, #24]
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d005      	beq.n	800fd82 <create_name+0x202>
 800fd76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd7a:	f043 0303 	orr.w	r3, r3, #3
 800fd7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fd82:	69ba      	ldr	r2, [r7, #24]
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d860      	bhi.n	800fe4c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	61bb      	str	r3, [r7, #24]
 800fd8e:	2308      	movs	r3, #8
 800fd90:	623b      	str	r3, [r7, #32]
 800fd92:	230b      	movs	r3, #11
 800fd94:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fd96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fda0:	e051      	b.n	800fe46 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fda2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fda4:	2b7f      	cmp	r3, #127	; 0x7f
 800fda6:	d914      	bls.n	800fdd2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fda8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdaa:	2100      	movs	r1, #0
 800fdac:	4618      	mov	r0, r3
 800fdae:	f001 fbc9 	bl	8011544 <ff_convert>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fdb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d004      	beq.n	800fdc6 <create_name+0x246>
 800fdbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdbe:	3b80      	subs	r3, #128	; 0x80
 800fdc0:	4a49      	ldr	r2, [pc, #292]	; (800fee8 <create_name+0x368>)
 800fdc2:	5cd3      	ldrb	r3, [r2, r3]
 800fdc4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fdc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdca:	f043 0302 	orr.w	r3, r3, #2
 800fdce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fdd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d007      	beq.n	800fde8 <create_name+0x268>
 800fdd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdda:	4619      	mov	r1, r3
 800fddc:	4843      	ldr	r0, [pc, #268]	; (800feec <create_name+0x36c>)
 800fdde:	f7fe faea 	bl	800e3b6 <chk_chr>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d008      	beq.n	800fdfa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fde8:	235f      	movs	r3, #95	; 0x5f
 800fdea:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fdec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdf0:	f043 0303 	orr.w	r3, r3, #3
 800fdf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fdf8:	e01b      	b.n	800fe32 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fdfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdfc:	2b40      	cmp	r3, #64	; 0x40
 800fdfe:	d909      	bls.n	800fe14 <create_name+0x294>
 800fe00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe02:	2b5a      	cmp	r3, #90	; 0x5a
 800fe04:	d806      	bhi.n	800fe14 <create_name+0x294>
					b |= 2;
 800fe06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe0a:	f043 0302 	orr.w	r3, r3, #2
 800fe0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe12:	e00e      	b.n	800fe32 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fe14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe16:	2b60      	cmp	r3, #96	; 0x60
 800fe18:	d90b      	bls.n	800fe32 <create_name+0x2b2>
 800fe1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe1c:	2b7a      	cmp	r3, #122	; 0x7a
 800fe1e:	d808      	bhi.n	800fe32 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fe20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe24:	f043 0301 	orr.w	r3, r3, #1
 800fe28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe2e:	3b20      	subs	r3, #32
 800fe30:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fe32:	6a3b      	ldr	r3, [r7, #32]
 800fe34:	1c5a      	adds	r2, r3, #1
 800fe36:	623a      	str	r2, [r7, #32]
 800fe38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fe3a:	b2d1      	uxtb	r1, r2
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	4413      	add	r3, r2
 800fe40:	460a      	mov	r2, r1
 800fe42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800fe46:	e763      	b.n	800fd10 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fe48:	bf00      	nop
 800fe4a:	e000      	b.n	800fe4e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800fe4c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fe54:	2be5      	cmp	r3, #229	; 0xe5
 800fe56:	d103      	bne.n	800fe60 <create_name+0x2e0>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2205      	movs	r2, #5
 800fe5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	2b08      	cmp	r3, #8
 800fe64:	d104      	bne.n	800fe70 <create_name+0x2f0>
 800fe66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fe70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe74:	f003 030c 	and.w	r3, r3, #12
 800fe78:	2b0c      	cmp	r3, #12
 800fe7a:	d005      	beq.n	800fe88 <create_name+0x308>
 800fe7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe80:	f003 0303 	and.w	r3, r3, #3
 800fe84:	2b03      	cmp	r3, #3
 800fe86:	d105      	bne.n	800fe94 <create_name+0x314>
 800fe88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe8c:	f043 0302 	orr.w	r3, r3, #2
 800fe90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fe94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe98:	f003 0302 	and.w	r3, r3, #2
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d117      	bne.n	800fed0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fea4:	f003 0303 	and.w	r3, r3, #3
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d105      	bne.n	800feb8 <create_name+0x338>
 800feac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feb0:	f043 0310 	orr.w	r3, r3, #16
 800feb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800feb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800febc:	f003 030c 	and.w	r3, r3, #12
 800fec0:	2b04      	cmp	r3, #4
 800fec2:	d105      	bne.n	800fed0 <create_name+0x350>
 800fec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fec8:	f043 0308 	orr.w	r3, r3, #8
 800fecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fed6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800feda:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3728      	adds	r7, #40	; 0x28
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	080196a8 	.word	0x080196a8
 800fee8:	08019b08 	.word	0x08019b08
 800feec:	080196b4 	.word	0x080196b4

0800fef0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ff04:	e002      	b.n	800ff0c <follow_path+0x1c>
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	3301      	adds	r3, #1
 800ff0a:	603b      	str	r3, [r7, #0]
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	2b2f      	cmp	r3, #47	; 0x2f
 800ff12:	d0f8      	beq.n	800ff06 <follow_path+0x16>
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	2b5c      	cmp	r3, #92	; 0x5c
 800ff1a:	d0f4      	beq.n	800ff06 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	2b1f      	cmp	r3, #31
 800ff28:	d80a      	bhi.n	800ff40 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2280      	movs	r2, #128	; 0x80
 800ff2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ff32:	2100      	movs	r1, #0
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7ff f81d 	bl	800ef74 <dir_sdi>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	75fb      	strb	r3, [r7, #23]
 800ff3e:	e048      	b.n	800ffd2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff40:	463b      	mov	r3, r7
 800ff42:	4619      	mov	r1, r3
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff fe1b 	bl	800fb80 <create_name>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ff4e:	7dfb      	ldrb	r3, [r7, #23]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d139      	bne.n	800ffc8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7ff fb7c 	bl	800f652 <dir_find>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ff64:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ff66:	7dfb      	ldrb	r3, [r7, #23]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00a      	beq.n	800ff82 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ff6c:	7dfb      	ldrb	r3, [r7, #23]
 800ff6e:	2b04      	cmp	r3, #4
 800ff70:	d12c      	bne.n	800ffcc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ff72:	7afb      	ldrb	r3, [r7, #11]
 800ff74:	f003 0304 	and.w	r3, r3, #4
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d127      	bne.n	800ffcc <follow_path+0xdc>
 800ff7c:	2305      	movs	r3, #5
 800ff7e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ff80:	e024      	b.n	800ffcc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ff82:	7afb      	ldrb	r3, [r7, #11]
 800ff84:	f003 0304 	and.w	r3, r3, #4
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d121      	bne.n	800ffd0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	799b      	ldrb	r3, [r3, #6]
 800ff90:	f003 0310 	and.w	r3, r3, #16
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d102      	bne.n	800ff9e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ff98:	2305      	movs	r3, #5
 800ff9a:	75fb      	strb	r3, [r7, #23]
 800ff9c:	e019      	b.n	800ffd2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	695b      	ldr	r3, [r3, #20]
 800ffa8:	68fa      	ldr	r2, [r7, #12]
 800ffaa:	8992      	ldrh	r2, [r2, #12]
 800ffac:	fbb3 f0f2 	udiv	r0, r3, r2
 800ffb0:	fb02 f200 	mul.w	r2, r2, r0
 800ffb4:	1a9b      	subs	r3, r3, r2
 800ffb6:	440b      	add	r3, r1
 800ffb8:	4619      	mov	r1, r3
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f7ff f980 	bl	800f2c0 <ld_clust>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ffc6:	e7bb      	b.n	800ff40 <follow_path+0x50>
			if (res != FR_OK) break;
 800ffc8:	bf00      	nop
 800ffca:	e002      	b.n	800ffd2 <follow_path+0xe2>
				break;
 800ffcc:	bf00      	nop
 800ffce:	e000      	b.n	800ffd2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ffd0:	bf00      	nop
			}
		}
	}

	return res;
 800ffd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3718      	adds	r7, #24
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b087      	sub	sp, #28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ffe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffe8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d031      	beq.n	8010056 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	617b      	str	r3, [r7, #20]
 800fff8:	e002      	b.n	8010000 <get_ldnumber+0x24>
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	3301      	adds	r3, #1
 800fffe:	617b      	str	r3, [r7, #20]
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	2b1f      	cmp	r3, #31
 8010006:	d903      	bls.n	8010010 <get_ldnumber+0x34>
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	2b3a      	cmp	r3, #58	; 0x3a
 801000e:	d1f4      	bne.n	800fffa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	2b3a      	cmp	r3, #58	; 0x3a
 8010016:	d11c      	bne.n	8010052 <get_ldnumber+0x76>
			tp = *path;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	1c5a      	adds	r2, r3, #1
 8010022:	60fa      	str	r2, [r7, #12]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	3b30      	subs	r3, #48	; 0x30
 8010028:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	2b09      	cmp	r3, #9
 801002e:	d80e      	bhi.n	801004e <get_ldnumber+0x72>
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	429a      	cmp	r2, r3
 8010036:	d10a      	bne.n	801004e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d107      	bne.n	801004e <get_ldnumber+0x72>
					vol = (int)i;
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	3301      	adds	r3, #1
 8010046:	617b      	str	r3, [r7, #20]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	697a      	ldr	r2, [r7, #20]
 801004c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	e002      	b.n	8010058 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010052:	2300      	movs	r3, #0
 8010054:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010056:	693b      	ldr	r3, [r7, #16]
}
 8010058:	4618      	mov	r0, r3
 801005a:	371c      	adds	r7, #28
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	70da      	strb	r2, [r3, #3]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801007a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801007c:	6839      	ldr	r1, [r7, #0]
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f7fe fb96 	bl	800e7b0 <move_window>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d001      	beq.n	801008e <check_fs+0x2a>
 801008a:	2304      	movs	r3, #4
 801008c:	e038      	b.n	8010100 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	333c      	adds	r3, #60	; 0x3c
 8010092:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010096:	4618      	mov	r0, r3
 8010098:	f7fe f8a8 	bl	800e1ec <ld_word>
 801009c:	4603      	mov	r3, r0
 801009e:	461a      	mov	r2, r3
 80100a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d001      	beq.n	80100ac <check_fs+0x48>
 80100a8:	2303      	movs	r3, #3
 80100aa:	e029      	b.n	8010100 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100b2:	2be9      	cmp	r3, #233	; 0xe9
 80100b4:	d009      	beq.n	80100ca <check_fs+0x66>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100bc:	2beb      	cmp	r3, #235	; 0xeb
 80100be:	d11e      	bne.n	80100fe <check_fs+0x9a>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80100c6:	2b90      	cmp	r3, #144	; 0x90
 80100c8:	d119      	bne.n	80100fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	333c      	adds	r3, #60	; 0x3c
 80100ce:	3336      	adds	r3, #54	; 0x36
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fe f8a3 	bl	800e21c <ld_dword>
 80100d6:	4603      	mov	r3, r0
 80100d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80100dc:	4a0a      	ldr	r2, [pc, #40]	; (8010108 <check_fs+0xa4>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d101      	bne.n	80100e6 <check_fs+0x82>
 80100e2:	2300      	movs	r3, #0
 80100e4:	e00c      	b.n	8010100 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	333c      	adds	r3, #60	; 0x3c
 80100ea:	3352      	adds	r3, #82	; 0x52
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7fe f895 	bl	800e21c <ld_dword>
 80100f2:	4603      	mov	r3, r0
 80100f4:	4a05      	ldr	r2, [pc, #20]	; (801010c <check_fs+0xa8>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d101      	bne.n	80100fe <check_fs+0x9a>
 80100fa:	2300      	movs	r3, #0
 80100fc:	e000      	b.n	8010100 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80100fe:	2302      	movs	r3, #2
}
 8010100:	4618      	mov	r0, r3
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}
 8010108:	00544146 	.word	0x00544146
 801010c:	33544146 	.word	0x33544146

08010110 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b096      	sub	sp, #88	; 0x58
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	4613      	mov	r3, r2
 801011c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	2200      	movs	r2, #0
 8010122:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f7ff ff59 	bl	800ffdc <get_ldnumber>
 801012a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801012c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801012e:	2b00      	cmp	r3, #0
 8010130:	da01      	bge.n	8010136 <find_volume+0x26>
 8010132:	230b      	movs	r3, #11
 8010134:	e26c      	b.n	8010610 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010136:	4aa4      	ldr	r2, [pc, #656]	; (80103c8 <find_volume+0x2b8>)
 8010138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801013a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801013e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010142:	2b00      	cmp	r3, #0
 8010144:	d101      	bne.n	801014a <find_volume+0x3a>
 8010146:	230c      	movs	r3, #12
 8010148:	e262      	b.n	8010610 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 801014a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801014c:	f7fe f94e 	bl	800e3ec <lock_fs>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d101      	bne.n	801015a <find_volume+0x4a>
 8010156:	230f      	movs	r3, #15
 8010158:	e25a      	b.n	8010610 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801015e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010160:	79fb      	ldrb	r3, [r7, #7]
 8010162:	f023 0301 	bic.w	r3, r3, #1
 8010166:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d01a      	beq.n	80101a6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010172:	785b      	ldrb	r3, [r3, #1]
 8010174:	4618      	mov	r0, r3
 8010176:	f7fd ff9b 	bl	800e0b0 <disk_status>
 801017a:	4603      	mov	r3, r0
 801017c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010180:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010184:	f003 0301 	and.w	r3, r3, #1
 8010188:	2b00      	cmp	r3, #0
 801018a:	d10c      	bne.n	80101a6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801018c:	79fb      	ldrb	r3, [r7, #7]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d007      	beq.n	80101a2 <find_volume+0x92>
 8010192:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010196:	f003 0304 	and.w	r3, r3, #4
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801019e:	230a      	movs	r3, #10
 80101a0:	e236      	b.n	8010610 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 80101a2:	2300      	movs	r3, #0
 80101a4:	e234      	b.n	8010610 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80101a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a8:	2200      	movs	r2, #0
 80101aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80101ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	785b      	ldrb	r3, [r3, #1]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fd ff93 	bl	800e0e4 <disk_initialize>
 80101be:	4603      	mov	r3, r0
 80101c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80101c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101c8:	f003 0301 	and.w	r3, r3, #1
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d001      	beq.n	80101d4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80101d0:	2303      	movs	r3, #3
 80101d2:	e21d      	b.n	8010610 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80101d4:	79fb      	ldrb	r3, [r7, #7]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d007      	beq.n	80101ea <find_volume+0xda>
 80101da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101de:	f003 0304 	and.w	r3, r3, #4
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d001      	beq.n	80101ea <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80101e6:	230a      	movs	r3, #10
 80101e8:	e212      	b.n	8010610 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80101ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ec:	7858      	ldrb	r0, [r3, #1]
 80101ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f0:	330c      	adds	r3, #12
 80101f2:	461a      	mov	r2, r3
 80101f4:	2102      	movs	r1, #2
 80101f6:	f7fd ffdb 	bl	800e1b0 <disk_ioctl>
 80101fa:	4603      	mov	r3, r0
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d001      	beq.n	8010204 <find_volume+0xf4>
 8010200:	2301      	movs	r3, #1
 8010202:	e205      	b.n	8010610 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010206:	899b      	ldrh	r3, [r3, #12]
 8010208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801020c:	d80d      	bhi.n	801022a <find_volume+0x11a>
 801020e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010210:	899b      	ldrh	r3, [r3, #12]
 8010212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010216:	d308      	bcc.n	801022a <find_volume+0x11a>
 8010218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021a:	899b      	ldrh	r3, [r3, #12]
 801021c:	461a      	mov	r2, r3
 801021e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010220:	899b      	ldrh	r3, [r3, #12]
 8010222:	3b01      	subs	r3, #1
 8010224:	4013      	ands	r3, r2
 8010226:	2b00      	cmp	r3, #0
 8010228:	d001      	beq.n	801022e <find_volume+0x11e>
 801022a:	2301      	movs	r3, #1
 801022c:	e1f0      	b.n	8010610 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801022e:	2300      	movs	r3, #0
 8010230:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010234:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010236:	f7ff ff15 	bl	8010064 <check_fs>
 801023a:	4603      	mov	r3, r0
 801023c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010240:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010244:	2b02      	cmp	r3, #2
 8010246:	d14b      	bne.n	80102e0 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010248:	2300      	movs	r3, #0
 801024a:	643b      	str	r3, [r7, #64]	; 0x40
 801024c:	e01f      	b.n	801028e <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801024e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010250:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8010254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010256:	011b      	lsls	r3, r3, #4
 8010258:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801025c:	4413      	add	r3, r2
 801025e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010262:	3304      	adds	r3, #4
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d006      	beq.n	8010278 <find_volume+0x168>
 801026a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026c:	3308      	adds	r3, #8
 801026e:	4618      	mov	r0, r3
 8010270:	f7fd ffd4 	bl	800e21c <ld_dword>
 8010274:	4602      	mov	r2, r0
 8010276:	e000      	b.n	801027a <find_volume+0x16a>
 8010278:	2200      	movs	r2, #0
 801027a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010282:	440b      	add	r3, r1
 8010284:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801028a:	3301      	adds	r3, #1
 801028c:	643b      	str	r3, [r7, #64]	; 0x40
 801028e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010290:	2b03      	cmp	r3, #3
 8010292:	d9dc      	bls.n	801024e <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010294:	2300      	movs	r3, #0
 8010296:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801029a:	2b00      	cmp	r3, #0
 801029c:	d002      	beq.n	80102a4 <find_volume+0x194>
 801029e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a0:	3b01      	subs	r3, #1
 80102a2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80102a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80102ac:	4413      	add	r3, r2
 80102ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80102b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80102b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d005      	beq.n	80102c6 <find_volume+0x1b6>
 80102ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102be:	f7ff fed1 	bl	8010064 <check_fs>
 80102c2:	4603      	mov	r3, r0
 80102c4:	e000      	b.n	80102c8 <find_volume+0x1b8>
 80102c6:	2303      	movs	r3, #3
 80102c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80102cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d905      	bls.n	80102e0 <find_volume+0x1d0>
 80102d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102d6:	3301      	adds	r3, #1
 80102d8:	643b      	str	r3, [r7, #64]	; 0x40
 80102da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102dc:	2b03      	cmp	r3, #3
 80102de:	d9e1      	bls.n	80102a4 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80102e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102e4:	2b04      	cmp	r3, #4
 80102e6:	d101      	bne.n	80102ec <find_volume+0x1dc>
 80102e8:	2301      	movs	r3, #1
 80102ea:	e191      	b.n	8010610 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80102ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d901      	bls.n	80102f8 <find_volume+0x1e8>
 80102f4:	230d      	movs	r3, #13
 80102f6:	e18b      	b.n	8010610 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80102f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fa:	333c      	adds	r3, #60	; 0x3c
 80102fc:	330b      	adds	r3, #11
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fd ff74 	bl	800e1ec <ld_word>
 8010304:	4603      	mov	r3, r0
 8010306:	461a      	mov	r2, r3
 8010308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030a:	899b      	ldrh	r3, [r3, #12]
 801030c:	429a      	cmp	r2, r3
 801030e:	d001      	beq.n	8010314 <find_volume+0x204>
 8010310:	230d      	movs	r3, #13
 8010312:	e17d      	b.n	8010610 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010316:	333c      	adds	r3, #60	; 0x3c
 8010318:	3316      	adds	r3, #22
 801031a:	4618      	mov	r0, r3
 801031c:	f7fd ff66 	bl	800e1ec <ld_word>
 8010320:	4603      	mov	r3, r0
 8010322:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010326:	2b00      	cmp	r3, #0
 8010328:	d106      	bne.n	8010338 <find_volume+0x228>
 801032a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032c:	333c      	adds	r3, #60	; 0x3c
 801032e:	3324      	adds	r3, #36	; 0x24
 8010330:	4618      	mov	r0, r3
 8010332:	f7fd ff73 	bl	800e21c <ld_dword>
 8010336:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801033c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801033e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010340:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010346:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034a:	789b      	ldrb	r3, [r3, #2]
 801034c:	2b01      	cmp	r3, #1
 801034e:	d005      	beq.n	801035c <find_volume+0x24c>
 8010350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010352:	789b      	ldrb	r3, [r3, #2]
 8010354:	2b02      	cmp	r3, #2
 8010356:	d001      	beq.n	801035c <find_volume+0x24c>
 8010358:	230d      	movs	r3, #13
 801035a:	e159      	b.n	8010610 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801035c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035e:	789b      	ldrb	r3, [r3, #2]
 8010360:	461a      	mov	r2, r3
 8010362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010364:	fb02 f303 	mul.w	r3, r2, r3
 8010368:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801036a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801036c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8010370:	b29a      	uxth	r2, r3
 8010372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010374:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010378:	895b      	ldrh	r3, [r3, #10]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d008      	beq.n	8010390 <find_volume+0x280>
 801037e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010380:	895b      	ldrh	r3, [r3, #10]
 8010382:	461a      	mov	r2, r3
 8010384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010386:	895b      	ldrh	r3, [r3, #10]
 8010388:	3b01      	subs	r3, #1
 801038a:	4013      	ands	r3, r2
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <find_volume+0x284>
 8010390:	230d      	movs	r3, #13
 8010392:	e13d      	b.n	8010610 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010396:	333c      	adds	r3, #60	; 0x3c
 8010398:	3311      	adds	r3, #17
 801039a:	4618      	mov	r0, r3
 801039c:	f7fd ff26 	bl	800e1ec <ld_word>
 80103a0:	4603      	mov	r3, r0
 80103a2:	461a      	mov	r2, r3
 80103a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80103a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103aa:	891b      	ldrh	r3, [r3, #8]
 80103ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103ae:	8992      	ldrh	r2, [r2, #12]
 80103b0:	0952      	lsrs	r2, r2, #5
 80103b2:	b292      	uxth	r2, r2
 80103b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80103b8:	fb02 f201 	mul.w	r2, r2, r1
 80103bc:	1a9b      	subs	r3, r3, r2
 80103be:	b29b      	uxth	r3, r3
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d003      	beq.n	80103cc <find_volume+0x2bc>
 80103c4:	230d      	movs	r3, #13
 80103c6:	e123      	b.n	8010610 <find_volume+0x500>
 80103c8:	2000078c 	.word	0x2000078c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80103cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ce:	333c      	adds	r3, #60	; 0x3c
 80103d0:	3313      	adds	r3, #19
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fd ff0a 	bl	800e1ec <ld_word>
 80103d8:	4603      	mov	r3, r0
 80103da:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80103dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d106      	bne.n	80103f0 <find_volume+0x2e0>
 80103e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e4:	333c      	adds	r3, #60	; 0x3c
 80103e6:	3320      	adds	r3, #32
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fd ff17 	bl	800e21c <ld_dword>
 80103ee:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80103f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f2:	333c      	adds	r3, #60	; 0x3c
 80103f4:	330e      	adds	r3, #14
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fd fef8 	bl	800e1ec <ld_word>
 80103fc:	4603      	mov	r3, r0
 80103fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010400:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010402:	2b00      	cmp	r3, #0
 8010404:	d101      	bne.n	801040a <find_volume+0x2fa>
 8010406:	230d      	movs	r3, #13
 8010408:	e102      	b.n	8010610 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801040a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801040c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801040e:	4413      	add	r3, r2
 8010410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010412:	8911      	ldrh	r1, [r2, #8]
 8010414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010416:	8992      	ldrh	r2, [r2, #12]
 8010418:	0952      	lsrs	r2, r2, #5
 801041a:	b292      	uxth	r2, r2
 801041c:	fbb1 f2f2 	udiv	r2, r1, r2
 8010420:	b292      	uxth	r2, r2
 8010422:	4413      	add	r3, r2
 8010424:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801042a:	429a      	cmp	r2, r3
 801042c:	d201      	bcs.n	8010432 <find_volume+0x322>
 801042e:	230d      	movs	r3, #13
 8010430:	e0ee      	b.n	8010610 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801043a:	8952      	ldrh	r2, [r2, #10]
 801043c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010440:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010444:	2b00      	cmp	r3, #0
 8010446:	d101      	bne.n	801044c <find_volume+0x33c>
 8010448:	230d      	movs	r3, #13
 801044a:	e0e1      	b.n	8010610 <find_volume+0x500>
		fmt = FS_FAT32;
 801044c:	2303      	movs	r3, #3
 801044e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010454:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010458:	4293      	cmp	r3, r2
 801045a:	d802      	bhi.n	8010462 <find_volume+0x352>
 801045c:	2302      	movs	r3, #2
 801045e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010464:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010468:	4293      	cmp	r3, r2
 801046a:	d802      	bhi.n	8010472 <find_volume+0x362>
 801046c:	2301      	movs	r3, #1
 801046e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010474:	1c9a      	adds	r2, r3, #2
 8010476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010478:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801047a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801047e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010480:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010484:	441a      	add	r2, r3
 8010486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010488:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801048a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801048c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048e:	441a      	add	r2, r3
 8010490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010492:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8010494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010498:	2b03      	cmp	r3, #3
 801049a:	d11e      	bne.n	80104da <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801049c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049e:	333c      	adds	r3, #60	; 0x3c
 80104a0:	332a      	adds	r3, #42	; 0x2a
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7fd fea2 	bl	800e1ec <ld_word>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d001      	beq.n	80104b2 <find_volume+0x3a2>
 80104ae:	230d      	movs	r3, #13
 80104b0:	e0ae      	b.n	8010610 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80104b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b4:	891b      	ldrh	r3, [r3, #8]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d001      	beq.n	80104be <find_volume+0x3ae>
 80104ba:	230d      	movs	r3, #13
 80104bc:	e0a8      	b.n	8010610 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80104be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c0:	333c      	adds	r3, #60	; 0x3c
 80104c2:	332c      	adds	r3, #44	; 0x2c
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7fd fea9 	bl	800e21c <ld_dword>
 80104ca:	4602      	mov	r2, r0
 80104cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ce:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80104d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d2:	6a1b      	ldr	r3, [r3, #32]
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	647b      	str	r3, [r7, #68]	; 0x44
 80104d8:	e01f      	b.n	801051a <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80104da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104dc:	891b      	ldrh	r3, [r3, #8]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d101      	bne.n	80104e6 <find_volume+0x3d6>
 80104e2:	230d      	movs	r3, #13
 80104e4:	e094      	b.n	8010610 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80104e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104ec:	441a      	add	r2, r3
 80104ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f0:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80104f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104f6:	2b02      	cmp	r3, #2
 80104f8:	d103      	bne.n	8010502 <find_volume+0x3f2>
 80104fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fc:	6a1b      	ldr	r3, [r3, #32]
 80104fe:	005b      	lsls	r3, r3, #1
 8010500:	e00a      	b.n	8010518 <find_volume+0x408>
 8010502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010504:	6a1a      	ldr	r2, [r3, #32]
 8010506:	4613      	mov	r3, r2
 8010508:	005b      	lsls	r3, r3, #1
 801050a:	4413      	add	r3, r2
 801050c:	085a      	lsrs	r2, r3, #1
 801050e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010510:	6a1b      	ldr	r3, [r3, #32]
 8010512:	f003 0301 	and.w	r3, r3, #1
 8010516:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010518:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801051a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801051e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010520:	899b      	ldrh	r3, [r3, #12]
 8010522:	4619      	mov	r1, r3
 8010524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010526:	440b      	add	r3, r1
 8010528:	3b01      	subs	r3, #1
 801052a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801052c:	8989      	ldrh	r1, [r1, #12]
 801052e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010532:	429a      	cmp	r2, r3
 8010534:	d201      	bcs.n	801053a <find_volume+0x42a>
 8010536:	230d      	movs	r3, #13
 8010538:	e06a      	b.n	8010610 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010540:	61da      	str	r2, [r3, #28]
 8010542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010544:	69da      	ldr	r2, [r3, #28]
 8010546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010548:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 801054a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054c:	2280      	movs	r2, #128	; 0x80
 801054e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010554:	2b03      	cmp	r3, #3
 8010556:	d149      	bne.n	80105ec <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055a:	333c      	adds	r3, #60	; 0x3c
 801055c:	3330      	adds	r3, #48	; 0x30
 801055e:	4618      	mov	r0, r3
 8010560:	f7fd fe44 	bl	800e1ec <ld_word>
 8010564:	4603      	mov	r3, r0
 8010566:	2b01      	cmp	r3, #1
 8010568:	d140      	bne.n	80105ec <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 801056a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801056c:	3301      	adds	r3, #1
 801056e:	4619      	mov	r1, r3
 8010570:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010572:	f7fe f91d 	bl	800e7b0 <move_window>
 8010576:	4603      	mov	r3, r0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d137      	bne.n	80105ec <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 801057c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057e:	2200      	movs	r2, #0
 8010580:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010584:	333c      	adds	r3, #60	; 0x3c
 8010586:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801058a:	4618      	mov	r0, r3
 801058c:	f7fd fe2e 	bl	800e1ec <ld_word>
 8010590:	4603      	mov	r3, r0
 8010592:	461a      	mov	r2, r3
 8010594:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010598:	429a      	cmp	r2, r3
 801059a:	d127      	bne.n	80105ec <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801059c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059e:	333c      	adds	r3, #60	; 0x3c
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fd fe3b 	bl	800e21c <ld_dword>
 80105a6:	4603      	mov	r3, r0
 80105a8:	4a1b      	ldr	r2, [pc, #108]	; (8010618 <find_volume+0x508>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d11e      	bne.n	80105ec <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80105ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b0:	333c      	adds	r3, #60	; 0x3c
 80105b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fd fe30 	bl	800e21c <ld_dword>
 80105bc:	4603      	mov	r3, r0
 80105be:	4a17      	ldr	r2, [pc, #92]	; (801061c <find_volume+0x50c>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d113      	bne.n	80105ec <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80105c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c6:	333c      	adds	r3, #60	; 0x3c
 80105c8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fd fe25 	bl	800e21c <ld_dword>
 80105d2:	4602      	mov	r2, r0
 80105d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d6:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	333c      	adds	r3, #60	; 0x3c
 80105dc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7fd fe1b 	bl	800e21c <ld_dword>
 80105e6:	4602      	mov	r2, r0
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80105f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80105f4:	4b0a      	ldr	r3, [pc, #40]	; (8010620 <find_volume+0x510>)
 80105f6:	881b      	ldrh	r3, [r3, #0]
 80105f8:	3301      	adds	r3, #1
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	4b08      	ldr	r3, [pc, #32]	; (8010620 <find_volume+0x510>)
 80105fe:	801a      	strh	r2, [r3, #0]
 8010600:	4b07      	ldr	r3, [pc, #28]	; (8010620 <find_volume+0x510>)
 8010602:	881a      	ldrh	r2, [r3, #0]
 8010604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010606:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010608:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801060a:	f7fe f869 	bl	800e6e0 <clear_lock>
#endif
	return FR_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	3758      	adds	r7, #88	; 0x58
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	41615252 	.word	0x41615252
 801061c:	61417272 	.word	0x61417272
 8010620:	20000790 	.word	0x20000790

08010624 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801062e:	2309      	movs	r3, #9
 8010630:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d02e      	beq.n	8010696 <validate+0x72>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d02a      	beq.n	8010696 <validate+0x72>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d025      	beq.n	8010696 <validate+0x72>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	889a      	ldrh	r2, [r3, #4]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	88db      	ldrh	r3, [r3, #6]
 8010654:	429a      	cmp	r2, r3
 8010656:	d11e      	bne.n	8010696 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4618      	mov	r0, r3
 801065e:	f7fd fec5 	bl	800e3ec <lock_fs>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d014      	beq.n	8010692 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	785b      	ldrb	r3, [r3, #1]
 801066e:	4618      	mov	r0, r3
 8010670:	f7fd fd1e 	bl	800e0b0 <disk_status>
 8010674:	4603      	mov	r3, r0
 8010676:	f003 0301 	and.w	r3, r3, #1
 801067a:	2b00      	cmp	r3, #0
 801067c:	d102      	bne.n	8010684 <validate+0x60>
				res = FR_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	73fb      	strb	r3, [r7, #15]
 8010682:	e008      	b.n	8010696 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2100      	movs	r1, #0
 801068a:	4618      	mov	r0, r3
 801068c:	f7fd fec4 	bl	800e418 <unlock_fs>
 8010690:	e001      	b.n	8010696 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010692:	230f      	movs	r3, #15
 8010694:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010696:	7bfb      	ldrb	r3, [r7, #15]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d102      	bne.n	80106a2 <validate+0x7e>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	e000      	b.n	80106a4 <validate+0x80>
 80106a2:	2300      	movs	r3, #0
 80106a4:	683a      	ldr	r2, [r7, #0]
 80106a6:	6013      	str	r3, [r2, #0]
	return res;
 80106a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
	...

080106b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b088      	sub	sp, #32
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	4613      	mov	r3, r2
 80106c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80106c6:	f107 0310 	add.w	r3, r7, #16
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7ff fc86 	bl	800ffdc <get_ldnumber>
 80106d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	da01      	bge.n	80106dc <f_mount+0x28>
 80106d8:	230b      	movs	r3, #11
 80106da:	e048      	b.n	801076e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80106dc:	4a26      	ldr	r2, [pc, #152]	; (8010778 <f_mount+0xc4>)
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00f      	beq.n	801070c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80106ec:	69b8      	ldr	r0, [r7, #24]
 80106ee:	f7fd fff7 	bl	800e6e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f001 f805 	bl	8011706 <ff_del_syncobj>
 80106fc:	4603      	mov	r3, r0
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d101      	bne.n	8010706 <f_mount+0x52>
 8010702:	2302      	movs	r3, #2
 8010704:	e033      	b.n	801076e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	2200      	movs	r2, #0
 801070a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d00f      	beq.n	8010732 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2200      	movs	r2, #0
 8010716:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	b2da      	uxtb	r2, r3
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	3314      	adds	r3, #20
 8010720:	4619      	mov	r1, r3
 8010722:	4610      	mov	r0, r2
 8010724:	f000 ffd4 	bl	80116d0 <ff_cre_syncobj>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d101      	bne.n	8010732 <f_mount+0x7e>
 801072e:	2302      	movs	r3, #2
 8010730:	e01d      	b.n	801076e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	4910      	ldr	r1, [pc, #64]	; (8010778 <f_mount+0xc4>)
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d002      	beq.n	8010748 <f_mount+0x94>
 8010742:	79fb      	ldrb	r3, [r7, #7]
 8010744:	2b01      	cmp	r3, #1
 8010746:	d001      	beq.n	801074c <f_mount+0x98>
 8010748:	2300      	movs	r3, #0
 801074a:	e010      	b.n	801076e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801074c:	f107 010c 	add.w	r1, r7, #12
 8010750:	f107 0308 	add.w	r3, r7, #8
 8010754:	2200      	movs	r2, #0
 8010756:	4618      	mov	r0, r3
 8010758:	f7ff fcda 	bl	8010110 <find_volume>
 801075c:	4603      	mov	r3, r0
 801075e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	7dfa      	ldrb	r2, [r7, #23]
 8010764:	4611      	mov	r1, r2
 8010766:	4618      	mov	r0, r3
 8010768:	f7fd fe56 	bl	800e418 <unlock_fs>
 801076c:	7dfb      	ldrb	r3, [r7, #23]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3720      	adds	r7, #32
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	2000078c 	.word	0x2000078c

0801077c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8010782:	af00      	add	r7, sp, #0
 8010784:	f107 030c 	add.w	r3, r7, #12
 8010788:	6018      	str	r0, [r3, #0]
 801078a:	f107 0308 	add.w	r3, r7, #8
 801078e:	6019      	str	r1, [r3, #0]
 8010790:	1dfb      	adds	r3, r7, #7
 8010792:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010794:	f107 030c 	add.w	r3, r7, #12
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d101      	bne.n	80107a2 <f_open+0x26>
 801079e:	2309      	movs	r3, #9
 80107a0:	e24a      	b.n	8010c38 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80107a2:	1dfb      	adds	r3, r7, #7
 80107a4:	1dfa      	adds	r2, r7, #7
 80107a6:	7812      	ldrb	r2, [r2, #0]
 80107a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80107ac:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80107ae:	1dfb      	adds	r3, r7, #7
 80107b0:	781a      	ldrb	r2, [r3, #0]
 80107b2:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80107b6:	f107 0308 	add.w	r3, r7, #8
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7ff fca8 	bl	8010110 <find_volume>
 80107c0:	4603      	mov	r3, r0
 80107c2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80107c6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f040 8221 	bne.w	8010c12 <f_open+0x496>
		dj.obj.fs = fs;
 80107d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80107d4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80107d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80107dc:	f107 0214 	add.w	r2, r7, #20
 80107e0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80107e2:	f107 0308 	add.w	r3, r7, #8
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80107ec:	4611      	mov	r1, r2
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7ff fb7e 	bl	800fef0 <follow_path>
 80107f4:	4603      	mov	r3, r0
 80107f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80107fa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d11b      	bne.n	801083a <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010802:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8010806:	b25b      	sxtb	r3, r3
 8010808:	2b00      	cmp	r3, #0
 801080a:	da03      	bge.n	8010814 <f_open+0x98>
				res = FR_INVALID_NAME;
 801080c:	2306      	movs	r3, #6
 801080e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010812:	e012      	b.n	801083a <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010814:	1dfb      	adds	r3, r7, #7
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	f023 0301 	bic.w	r3, r3, #1
 801081c:	2b00      	cmp	r3, #0
 801081e:	bf14      	ite	ne
 8010820:	2301      	movne	r3, #1
 8010822:	2300      	moveq	r3, #0
 8010824:	b2db      	uxtb	r3, r3
 8010826:	461a      	mov	r2, r3
 8010828:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801082c:	4611      	mov	r1, r2
 801082e:	4618      	mov	r0, r3
 8010830:	f7fd fe0e 	bl	800e450 <chk_lock>
 8010834:	4603      	mov	r3, r0
 8010836:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801083a:	1dfb      	adds	r3, r7, #7
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	f003 031c 	and.w	r3, r3, #28
 8010842:	2b00      	cmp	r3, #0
 8010844:	f000 809b 	beq.w	801097e <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8010848:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801084c:	2b00      	cmp	r3, #0
 801084e:	d019      	beq.n	8010884 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010850:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010854:	2b04      	cmp	r3, #4
 8010856:	d10e      	bne.n	8010876 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010858:	f7fd fe56 	bl	800e508 <enq_lock>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d006      	beq.n	8010870 <f_open+0xf4>
 8010862:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010866:	4618      	mov	r0, r3
 8010868:	f7fe ffb4 	bl	800f7d4 <dir_register>
 801086c:	4603      	mov	r3, r0
 801086e:	e000      	b.n	8010872 <f_open+0xf6>
 8010870:	2312      	movs	r3, #18
 8010872:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010876:	1dfb      	adds	r3, r7, #7
 8010878:	1dfa      	adds	r2, r7, #7
 801087a:	7812      	ldrb	r2, [r2, #0]
 801087c:	f042 0208 	orr.w	r2, r2, #8
 8010880:	701a      	strb	r2, [r3, #0]
 8010882:	e012      	b.n	80108aa <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010884:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010888:	f003 0311 	and.w	r3, r3, #17
 801088c:	2b00      	cmp	r3, #0
 801088e:	d003      	beq.n	8010898 <f_open+0x11c>
					res = FR_DENIED;
 8010890:	2307      	movs	r3, #7
 8010892:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010896:	e008      	b.n	80108aa <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010898:	1dfb      	adds	r3, r7, #7
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	f003 0304 	and.w	r3, r3, #4
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d002      	beq.n	80108aa <f_open+0x12e>
 80108a4:	2308      	movs	r3, #8
 80108a6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80108aa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f040 8082 	bne.w	80109b8 <f_open+0x23c>
 80108b4:	1dfb      	adds	r3, r7, #7
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	f003 0308 	and.w	r3, r3, #8
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d07b      	beq.n	80109b8 <f_open+0x23c>
				dw = GET_FATTIME();
 80108c0:	f7fb ff04 	bl	800c6cc <get_fattime>
 80108c4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80108c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80108cc:	330e      	adds	r3, #14
 80108ce:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fd fce0 	bl	800e298 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80108d8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80108dc:	3316      	adds	r3, #22
 80108de:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fd fcd8 	bl	800e298 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80108e8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80108ec:	330b      	adds	r3, #11
 80108ee:	2220      	movs	r2, #32
 80108f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80108f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80108f6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80108fa:	4611      	mov	r1, r2
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fe fcdf 	bl	800f2c0 <ld_clust>
 8010902:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010906:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801090a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 801090e:	2200      	movs	r2, #0
 8010910:	4618      	mov	r0, r3
 8010912:	f7fe fcf4 	bl	800f2fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010916:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801091a:	331c      	adds	r3, #28
 801091c:	2100      	movs	r1, #0
 801091e:	4618      	mov	r0, r3
 8010920:	f7fd fcba 	bl	800e298 <st_dword>
					fs->wflag = 1;
 8010924:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010928:	2201      	movs	r2, #1
 801092a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801092c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8010930:	2b00      	cmp	r3, #0
 8010932:	d041      	beq.n	80109b8 <f_open+0x23c>
						dw = fs->winsect;
 8010934:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801093a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 801093e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010942:	2200      	movs	r2, #0
 8010944:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8010948:	4618      	mov	r0, r3
 801094a:	f7fe f9de 	bl	800ed0a <remove_chain>
 801094e:	4603      	mov	r3, r0
 8010950:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8010954:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010958:	2b00      	cmp	r3, #0
 801095a:	d12d      	bne.n	80109b8 <f_open+0x23c>
							res = move_window(fs, dw);
 801095c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010960:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010964:	4618      	mov	r0, r3
 8010966:	f7fd ff23 	bl	800e7b0 <move_window>
 801096a:	4603      	mov	r3, r0
 801096c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010970:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010974:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8010978:	3a01      	subs	r2, #1
 801097a:	619a      	str	r2, [r3, #24]
 801097c:	e01c      	b.n	80109b8 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801097e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010982:	2b00      	cmp	r3, #0
 8010984:	d118      	bne.n	80109b8 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010986:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801098a:	f003 0310 	and.w	r3, r3, #16
 801098e:	2b00      	cmp	r3, #0
 8010990:	d003      	beq.n	801099a <f_open+0x21e>
					res = FR_NO_FILE;
 8010992:	2304      	movs	r3, #4
 8010994:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010998:	e00e      	b.n	80109b8 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801099a:	1dfb      	adds	r3, r7, #7
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	f003 0302 	and.w	r3, r3, #2
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d008      	beq.n	80109b8 <f_open+0x23c>
 80109a6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80109aa:	f003 0301 	and.w	r3, r3, #1
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d002      	beq.n	80109b8 <f_open+0x23c>
						res = FR_DENIED;
 80109b2:	2307      	movs	r3, #7
 80109b4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80109b8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d136      	bne.n	8010a2e <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80109c0:	1dfb      	adds	r3, r7, #7
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	f003 0308 	and.w	r3, r3, #8
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d005      	beq.n	80109d8 <f_open+0x25c>
				mode |= FA_MODIFIED;
 80109cc:	1dfb      	adds	r3, r7, #7
 80109ce:	1dfa      	adds	r2, r7, #7
 80109d0:	7812      	ldrb	r2, [r2, #0]
 80109d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80109d6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80109d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80109dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109de:	f107 030c 	add.w	r3, r7, #12
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80109e6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80109ea:	f107 030c 	add.w	r3, r7, #12
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80109f2:	1dfb      	adds	r3, r7, #7
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	f023 0301 	bic.w	r3, r3, #1
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	bf14      	ite	ne
 80109fe:	2301      	movne	r3, #1
 8010a00:	2300      	moveq	r3, #0
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	461a      	mov	r2, r3
 8010a06:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010a0a:	4611      	mov	r1, r2
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fd fd9d 	bl	800e54c <inc_lock>
 8010a12:	4602      	mov	r2, r0
 8010a14:	f107 030c 	add.w	r3, r7, #12
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010a1c:	f107 030c 	add.w	r3, r7, #12
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	691b      	ldr	r3, [r3, #16]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <f_open+0x2b2>
 8010a28:	2302      	movs	r3, #2
 8010a2a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010a2e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f040 80ed 	bne.w	8010c12 <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010a38:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010a3c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010a40:	4611      	mov	r1, r2
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fe fc3c 	bl	800f2c0 <ld_clust>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	f107 030c 	add.w	r3, r7, #12
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010a52:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010a56:	331c      	adds	r3, #28
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7fd fbdf 	bl	800e21c <ld_dword>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	f107 030c 	add.w	r3, r7, #12
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010a68:	f107 030c 	add.w	r3, r7, #12
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010a72:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8010a76:	f107 030c 	add.w	r3, r7, #12
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010a7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010a82:	88da      	ldrh	r2, [r3, #6]
 8010a84:	f107 030c 	add.w	r3, r7, #12
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010a8c:	f107 030c 	add.w	r3, r7, #12
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	1dfa      	adds	r2, r7, #7
 8010a94:	7812      	ldrb	r2, [r2, #0]
 8010a96:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010a98:	f107 030c 	add.w	r3, r7, #12
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010aa2:	f107 030c 	add.w	r3, r7, #12
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010aac:	f107 030c 	add.w	r3, r7, #12
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010ab6:	f107 030c 	add.w	r3, r7, #12
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	3330      	adds	r3, #48	; 0x30
 8010abe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010ac2:	2100      	movs	r1, #0
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fd fc34 	bl	800e332 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010aca:	1dfb      	adds	r3, r7, #7
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	f003 0320 	and.w	r3, r3, #32
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 809d 	beq.w	8010c12 <f_open+0x496>
 8010ad8:	f107 030c 	add.w	r3, r7, #12
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f000 8096 	beq.w	8010c12 <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010ae6:	f107 030c 	add.w	r3, r7, #12
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68da      	ldr	r2, [r3, #12]
 8010aee:	f107 030c 	add.w	r3, r7, #12
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010af6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010afa:	895b      	ldrh	r3, [r3, #10]
 8010afc:	461a      	mov	r2, r3
 8010afe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010b02:	899b      	ldrh	r3, [r3, #12]
 8010b04:	fb03 f302 	mul.w	r3, r3, r2
 8010b08:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010b0c:	f107 030c 	add.w	r3, r7, #12
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010b18:	f107 030c 	add.w	r3, r7, #12
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010b24:	e01f      	b.n	8010b66 <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 8010b26:	f107 030c 	add.w	r3, r7, #12
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fd fefa 	bl	800e92a <get_fat>
 8010b36:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8010b3a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d802      	bhi.n	8010b48 <f_open+0x3cc>
 8010b42:	2302      	movs	r3, #2
 8010b44:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010b48:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8010b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b50:	d102      	bne.n	8010b58 <f_open+0x3dc>
 8010b52:	2301      	movs	r3, #1
 8010b54:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010b58:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010b5c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010b60:	1ad3      	subs	r3, r2, r3
 8010b62:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010b66:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d105      	bne.n	8010b7a <f_open+0x3fe>
 8010b6e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010b72:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d8d5      	bhi.n	8010b26 <f_open+0x3aa>
				}
				fp->clust = clst;
 8010b7a:	f107 030c 	add.w	r3, r7, #12
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8010b84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010b86:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d141      	bne.n	8010c12 <f_open+0x496>
 8010b8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010b92:	899b      	ldrh	r3, [r3, #12]
 8010b94:	461a      	mov	r2, r3
 8010b96:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8010b9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b9e:	fb02 f201 	mul.w	r2, r2, r1
 8010ba2:	1a9b      	subs	r3, r3, r2
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d034      	beq.n	8010c12 <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010ba8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010bac:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7fd fe9b 	bl	800e8ec <clust2sect>
 8010bb6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8010bba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d103      	bne.n	8010bca <f_open+0x44e>
						res = FR_INT_ERR;
 8010bc2:	2302      	movs	r3, #2
 8010bc4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010bc8:	e023      	b.n	8010c12 <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010bca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010bce:	899b      	ldrh	r3, [r3, #12]
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8010bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8010bda:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010bde:	441a      	add	r2, r3
 8010be0:	f107 030c 	add.w	r3, r7, #12
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010be8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010bec:	7858      	ldrb	r0, [r3, #1]
 8010bee:	f107 030c 	add.w	r3, r7, #12
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bf8:	f107 030c 	add.w	r3, r7, #12
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	6a1a      	ldr	r2, [r3, #32]
 8010c00:	2301      	movs	r3, #1
 8010c02:	f7fd fa95 	bl	800e130 <disk_read>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d002      	beq.n	8010c12 <f_open+0x496>
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010c12:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d004      	beq.n	8010c24 <f_open+0x4a8>
 8010c1a:	f107 030c 	add.w	r3, r7, #12
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2200      	movs	r2, #0
 8010c22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010c24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010c28:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8010c2c:	4611      	mov	r1, r2
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fd fbf2 	bl	800e418 <unlock_fs>
 8010c34:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}

08010c42 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b08c      	sub	sp, #48	; 0x30
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	60f8      	str	r0, [r7, #12]
 8010c4a:	60b9      	str	r1, [r7, #8]
 8010c4c:	607a      	str	r2, [r7, #4]
 8010c4e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	2200      	movs	r2, #0
 8010c58:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	f107 0210 	add.w	r2, r7, #16
 8010c60:	4611      	mov	r1, r2
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7ff fcde 	bl	8010624 <validate>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d107      	bne.n	8010c86 <f_write+0x44>
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	7d5b      	ldrb	r3, [r3, #21]
 8010c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d009      	beq.n	8010c9a <f_write+0x58>
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fd fbc2 	bl	800e418 <unlock_fs>
 8010c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c98:	e192      	b.n	8010fc0 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	7d1b      	ldrb	r3, [r3, #20]
 8010c9e:	f003 0302 	and.w	r3, r3, #2
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d106      	bne.n	8010cb4 <f_write+0x72>
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	2107      	movs	r1, #7
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7fd fbb4 	bl	800e418 <unlock_fs>
 8010cb0:	2307      	movs	r3, #7
 8010cb2:	e185      	b.n	8010fc0 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	699a      	ldr	r2, [r3, #24]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	441a      	add	r2, r3
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	699b      	ldr	r3, [r3, #24]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	f080 816a 	bcs.w	8010f9a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	699b      	ldr	r3, [r3, #24]
 8010cca:	43db      	mvns	r3, r3
 8010ccc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010cce:	e164      	b.n	8010f9a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	699b      	ldr	r3, [r3, #24]
 8010cd4:	693a      	ldr	r2, [r7, #16]
 8010cd6:	8992      	ldrh	r2, [r2, #12]
 8010cd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cdc:	fb02 f201 	mul.w	r2, r2, r1
 8010ce0:	1a9b      	subs	r3, r3, r2
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	f040 810f 	bne.w	8010f06 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	699b      	ldr	r3, [r3, #24]
 8010cec:	693a      	ldr	r2, [r7, #16]
 8010cee:	8992      	ldrh	r2, [r2, #12]
 8010cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cf4:	693a      	ldr	r2, [r7, #16]
 8010cf6:	8952      	ldrh	r2, [r2, #10]
 8010cf8:	3a01      	subs	r2, #1
 8010cfa:	4013      	ands	r3, r2
 8010cfc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d14d      	bne.n	8010da0 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	699b      	ldr	r3, [r3, #24]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d10c      	bne.n	8010d26 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	689b      	ldr	r3, [r3, #8]
 8010d10:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d11a      	bne.n	8010d4e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fe f859 	bl	800edd4 <create_chain>
 8010d22:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d24:	e013      	b.n	8010d4e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d007      	beq.n	8010d3e <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	699b      	ldr	r3, [r3, #24]
 8010d32:	4619      	mov	r1, r3
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f7fe f8e5 	bl	800ef04 <clmt_clust>
 8010d3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d3c:	e007      	b.n	8010d4e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010d3e:	68fa      	ldr	r2, [r7, #12]
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	69db      	ldr	r3, [r3, #28]
 8010d44:	4619      	mov	r1, r3
 8010d46:	4610      	mov	r0, r2
 8010d48:	f7fe f844 	bl	800edd4 <create_chain>
 8010d4c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f000 8127 	beq.w	8010fa4 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d109      	bne.n	8010d70 <f_write+0x12e>
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	2202      	movs	r2, #2
 8010d60:	755a      	strb	r2, [r3, #21]
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	2102      	movs	r1, #2
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fd fb56 	bl	800e418 <unlock_fs>
 8010d6c:	2302      	movs	r3, #2
 8010d6e:	e127      	b.n	8010fc0 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d76:	d109      	bne.n	8010d8c <f_write+0x14a>
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	755a      	strb	r2, [r3, #21]
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	2101      	movs	r1, #1
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fd fb48 	bl	800e418 <unlock_fs>
 8010d88:	2301      	movs	r3, #1
 8010d8a:	e119      	b.n	8010fc0 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d90:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	689b      	ldr	r3, [r3, #8]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d102      	bne.n	8010da0 <f_write+0x15e>
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d9e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	7d1b      	ldrb	r3, [r3, #20]
 8010da4:	b25b      	sxtb	r3, r3
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	da1d      	bge.n	8010de6 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	7858      	ldrb	r0, [r3, #1]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	6a1a      	ldr	r2, [r3, #32]
 8010db8:	2301      	movs	r3, #1
 8010dba:	f7fd f9d9 	bl	800e170 <disk_write>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d009      	beq.n	8010dd8 <f_write+0x196>
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2201      	movs	r2, #1
 8010dc8:	755a      	strb	r2, [r3, #21]
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	2101      	movs	r1, #1
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fd fb22 	bl	800e418 <unlock_fs>
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	e0f3      	b.n	8010fc0 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	7d1b      	ldrb	r3, [r3, #20]
 8010ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010de0:	b2da      	uxtb	r2, r3
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010de6:	693a      	ldr	r2, [r7, #16]
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	69db      	ldr	r3, [r3, #28]
 8010dec:	4619      	mov	r1, r3
 8010dee:	4610      	mov	r0, r2
 8010df0:	f7fd fd7c 	bl	800e8ec <clust2sect>
 8010df4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d109      	bne.n	8010e10 <f_write+0x1ce>
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2202      	movs	r2, #2
 8010e00:	755a      	strb	r2, [r3, #21]
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	2102      	movs	r1, #2
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7fd fb06 	bl	800e418 <unlock_fs>
 8010e0c:	2302      	movs	r3, #2
 8010e0e:	e0d7      	b.n	8010fc0 <f_write+0x37e>
			sect += csect;
 8010e10:	697a      	ldr	r2, [r7, #20]
 8010e12:	69bb      	ldr	r3, [r7, #24]
 8010e14:	4413      	add	r3, r2
 8010e16:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	899b      	ldrh	r3, [r3, #12]
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e24:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010e26:	6a3b      	ldr	r3, [r7, #32]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d048      	beq.n	8010ebe <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010e2c:	69ba      	ldr	r2, [r7, #24]
 8010e2e:	6a3b      	ldr	r3, [r7, #32]
 8010e30:	4413      	add	r3, r2
 8010e32:	693a      	ldr	r2, [r7, #16]
 8010e34:	8952      	ldrh	r2, [r2, #10]
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d905      	bls.n	8010e46 <f_write+0x204>
					cc = fs->csize - csect;
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	895b      	ldrh	r3, [r3, #10]
 8010e3e:	461a      	mov	r2, r3
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	7858      	ldrb	r0, [r3, #1]
 8010e4a:	6a3b      	ldr	r3, [r7, #32]
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	69f9      	ldr	r1, [r7, #28]
 8010e50:	f7fd f98e 	bl	800e170 <disk_write>
 8010e54:	4603      	mov	r3, r0
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d009      	beq.n	8010e6e <f_write+0x22c>
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	755a      	strb	r2, [r3, #21]
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	2101      	movs	r1, #1
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fd fad7 	bl	800e418 <unlock_fs>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	e0a8      	b.n	8010fc0 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	6a1a      	ldr	r2, [r3, #32]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	6a3a      	ldr	r2, [r7, #32]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d918      	bls.n	8010eae <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6a1a      	ldr	r2, [r3, #32]
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	1ad3      	subs	r3, r2, r3
 8010e8a:	693a      	ldr	r2, [r7, #16]
 8010e8c:	8992      	ldrh	r2, [r2, #12]
 8010e8e:	fb02 f303 	mul.w	r3, r2, r3
 8010e92:	69fa      	ldr	r2, [r7, #28]
 8010e94:	18d1      	adds	r1, r2, r3
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	899b      	ldrh	r3, [r3, #12]
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	f7fd fa28 	bl	800e2f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	7d1b      	ldrb	r3, [r3, #20]
 8010ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	899b      	ldrh	r3, [r3, #12]
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	6a3b      	ldr	r3, [r7, #32]
 8010eb6:	fb02 f303 	mul.w	r3, r2, r3
 8010eba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010ebc:	e050      	b.n	8010f60 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	6a1b      	ldr	r3, [r3, #32]
 8010ec2:	697a      	ldr	r2, [r7, #20]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d01b      	beq.n	8010f00 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	699a      	ldr	r2, [r3, #24]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d215      	bcs.n	8010f00 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	7858      	ldrb	r0, [r3, #1]
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ede:	2301      	movs	r3, #1
 8010ee0:	697a      	ldr	r2, [r7, #20]
 8010ee2:	f7fd f925 	bl	800e130 <disk_read>
 8010ee6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d009      	beq.n	8010f00 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	755a      	strb	r2, [r3, #21]
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	2101      	movs	r1, #1
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fd fa8e 	bl	800e418 <unlock_fs>
 8010efc:	2301      	movs	r3, #1
 8010efe:	e05f      	b.n	8010fc0 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	697a      	ldr	r2, [r7, #20]
 8010f04:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	899b      	ldrh	r3, [r3, #12]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	699b      	ldr	r3, [r3, #24]
 8010f10:	693a      	ldr	r2, [r7, #16]
 8010f12:	8992      	ldrh	r2, [r2, #12]
 8010f14:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f18:	fb02 f201 	mul.w	r2, r2, r1
 8010f1c:	1a9b      	subs	r3, r3, r2
 8010f1e:	1ac3      	subs	r3, r0, r3
 8010f20:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d901      	bls.n	8010f2e <f_write+0x2ec>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	699b      	ldr	r3, [r3, #24]
 8010f38:	693a      	ldr	r2, [r7, #16]
 8010f3a:	8992      	ldrh	r2, [r2, #12]
 8010f3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f40:	fb02 f200 	mul.w	r2, r2, r0
 8010f44:	1a9b      	subs	r3, r3, r2
 8010f46:	440b      	add	r3, r1
 8010f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f4a:	69f9      	ldr	r1, [r7, #28]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7fd f9cf 	bl	800e2f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	7d1b      	ldrb	r3, [r3, #20]
 8010f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010f5a:	b2da      	uxtb	r2, r3
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010f60:	69fa      	ldr	r2, [r7, #28]
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	4413      	add	r3, r2
 8010f66:	61fb      	str	r3, [r7, #28]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	699a      	ldr	r2, [r3, #24]
 8010f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6e:	441a      	add	r2, r3
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	619a      	str	r2, [r3, #24]
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	68da      	ldr	r2, [r3, #12]
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	699b      	ldr	r3, [r3, #24]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	bf38      	it	cc
 8010f80:	461a      	movcc	r2, r3
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	60da      	str	r2, [r3, #12]
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	681a      	ldr	r2, [r3, #0]
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8c:	441a      	add	r2, r3
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	601a      	str	r2, [r3, #0]
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f96:	1ad3      	subs	r3, r2, r3
 8010f98:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f47f ae97 	bne.w	8010cd0 <f_write+0x8e>
 8010fa2:	e000      	b.n	8010fa6 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010fa4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	7d1b      	ldrb	r3, [r3, #20]
 8010faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fae:	b2da      	uxtb	r2, r3
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7fd fa2d 	bl	800e418 <unlock_fs>
 8010fbe:	2300      	movs	r3, #0
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3730      	adds	r7, #48	; 0x30
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b086      	sub	sp, #24
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f107 0208 	add.w	r2, r7, #8
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7ff fb23 	bl	8010624 <validate>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010fe2:	7dfb      	ldrb	r3, [r7, #23]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d16d      	bne.n	80110c4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	7d1b      	ldrb	r3, [r3, #20]
 8010fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d067      	beq.n	80110c4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	7d1b      	ldrb	r3, [r3, #20]
 8010ff8:	b25b      	sxtb	r3, r3
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	da1a      	bge.n	8011034 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	7858      	ldrb	r0, [r3, #1]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6a1a      	ldr	r2, [r3, #32]
 801100c:	2301      	movs	r3, #1
 801100e:	f7fd f8af 	bl	800e170 <disk_write>
 8011012:	4603      	mov	r3, r0
 8011014:	2b00      	cmp	r3, #0
 8011016:	d006      	beq.n	8011026 <f_sync+0x5e>
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	2101      	movs	r1, #1
 801101c:	4618      	mov	r0, r3
 801101e:	f7fd f9fb 	bl	800e418 <unlock_fs>
 8011022:	2301      	movs	r3, #1
 8011024:	e055      	b.n	80110d2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	7d1b      	ldrb	r3, [r3, #20]
 801102a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801102e:	b2da      	uxtb	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011034:	f7fb fb4a 	bl	800c6cc <get_fattime>
 8011038:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801103a:	68ba      	ldr	r2, [r7, #8]
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011040:	4619      	mov	r1, r3
 8011042:	4610      	mov	r0, r2
 8011044:	f7fd fbb4 	bl	800e7b0 <move_window>
 8011048:	4603      	mov	r3, r0
 801104a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801104c:	7dfb      	ldrb	r3, [r7, #23]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d138      	bne.n	80110c4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011056:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	330b      	adds	r3, #11
 801105c:	781a      	ldrb	r2, [r3, #0]
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	330b      	adds	r3, #11
 8011062:	f042 0220 	orr.w	r2, r2, #32
 8011066:	b2d2      	uxtb	r2, r2
 8011068:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6818      	ldr	r0, [r3, #0]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	689b      	ldr	r3, [r3, #8]
 8011072:	461a      	mov	r2, r3
 8011074:	68f9      	ldr	r1, [r7, #12]
 8011076:	f7fe f942 	bl	800f2fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f103 021c 	add.w	r2, r3, #28
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	4619      	mov	r1, r3
 8011086:	4610      	mov	r0, r2
 8011088:	f7fd f906 	bl	800e298 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	3316      	adds	r3, #22
 8011090:	6939      	ldr	r1, [r7, #16]
 8011092:	4618      	mov	r0, r3
 8011094:	f7fd f900 	bl	800e298 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	3312      	adds	r3, #18
 801109c:	2100      	movs	r1, #0
 801109e:	4618      	mov	r0, r3
 80110a0:	f7fd f8df 	bl	800e262 <st_word>
					fs->wflag = 1;
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	2201      	movs	r2, #1
 80110a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7fd fbad 	bl	800e80c <sync_fs>
 80110b2:	4603      	mov	r3, r0
 80110b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	7d1b      	ldrb	r3, [r3, #20]
 80110ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	7dfa      	ldrb	r2, [r7, #23]
 80110c8:	4611      	mov	r1, r2
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fd f9a4 	bl	800e418 <unlock_fs>
 80110d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3718      	adds	r7, #24
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b084      	sub	sp, #16
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f7ff ff70 	bl	8010fc8 <f_sync>
 80110e8:	4603      	mov	r3, r0
 80110ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80110ec:	7bfb      	ldrb	r3, [r7, #15]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d11d      	bne.n	801112e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f107 0208 	add.w	r2, r7, #8
 80110f8:	4611      	mov	r1, r2
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7ff fa92 	bl	8010624 <validate>
 8011100:	4603      	mov	r3, r0
 8011102:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011104:	7bfb      	ldrb	r3, [r7, #15]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d111      	bne.n	801112e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	691b      	ldr	r3, [r3, #16]
 801110e:	4618      	mov	r0, r3
 8011110:	f7fd faaa 	bl	800e668 <dec_lock>
 8011114:	4603      	mov	r3, r0
 8011116:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011118:	7bfb      	ldrb	r3, [r7, #15]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d102      	bne.n	8011124 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2200      	movs	r2, #0
 8011122:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	2100      	movs	r1, #0
 8011128:	4618      	mov	r0, r3
 801112a:	f7fd f975 	bl	800e418 <unlock_fs>
#endif
		}
	}
	return res;
 801112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011130:	4618      	mov	r0, r3
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 801113e:	af00      	add	r7, sp, #0
 8011140:	1d3b      	adds	r3, r7, #4
 8011142:	6018      	str	r0, [r3, #0]
 8011144:	463b      	mov	r3, r7
 8011146:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8011148:	f507 7102 	add.w	r1, r7, #520	; 0x208
 801114c:	1d3b      	adds	r3, r7, #4
 801114e:	2200      	movs	r2, #0
 8011150:	4618      	mov	r0, r3
 8011152:	f7fe ffdd 	bl	8010110 <find_volume>
 8011156:	4603      	mov	r3, r0
 8011158:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 801115c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8011160:	2b00      	cmp	r3, #0
 8011162:	d127      	bne.n	80111b4 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8011164:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8011168:	f107 0208 	add.w	r2, r7, #8
 801116c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801116e:	1d3b      	adds	r3, r7, #4
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011176:	4611      	mov	r1, r2
 8011178:	4618      	mov	r0, r3
 801117a:	f7fe feb9 	bl	800fef0 <follow_path>
 801117e:	4603      	mov	r3, r0
 8011180:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8011184:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8011188:	2b00      	cmp	r3, #0
 801118a:	d113      	bne.n	80111b4 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801118c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8011190:	b25b      	sxtb	r3, r3
 8011192:	2b00      	cmp	r3, #0
 8011194:	da03      	bge.n	801119e <f_stat+0x66>
				res = FR_INVALID_NAME;
 8011196:	2306      	movs	r3, #6
 8011198:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 801119c:	e00a      	b.n	80111b4 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801119e:	463b      	mov	r3, r7
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d006      	beq.n	80111b4 <f_stat+0x7c>
 80111a6:	463b      	mov	r3, r7
 80111a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80111ac:	6819      	ldr	r1, [r3, #0]
 80111ae:	4610      	mov	r0, r2
 80111b0:	f7fe fc08 	bl	800f9c4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80111b4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80111b8:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 80111bc:	4611      	mov	r1, r2
 80111be:	4618      	mov	r0, r3
 80111c0:	f7fd f92a 	bl	800e418 <unlock_fs>
 80111c4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	f507 7710 	add.w	r7, r7, #576	; 0x240
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80111d8:	af00      	add	r7, sp, #0
 80111da:	1d3b      	adds	r3, r7, #4
 80111dc:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80111de:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80111e2:	1d3b      	adds	r3, r7, #4
 80111e4:	2202      	movs	r2, #2
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fe ff92 	bl	8010110 <find_volume>
 80111ec:	4603      	mov	r3, r0
 80111ee:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 80111f2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80111f6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 80111fa:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f040 8134 	bne.w	801146c <f_mkdir+0x29a>
		INIT_NAMBUF(fs);
 8011204:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011208:	f107 020c 	add.w	r2, r7, #12
 801120c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 801120e:	1d3b      	adds	r3, r7, #4
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8011216:	4611      	mov	r1, r2
 8011218:	4618      	mov	r0, r3
 801121a:	f7fe fe69 	bl	800fef0 <follow_path>
 801121e:	4603      	mov	r3, r0
 8011220:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011224:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011228:	2b00      	cmp	r3, #0
 801122a:	d102      	bne.n	8011232 <f_mkdir+0x60>
 801122c:	2308      	movs	r3, #8
 801122e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011232:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011236:	2b04      	cmp	r3, #4
 8011238:	f040 8118 	bne.w	801146c <f_mkdir+0x29a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801123c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8011240:	2100      	movs	r1, #0
 8011242:	4618      	mov	r0, r3
 8011244:	f7fd fdc6 	bl	800edd4 <create_chain>
 8011248:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801124c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011250:	895b      	ldrh	r3, [r3, #10]
 8011252:	461a      	mov	r2, r3
 8011254:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011258:	899b      	ldrh	r3, [r3, #12]
 801125a:	fb03 f302 	mul.w	r3, r3, r2
 801125e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 8011262:	2300      	movs	r3, #0
 8011264:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011268:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801126c:	2b00      	cmp	r3, #0
 801126e:	d102      	bne.n	8011276 <f_mkdir+0xa4>
 8011270:	2307      	movs	r3, #7
 8011272:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 8011276:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801127a:	2b01      	cmp	r3, #1
 801127c:	d102      	bne.n	8011284 <f_mkdir+0xb2>
 801127e:	2302      	movs	r3, #2
 8011280:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011284:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8011288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801128c:	d102      	bne.n	8011294 <f_mkdir+0xc2>
 801128e:	2301      	movs	r3, #1
 8011290:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011294:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011298:	2b00      	cmp	r3, #0
 801129a:	d107      	bne.n	80112ac <f_mkdir+0xda>
 801129c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7fd fa41 	bl	800e728 <sync_window>
 80112a6:	4603      	mov	r3, r0
 80112a8:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 80112ac:	f7fb fa0e 	bl	800c6cc <get_fattime>
 80112b0:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 80112b4:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	f040 8094 	bne.w	80113e6 <f_mkdir+0x214>
				dsc = clust2sect(fs, dcl);
 80112be:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80112c2:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fd fb10 	bl	800e8ec <clust2sect>
 80112cc:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 80112d0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80112d4:	333c      	adds	r3, #60	; 0x3c
 80112d6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 80112da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80112de:	899b      	ldrh	r3, [r3, #12]
 80112e0:	461a      	mov	r2, r3
 80112e2:	2100      	movs	r1, #0
 80112e4:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80112e8:	f7fd f823 	bl	800e332 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80112ec:	220b      	movs	r2, #11
 80112ee:	2120      	movs	r1, #32
 80112f0:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80112f4:	f7fd f81d 	bl	800e332 <mem_set>
					dir[DIR_Name] = '.';
 80112f8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80112fc:	222e      	movs	r2, #46	; 0x2e
 80112fe:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011300:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011304:	330b      	adds	r3, #11
 8011306:	2210      	movs	r2, #16
 8011308:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801130a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801130e:	3316      	adds	r3, #22
 8011310:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011314:	4618      	mov	r0, r3
 8011316:	f7fc ffbf 	bl	800e298 <st_dword>
					st_clust(fs, dir, dcl);
 801131a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801131e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8011322:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8011326:	4618      	mov	r0, r3
 8011328:	f7fd ffe9 	bl	800f2fe <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801132c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011330:	3320      	adds	r3, #32
 8011332:	2220      	movs	r2, #32
 8011334:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8011338:	4618      	mov	r0, r3
 801133a:	f7fc ffd9 	bl	800e2f0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801133e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011342:	3321      	adds	r3, #33	; 0x21
 8011344:	222e      	movs	r2, #46	; 0x2e
 8011346:	701a      	strb	r2, [r3, #0]
 8011348:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801134c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011350:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	2b03      	cmp	r3, #3
 8011358:	d109      	bne.n	801136e <f_mkdir+0x19c>
 801135a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011360:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8011364:	429a      	cmp	r2, r3
 8011366:	d102      	bne.n	801136e <f_mkdir+0x19c>
 8011368:	2300      	movs	r3, #0
 801136a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 801136e:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8011372:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011376:	3320      	adds	r3, #32
 8011378:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801137c:	4619      	mov	r1, r3
 801137e:	f7fd ffbe 	bl	800f2fe <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011382:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011386:	895b      	ldrh	r3, [r3, #10]
 8011388:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 801138c:	e025      	b.n	80113da <f_mkdir+0x208>
					fs->winsect = dsc++;
 801138e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8011392:	1c5a      	adds	r2, r3, #1
 8011394:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8011398:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801139c:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 801139e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80113a2:	2201      	movs	r2, #1
 80113a4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80113a6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fd f9bc 	bl	800e728 <sync_window>
 80113b0:	4603      	mov	r3, r0
 80113b2:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 80113b6:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d112      	bne.n	80113e4 <f_mkdir+0x212>
					mem_set(dir, 0, SS(fs));
 80113be:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80113c2:	899b      	ldrh	r3, [r3, #12]
 80113c4:	461a      	mov	r2, r3
 80113c6:	2100      	movs	r1, #0
 80113c8:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80113cc:	f7fc ffb1 	bl	800e332 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80113d0:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80113d4:	3b01      	subs	r3, #1
 80113d6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80113da:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1d5      	bne.n	801138e <f_mkdir+0x1bc>
 80113e2:	e000      	b.n	80113e6 <f_mkdir+0x214>
					if (res != FR_OK) break;
 80113e4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80113e6:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d107      	bne.n	80113fe <f_mkdir+0x22c>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80113ee:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7fe f9ee 	bl	800f7d4 <dir_register>
 80113f8:	4603      	mov	r3, r0
 80113fa:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 80113fe:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011402:	2b00      	cmp	r3, #0
 8011404:	d12a      	bne.n	801145c <f_mkdir+0x28a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011406:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801140a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801140e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011412:	3316      	adds	r3, #22
 8011414:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011418:	4618      	mov	r0, r3
 801141a:	f7fc ff3d 	bl	800e298 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801141e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011422:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8011426:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 801142a:	4618      	mov	r0, r3
 801142c:	f7fd ff67 	bl	800f2fe <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011430:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011434:	330b      	adds	r3, #11
 8011436:	2210      	movs	r2, #16
 8011438:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801143a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801143e:	2201      	movs	r2, #1
 8011440:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011442:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011446:	2b00      	cmp	r3, #0
 8011448:	d110      	bne.n	801146c <f_mkdir+0x29a>
					res = sync_fs(fs);
 801144a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801144e:	4618      	mov	r0, r3
 8011450:	f7fd f9dc 	bl	800e80c <sync_fs>
 8011454:	4603      	mov	r3, r0
 8011456:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 801145a:	e007      	b.n	801146c <f_mkdir+0x29a>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801145c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8011460:	2200      	movs	r2, #0
 8011462:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8011466:	4618      	mov	r0, r3
 8011468:	f7fd fc4f 	bl	800ed0a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801146c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011470:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 8011474:	4611      	mov	r1, r2
 8011476:	4618      	mov	r0, r3
 8011478:	f7fc ffce 	bl	800e418 <unlock_fs>
 801147c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 8011480:	4618      	mov	r0, r3
 8011482:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
	...

0801148c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801148c:	b480      	push	{r7}
 801148e:	b087      	sub	sp, #28
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	4613      	mov	r3, r2
 8011498:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801149a:	2301      	movs	r3, #1
 801149c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80114a2:	4b1f      	ldr	r3, [pc, #124]	; (8011520 <FATFS_LinkDriverEx+0x94>)
 80114a4:	7a5b      	ldrb	r3, [r3, #9]
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d131      	bne.n	8011510 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80114ac:	4b1c      	ldr	r3, [pc, #112]	; (8011520 <FATFS_LinkDriverEx+0x94>)
 80114ae:	7a5b      	ldrb	r3, [r3, #9]
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	461a      	mov	r2, r3
 80114b4:	4b1a      	ldr	r3, [pc, #104]	; (8011520 <FATFS_LinkDriverEx+0x94>)
 80114b6:	2100      	movs	r1, #0
 80114b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80114ba:	4b19      	ldr	r3, [pc, #100]	; (8011520 <FATFS_LinkDriverEx+0x94>)
 80114bc:	7a5b      	ldrb	r3, [r3, #9]
 80114be:	b2db      	uxtb	r3, r3
 80114c0:	4a17      	ldr	r2, [pc, #92]	; (8011520 <FATFS_LinkDriverEx+0x94>)
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	4413      	add	r3, r2
 80114c6:	68fa      	ldr	r2, [r7, #12]
 80114c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80114ca:	4b15      	ldr	r3, [pc, #84]	; (8011520 <FATFS_LinkDriverEx+0x94>)
 80114cc:	7a5b      	ldrb	r3, [r3, #9]
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	461a      	mov	r2, r3
 80114d2:	4b13      	ldr	r3, [pc, #76]	; (8011520 <FATFS_LinkDriverEx+0x94>)
 80114d4:	4413      	add	r3, r2
 80114d6:	79fa      	ldrb	r2, [r7, #7]
 80114d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80114da:	4b11      	ldr	r3, [pc, #68]	; (8011520 <FATFS_LinkDriverEx+0x94>)
 80114dc:	7a5b      	ldrb	r3, [r3, #9]
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	1c5a      	adds	r2, r3, #1
 80114e2:	b2d1      	uxtb	r1, r2
 80114e4:	4a0e      	ldr	r2, [pc, #56]	; (8011520 <FATFS_LinkDriverEx+0x94>)
 80114e6:	7251      	strb	r1, [r2, #9]
 80114e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80114ea:	7dbb      	ldrb	r3, [r7, #22]
 80114ec:	3330      	adds	r3, #48	; 0x30
 80114ee:	b2da      	uxtb	r2, r3
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	3301      	adds	r3, #1
 80114f8:	223a      	movs	r2, #58	; 0x3a
 80114fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	3302      	adds	r3, #2
 8011500:	222f      	movs	r2, #47	; 0x2f
 8011502:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	3303      	adds	r3, #3
 8011508:	2200      	movs	r2, #0
 801150a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801150c:	2300      	movs	r3, #0
 801150e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011510:	7dfb      	ldrb	r3, [r7, #23]
}
 8011512:	4618      	mov	r0, r3
 8011514:	371c      	adds	r7, #28
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop
 8011520:	200007b4 	.word	0x200007b4

08011524 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801152e:	2200      	movs	r2, #0
 8011530:	6839      	ldr	r1, [r7, #0]
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f7ff ffaa 	bl	801148c <FATFS_LinkDriverEx>
 8011538:	4603      	mov	r3, r0
}
 801153a:	4618      	mov	r0, r3
 801153c:	3708      	adds	r7, #8
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
	...

08011544 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011544:	b480      	push	{r7}
 8011546:	b085      	sub	sp, #20
 8011548:	af00      	add	r7, sp, #0
 801154a:	4603      	mov	r3, r0
 801154c:	6039      	str	r1, [r7, #0]
 801154e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011550:	88fb      	ldrh	r3, [r7, #6]
 8011552:	2b7f      	cmp	r3, #127	; 0x7f
 8011554:	d802      	bhi.n	801155c <ff_convert+0x18>
		c = chr;
 8011556:	88fb      	ldrh	r3, [r7, #6]
 8011558:	81fb      	strh	r3, [r7, #14]
 801155a:	e025      	b.n	80115a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d00b      	beq.n	801157a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011562:	88fb      	ldrh	r3, [r7, #6]
 8011564:	2bff      	cmp	r3, #255	; 0xff
 8011566:	d805      	bhi.n	8011574 <ff_convert+0x30>
 8011568:	88fb      	ldrh	r3, [r7, #6]
 801156a:	3b80      	subs	r3, #128	; 0x80
 801156c:	4a12      	ldr	r2, [pc, #72]	; (80115b8 <ff_convert+0x74>)
 801156e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011572:	e000      	b.n	8011576 <ff_convert+0x32>
 8011574:	2300      	movs	r3, #0
 8011576:	81fb      	strh	r3, [r7, #14]
 8011578:	e016      	b.n	80115a8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801157a:	2300      	movs	r3, #0
 801157c:	81fb      	strh	r3, [r7, #14]
 801157e:	e009      	b.n	8011594 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011580:	89fb      	ldrh	r3, [r7, #14]
 8011582:	4a0d      	ldr	r2, [pc, #52]	; (80115b8 <ff_convert+0x74>)
 8011584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011588:	88fa      	ldrh	r2, [r7, #6]
 801158a:	429a      	cmp	r2, r3
 801158c:	d006      	beq.n	801159c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801158e:	89fb      	ldrh	r3, [r7, #14]
 8011590:	3301      	adds	r3, #1
 8011592:	81fb      	strh	r3, [r7, #14]
 8011594:	89fb      	ldrh	r3, [r7, #14]
 8011596:	2b7f      	cmp	r3, #127	; 0x7f
 8011598:	d9f2      	bls.n	8011580 <ff_convert+0x3c>
 801159a:	e000      	b.n	801159e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801159c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801159e:	89fb      	ldrh	r3, [r7, #14]
 80115a0:	3380      	adds	r3, #128	; 0x80
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80115a8:	89fb      	ldrh	r3, [r7, #14]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3714      	adds	r7, #20
 80115ae:	46bd      	mov	sp, r7
 80115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b4:	4770      	bx	lr
 80115b6:	bf00      	nop
 80115b8:	08019b98 	.word	0x08019b98

080115bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80115bc:	b480      	push	{r7}
 80115be:	b087      	sub	sp, #28
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80115c6:	88fb      	ldrh	r3, [r7, #6]
 80115c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115cc:	d201      	bcs.n	80115d2 <ff_wtoupper+0x16>
 80115ce:	4b3e      	ldr	r3, [pc, #248]	; (80116c8 <ff_wtoupper+0x10c>)
 80115d0:	e000      	b.n	80115d4 <ff_wtoupper+0x18>
 80115d2:	4b3e      	ldr	r3, [pc, #248]	; (80116cc <ff_wtoupper+0x110>)
 80115d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	1c9a      	adds	r2, r3, #2
 80115da:	617a      	str	r2, [r7, #20]
 80115dc:	881b      	ldrh	r3, [r3, #0]
 80115de:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80115e0:	8a7b      	ldrh	r3, [r7, #18]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d068      	beq.n	80116b8 <ff_wtoupper+0xfc>
 80115e6:	88fa      	ldrh	r2, [r7, #6]
 80115e8:	8a7b      	ldrh	r3, [r7, #18]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d364      	bcc.n	80116b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	1c9a      	adds	r2, r3, #2
 80115f2:	617a      	str	r2, [r7, #20]
 80115f4:	881b      	ldrh	r3, [r3, #0]
 80115f6:	823b      	strh	r3, [r7, #16]
 80115f8:	8a3b      	ldrh	r3, [r7, #16]
 80115fa:	0a1b      	lsrs	r3, r3, #8
 80115fc:	81fb      	strh	r3, [r7, #14]
 80115fe:	8a3b      	ldrh	r3, [r7, #16]
 8011600:	b2db      	uxtb	r3, r3
 8011602:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011604:	88fa      	ldrh	r2, [r7, #6]
 8011606:	8a79      	ldrh	r1, [r7, #18]
 8011608:	8a3b      	ldrh	r3, [r7, #16]
 801160a:	440b      	add	r3, r1
 801160c:	429a      	cmp	r2, r3
 801160e:	da49      	bge.n	80116a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011610:	89fb      	ldrh	r3, [r7, #14]
 8011612:	2b08      	cmp	r3, #8
 8011614:	d84f      	bhi.n	80116b6 <ff_wtoupper+0xfa>
 8011616:	a201      	add	r2, pc, #4	; (adr r2, 801161c <ff_wtoupper+0x60>)
 8011618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801161c:	08011641 	.word	0x08011641
 8011620:	08011653 	.word	0x08011653
 8011624:	08011669 	.word	0x08011669
 8011628:	08011671 	.word	0x08011671
 801162c:	08011679 	.word	0x08011679
 8011630:	08011681 	.word	0x08011681
 8011634:	08011689 	.word	0x08011689
 8011638:	08011691 	.word	0x08011691
 801163c:	08011699 	.word	0x08011699
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011640:	88fa      	ldrh	r2, [r7, #6]
 8011642:	8a7b      	ldrh	r3, [r7, #18]
 8011644:	1ad3      	subs	r3, r2, r3
 8011646:	005b      	lsls	r3, r3, #1
 8011648:	697a      	ldr	r2, [r7, #20]
 801164a:	4413      	add	r3, r2
 801164c:	881b      	ldrh	r3, [r3, #0]
 801164e:	80fb      	strh	r3, [r7, #6]
 8011650:	e027      	b.n	80116a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011652:	88fa      	ldrh	r2, [r7, #6]
 8011654:	8a7b      	ldrh	r3, [r7, #18]
 8011656:	1ad3      	subs	r3, r2, r3
 8011658:	b29b      	uxth	r3, r3
 801165a:	f003 0301 	and.w	r3, r3, #1
 801165e:	b29b      	uxth	r3, r3
 8011660:	88fa      	ldrh	r2, [r7, #6]
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	80fb      	strh	r3, [r7, #6]
 8011666:	e01c      	b.n	80116a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011668:	88fb      	ldrh	r3, [r7, #6]
 801166a:	3b10      	subs	r3, #16
 801166c:	80fb      	strh	r3, [r7, #6]
 801166e:	e018      	b.n	80116a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011670:	88fb      	ldrh	r3, [r7, #6]
 8011672:	3b20      	subs	r3, #32
 8011674:	80fb      	strh	r3, [r7, #6]
 8011676:	e014      	b.n	80116a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011678:	88fb      	ldrh	r3, [r7, #6]
 801167a:	3b30      	subs	r3, #48	; 0x30
 801167c:	80fb      	strh	r3, [r7, #6]
 801167e:	e010      	b.n	80116a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011680:	88fb      	ldrh	r3, [r7, #6]
 8011682:	3b1a      	subs	r3, #26
 8011684:	80fb      	strh	r3, [r7, #6]
 8011686:	e00c      	b.n	80116a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011688:	88fb      	ldrh	r3, [r7, #6]
 801168a:	3308      	adds	r3, #8
 801168c:	80fb      	strh	r3, [r7, #6]
 801168e:	e008      	b.n	80116a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011690:	88fb      	ldrh	r3, [r7, #6]
 8011692:	3b50      	subs	r3, #80	; 0x50
 8011694:	80fb      	strh	r3, [r7, #6]
 8011696:	e004      	b.n	80116a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011698:	88fb      	ldrh	r3, [r7, #6]
 801169a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801169e:	80fb      	strh	r3, [r7, #6]
 80116a0:	bf00      	nop
			}
			break;
 80116a2:	e008      	b.n	80116b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80116a4:	89fb      	ldrh	r3, [r7, #14]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d195      	bne.n	80115d6 <ff_wtoupper+0x1a>
 80116aa:	8a3b      	ldrh	r3, [r7, #16]
 80116ac:	005b      	lsls	r3, r3, #1
 80116ae:	697a      	ldr	r2, [r7, #20]
 80116b0:	4413      	add	r3, r2
 80116b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80116b4:	e78f      	b.n	80115d6 <ff_wtoupper+0x1a>
			break;
 80116b6:	bf00      	nop
	}

	return chr;
 80116b8:	88fb      	ldrh	r3, [r7, #6]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	371c      	adds	r7, #28
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop
 80116c8:	08019c98 	.word	0x08019c98
 80116cc:	08019e8c 	.word	0x08019e8c

080116d0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	4603      	mov	r3, r0
 80116d8:	6039      	str	r1, [r7, #0]
 80116da:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80116dc:	2200      	movs	r2, #0
 80116de:	2101      	movs	r1, #1
 80116e0:	2001      	movs	r0, #1
 80116e2:	f000 f978 	bl	80119d6 <osSemaphoreNew>
 80116e6:	4602      	mov	r2, r0
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	bf14      	ite	ne
 80116f4:	2301      	movne	r3, #1
 80116f6:	2300      	moveq	r3, #0
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	60fb      	str	r3, [r7, #12]

    return ret;
 80116fc:	68fb      	ldr	r3, [r7, #12]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3710      	adds	r7, #16
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}

08011706 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011706:	b580      	push	{r7, lr}
 8011708:	b082      	sub	sp, #8
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 fa80 	bl	8011c14 <osSemaphoreDelete>
#endif
    return 1;
 8011714:	2301      	movs	r3, #1
}
 8011716:	4618      	mov	r0, r3
 8011718:	3708      	adds	r7, #8
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}

0801171e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801171e:	b580      	push	{r7, lr}
 8011720:	b084      	sub	sp, #16
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011726:	2300      	movs	r3, #0
 8011728:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801172a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 f9da 	bl	8011ae8 <osSemaphoreAcquire>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d101      	bne.n	801173e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801173a:	2301      	movs	r3, #1
 801173c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801173e:	68fb      	ldr	r3, [r7, #12]
}
 8011740:	4618      	mov	r0, r3
 8011742:	3710      	adds	r7, #16
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f000 fa1b 	bl	8011b8c <osSemaphoreRelease>
#endif
}
 8011756:	bf00      	nop
 8011758:	3708      	adds	r7, #8
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
	...

08011760 <__NVIC_SetPriority>:
{
 8011760:	b480      	push	{r7}
 8011762:	b083      	sub	sp, #12
 8011764:	af00      	add	r7, sp, #0
 8011766:	4603      	mov	r3, r0
 8011768:	6039      	str	r1, [r7, #0]
 801176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011770:	2b00      	cmp	r3, #0
 8011772:	db0a      	blt.n	801178a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	b2da      	uxtb	r2, r3
 8011778:	490c      	ldr	r1, [pc, #48]	; (80117ac <__NVIC_SetPriority+0x4c>)
 801177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801177e:	0112      	lsls	r2, r2, #4
 8011780:	b2d2      	uxtb	r2, r2
 8011782:	440b      	add	r3, r1
 8011784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011788:	e00a      	b.n	80117a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	b2da      	uxtb	r2, r3
 801178e:	4908      	ldr	r1, [pc, #32]	; (80117b0 <__NVIC_SetPriority+0x50>)
 8011790:	79fb      	ldrb	r3, [r7, #7]
 8011792:	f003 030f 	and.w	r3, r3, #15
 8011796:	3b04      	subs	r3, #4
 8011798:	0112      	lsls	r2, r2, #4
 801179a:	b2d2      	uxtb	r2, r2
 801179c:	440b      	add	r3, r1
 801179e:	761a      	strb	r2, [r3, #24]
}
 80117a0:	bf00      	nop
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr
 80117ac:	e000e100 	.word	0xe000e100
 80117b0:	e000ed00 	.word	0xe000ed00

080117b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80117b4:	b580      	push	{r7, lr}
 80117b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80117b8:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <SysTick_Handler+0x1c>)
 80117ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80117bc:	f002 fcae 	bl	801411c <xTaskGetSchedulerState>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b01      	cmp	r3, #1
 80117c4:	d001      	beq.n	80117ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80117c6:	f003 fcd7 	bl	8015178 <xPortSysTickHandler>
  }
}
 80117ca:	bf00      	nop
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	e000e010 	.word	0xe000e010

080117d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80117d4:	b580      	push	{r7, lr}
 80117d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80117d8:	2100      	movs	r1, #0
 80117da:	f06f 0004 	mvn.w	r0, #4
 80117de:	f7ff ffbf 	bl	8011760 <__NVIC_SetPriority>
#endif
}
 80117e2:	bf00      	nop
 80117e4:	bd80      	pop	{r7, pc}
	...

080117e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80117ee:	f3ef 8305 	mrs	r3, IPSR
 80117f2:	603b      	str	r3, [r7, #0]
  return(result);
 80117f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d003      	beq.n	8011802 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80117fa:	f06f 0305 	mvn.w	r3, #5
 80117fe:	607b      	str	r3, [r7, #4]
 8011800:	e00c      	b.n	801181c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011802:	4b0a      	ldr	r3, [pc, #40]	; (801182c <osKernelInitialize+0x44>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d105      	bne.n	8011816 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801180a:	4b08      	ldr	r3, [pc, #32]	; (801182c <osKernelInitialize+0x44>)
 801180c:	2201      	movs	r2, #1
 801180e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011810:	2300      	movs	r3, #0
 8011812:	607b      	str	r3, [r7, #4]
 8011814:	e002      	b.n	801181c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801181a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801181c:	687b      	ldr	r3, [r7, #4]
}
 801181e:	4618      	mov	r0, r3
 8011820:	370c      	adds	r7, #12
 8011822:	46bd      	mov	sp, r7
 8011824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011828:	4770      	bx	lr
 801182a:	bf00      	nop
 801182c:	200007c0 	.word	0x200007c0

08011830 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011836:	f3ef 8305 	mrs	r3, IPSR
 801183a:	603b      	str	r3, [r7, #0]
  return(result);
 801183c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801183e:	2b00      	cmp	r3, #0
 8011840:	d003      	beq.n	801184a <osKernelStart+0x1a>
    stat = osErrorISR;
 8011842:	f06f 0305 	mvn.w	r3, #5
 8011846:	607b      	str	r3, [r7, #4]
 8011848:	e010      	b.n	801186c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801184a:	4b0b      	ldr	r3, [pc, #44]	; (8011878 <osKernelStart+0x48>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d109      	bne.n	8011866 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011852:	f7ff ffbf 	bl	80117d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011856:	4b08      	ldr	r3, [pc, #32]	; (8011878 <osKernelStart+0x48>)
 8011858:	2202      	movs	r2, #2
 801185a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801185c:	f001 fe7c 	bl	8013558 <vTaskStartScheduler>
      stat = osOK;
 8011860:	2300      	movs	r3, #0
 8011862:	607b      	str	r3, [r7, #4]
 8011864:	e002      	b.n	801186c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801186a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801186c:	687b      	ldr	r3, [r7, #4]
}
 801186e:	4618      	mov	r0, r3
 8011870:	3708      	adds	r7, #8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	200007c0 	.word	0x200007c0

0801187c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801187c:	b580      	push	{r7, lr}
 801187e:	b08e      	sub	sp, #56	; 0x38
 8011880:	af04      	add	r7, sp, #16
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011888:	2300      	movs	r3, #0
 801188a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801188c:	f3ef 8305 	mrs	r3, IPSR
 8011890:	617b      	str	r3, [r7, #20]
  return(result);
 8011892:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011894:	2b00      	cmp	r3, #0
 8011896:	d17e      	bne.n	8011996 <osThreadNew+0x11a>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d07b      	beq.n	8011996 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801189e:	2380      	movs	r3, #128	; 0x80
 80118a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80118a2:	2318      	movs	r3, #24
 80118a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80118a6:	2300      	movs	r3, #0
 80118a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d045      	beq.n	8011942 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d002      	beq.n	80118c4 <osThreadNew+0x48>
        name = attr->name;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	699b      	ldr	r3, [r3, #24]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d002      	beq.n	80118d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	699b      	ldr	r3, [r3, #24]
 80118d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d008      	beq.n	80118ea <osThreadNew+0x6e>
 80118d8:	69fb      	ldr	r3, [r7, #28]
 80118da:	2b38      	cmp	r3, #56	; 0x38
 80118dc:	d805      	bhi.n	80118ea <osThreadNew+0x6e>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	f003 0301 	and.w	r3, r3, #1
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d001      	beq.n	80118ee <osThreadNew+0x72>
        return (NULL);
 80118ea:	2300      	movs	r3, #0
 80118ec:	e054      	b.n	8011998 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d003      	beq.n	80118fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	695b      	ldr	r3, [r3, #20]
 80118fa:	089b      	lsrs	r3, r3, #2
 80118fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	689b      	ldr	r3, [r3, #8]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d00e      	beq.n	8011924 <osThreadNew+0xa8>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	68db      	ldr	r3, [r3, #12]
 801190a:	2bbf      	cmp	r3, #191	; 0xbf
 801190c:	d90a      	bls.n	8011924 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011912:	2b00      	cmp	r3, #0
 8011914:	d006      	beq.n	8011924 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	695b      	ldr	r3, [r3, #20]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d002      	beq.n	8011924 <osThreadNew+0xa8>
        mem = 1;
 801191e:	2301      	movs	r3, #1
 8011920:	61bb      	str	r3, [r7, #24]
 8011922:	e010      	b.n	8011946 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d10c      	bne.n	8011946 <osThreadNew+0xca>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d108      	bne.n	8011946 <osThreadNew+0xca>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	691b      	ldr	r3, [r3, #16]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d104      	bne.n	8011946 <osThreadNew+0xca>
          mem = 0;
 801193c:	2300      	movs	r3, #0
 801193e:	61bb      	str	r3, [r7, #24]
 8011940:	e001      	b.n	8011946 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011942:	2300      	movs	r3, #0
 8011944:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	2b01      	cmp	r3, #1
 801194a:	d110      	bne.n	801196e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011950:	687a      	ldr	r2, [r7, #4]
 8011952:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011954:	9202      	str	r2, [sp, #8]
 8011956:	9301      	str	r3, [sp, #4]
 8011958:	69fb      	ldr	r3, [r7, #28]
 801195a:	9300      	str	r3, [sp, #0]
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	6a3a      	ldr	r2, [r7, #32]
 8011960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011962:	68f8      	ldr	r0, [r7, #12]
 8011964:	f001 fba2 	bl	80130ac <xTaskCreateStatic>
 8011968:	4603      	mov	r3, r0
 801196a:	613b      	str	r3, [r7, #16]
 801196c:	e013      	b.n	8011996 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d110      	bne.n	8011996 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	b29a      	uxth	r2, r3
 8011978:	f107 0310 	add.w	r3, r7, #16
 801197c:	9301      	str	r3, [sp, #4]
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	9300      	str	r3, [sp, #0]
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011986:	68f8      	ldr	r0, [r7, #12]
 8011988:	f001 fbed 	bl	8013166 <xTaskCreate>
 801198c:	4603      	mov	r3, r0
 801198e:	2b01      	cmp	r3, #1
 8011990:	d001      	beq.n	8011996 <osThreadNew+0x11a>
            hTask = NULL;
 8011992:	2300      	movs	r3, #0
 8011994:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011996:	693b      	ldr	r3, [r7, #16]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3728      	adds	r7, #40	; 0x28
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119a8:	f3ef 8305 	mrs	r3, IPSR
 80119ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80119ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d003      	beq.n	80119bc <osDelay+0x1c>
    stat = osErrorISR;
 80119b4:	f06f 0305 	mvn.w	r3, #5
 80119b8:	60fb      	str	r3, [r7, #12]
 80119ba:	e007      	b.n	80119cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80119bc:	2300      	movs	r3, #0
 80119be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d002      	beq.n	80119cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f001 fd2c 	bl	8013424 <vTaskDelay>
    }
  }

  return (stat);
 80119cc:	68fb      	ldr	r3, [r7, #12]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3710      	adds	r7, #16
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b08a      	sub	sp, #40	; 0x28
 80119da:	af02      	add	r7, sp, #8
 80119dc:	60f8      	str	r0, [r7, #12]
 80119de:	60b9      	str	r1, [r7, #8]
 80119e0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80119e2:	2300      	movs	r3, #0
 80119e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119e6:	f3ef 8305 	mrs	r3, IPSR
 80119ea:	613b      	str	r3, [r7, #16]
  return(result);
 80119ec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d175      	bne.n	8011ade <osSemaphoreNew+0x108>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d072      	beq.n	8011ade <osSemaphoreNew+0x108>
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d86e      	bhi.n	8011ade <osSemaphoreNew+0x108>
    mem = -1;
 8011a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d015      	beq.n	8011a38 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d006      	beq.n	8011a22 <osSemaphoreNew+0x4c>
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	2b4f      	cmp	r3, #79	; 0x4f
 8011a1a:	d902      	bls.n	8011a22 <osSemaphoreNew+0x4c>
        mem = 1;
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	61bb      	str	r3, [r7, #24]
 8011a20:	e00c      	b.n	8011a3c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	689b      	ldr	r3, [r3, #8]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d108      	bne.n	8011a3c <osSemaphoreNew+0x66>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	68db      	ldr	r3, [r3, #12]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d104      	bne.n	8011a3c <osSemaphoreNew+0x66>
          mem = 0;
 8011a32:	2300      	movs	r3, #0
 8011a34:	61bb      	str	r3, [r7, #24]
 8011a36:	e001      	b.n	8011a3c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011a3c:	69bb      	ldr	r3, [r7, #24]
 8011a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a42:	d04c      	beq.n	8011ade <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d128      	bne.n	8011a9c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d10a      	bne.n	8011a66 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	689b      	ldr	r3, [r3, #8]
 8011a54:	2203      	movs	r2, #3
 8011a56:	9200      	str	r2, [sp, #0]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	2001      	movs	r0, #1
 8011a5e:	f000 fb7f 	bl	8012160 <xQueueGenericCreateStatic>
 8011a62:	61f8      	str	r0, [r7, #28]
 8011a64:	e005      	b.n	8011a72 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011a66:	2203      	movs	r2, #3
 8011a68:	2100      	movs	r1, #0
 8011a6a:	2001      	movs	r0, #1
 8011a6c:	f000 fbf0 	bl	8012250 <xQueueGenericCreate>
 8011a70:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d022      	beq.n	8011abe <osSemaphoreNew+0xe8>
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d01f      	beq.n	8011abe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011a7e:	2300      	movs	r3, #0
 8011a80:	2200      	movs	r2, #0
 8011a82:	2100      	movs	r1, #0
 8011a84:	69f8      	ldr	r0, [r7, #28]
 8011a86:	f000 fcab 	bl	80123e0 <xQueueGenericSend>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d016      	beq.n	8011abe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011a90:	69f8      	ldr	r0, [r7, #28]
 8011a92:	f001 f937 	bl	8012d04 <vQueueDelete>
            hSemaphore = NULL;
 8011a96:	2300      	movs	r3, #0
 8011a98:	61fb      	str	r3, [r7, #28]
 8011a9a:	e010      	b.n	8011abe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8011a9c:	69bb      	ldr	r3, [r7, #24]
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	d108      	bne.n	8011ab4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	689b      	ldr	r3, [r3, #8]
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	68b9      	ldr	r1, [r7, #8]
 8011aaa:	68f8      	ldr	r0, [r7, #12]
 8011aac:	f000 fc2d 	bl	801230a <xQueueCreateCountingSemaphoreStatic>
 8011ab0:	61f8      	str	r0, [r7, #28]
 8011ab2:	e004      	b.n	8011abe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011ab4:	68b9      	ldr	r1, [r7, #8]
 8011ab6:	68f8      	ldr	r0, [r7, #12]
 8011ab8:	f000 fc5e 	bl	8012378 <xQueueCreateCountingSemaphore>
 8011abc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d00c      	beq.n	8011ade <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d003      	beq.n	8011ad2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	617b      	str	r3, [r7, #20]
 8011ad0:	e001      	b.n	8011ad6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011ad6:	6979      	ldr	r1, [r7, #20]
 8011ad8:	69f8      	ldr	r0, [r7, #28]
 8011ada:	f001 fa5f 	bl	8012f9c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011ade:	69fb      	ldr	r3, [r7, #28]
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3720      	adds	r7, #32
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b086      	sub	sp, #24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011af6:	2300      	movs	r3, #0
 8011af8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d103      	bne.n	8011b08 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011b00:	f06f 0303 	mvn.w	r3, #3
 8011b04:	617b      	str	r3, [r7, #20]
 8011b06:	e039      	b.n	8011b7c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b08:	f3ef 8305 	mrs	r3, IPSR
 8011b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011b0e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d022      	beq.n	8011b5a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d003      	beq.n	8011b22 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8011b1a:	f06f 0303 	mvn.w	r3, #3
 8011b1e:	617b      	str	r3, [r7, #20]
 8011b20:	e02c      	b.n	8011b7c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8011b22:	2300      	movs	r3, #0
 8011b24:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011b26:	f107 0308 	add.w	r3, r7, #8
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	2100      	movs	r1, #0
 8011b2e:	6938      	ldr	r0, [r7, #16]
 8011b30:	f001 f868 	bl	8012c04 <xQueueReceiveFromISR>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d003      	beq.n	8011b42 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8011b3a:	f06f 0302 	mvn.w	r3, #2
 8011b3e:	617b      	str	r3, [r7, #20]
 8011b40:	e01c      	b.n	8011b7c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d019      	beq.n	8011b7c <osSemaphoreAcquire+0x94>
 8011b48:	4b0f      	ldr	r3, [pc, #60]	; (8011b88 <osSemaphoreAcquire+0xa0>)
 8011b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b4e:	601a      	str	r2, [r3, #0]
 8011b50:	f3bf 8f4f 	dsb	sy
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	e010      	b.n	8011b7c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011b5a:	6839      	ldr	r1, [r7, #0]
 8011b5c:	6938      	ldr	r0, [r7, #16]
 8011b5e:	f000 ff45 	bl	80129ec <xQueueSemaphoreTake>
 8011b62:	4603      	mov	r3, r0
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d009      	beq.n	8011b7c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d003      	beq.n	8011b76 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8011b6e:	f06f 0301 	mvn.w	r3, #1
 8011b72:	617b      	str	r3, [r7, #20]
 8011b74:	e002      	b.n	8011b7c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8011b76:	f06f 0302 	mvn.w	r3, #2
 8011b7a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011b7c:	697b      	ldr	r3, [r7, #20]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3718      	adds	r7, #24
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	e000ed04 	.word	0xe000ed04

08011b8c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b086      	sub	sp, #24
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d103      	bne.n	8011baa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011ba2:	f06f 0303 	mvn.w	r3, #3
 8011ba6:	617b      	str	r3, [r7, #20]
 8011ba8:	e02c      	b.n	8011c04 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011baa:	f3ef 8305 	mrs	r3, IPSR
 8011bae:	60fb      	str	r3, [r7, #12]
  return(result);
 8011bb0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d01a      	beq.n	8011bec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011bba:	f107 0308 	add.w	r3, r7, #8
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	6938      	ldr	r0, [r7, #16]
 8011bc2:	f000 fda6 	bl	8012712 <xQueueGiveFromISR>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d003      	beq.n	8011bd4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011bcc:	f06f 0302 	mvn.w	r3, #2
 8011bd0:	617b      	str	r3, [r7, #20]
 8011bd2:	e017      	b.n	8011c04 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d014      	beq.n	8011c04 <osSemaphoreRelease+0x78>
 8011bda:	4b0d      	ldr	r3, [pc, #52]	; (8011c10 <osSemaphoreRelease+0x84>)
 8011bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011be0:	601a      	str	r2, [r3, #0]
 8011be2:	f3bf 8f4f 	dsb	sy
 8011be6:	f3bf 8f6f 	isb	sy
 8011bea:	e00b      	b.n	8011c04 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011bec:	2300      	movs	r3, #0
 8011bee:	2200      	movs	r2, #0
 8011bf0:	2100      	movs	r1, #0
 8011bf2:	6938      	ldr	r0, [r7, #16]
 8011bf4:	f000 fbf4 	bl	80123e0 <xQueueGenericSend>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b01      	cmp	r3, #1
 8011bfc:	d002      	beq.n	8011c04 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011bfe:	f06f 0302 	mvn.w	r3, #2
 8011c02:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011c04:	697b      	ldr	r3, [r7, #20]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3718      	adds	r7, #24
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	e000ed04 	.word	0xe000ed04

08011c14 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b086      	sub	sp, #24
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c20:	f3ef 8305 	mrs	r3, IPSR
 8011c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8011c26:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d003      	beq.n	8011c34 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8011c2c:	f06f 0305 	mvn.w	r3, #5
 8011c30:	617b      	str	r3, [r7, #20]
 8011c32:	e00e      	b.n	8011c52 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d103      	bne.n	8011c42 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8011c3a:	f06f 0303 	mvn.w	r3, #3
 8011c3e:	617b      	str	r3, [r7, #20]
 8011c40:	e007      	b.n	8011c52 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011c42:	6938      	ldr	r0, [r7, #16]
 8011c44:	f001 f9d4 	bl	8012ff0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8011c4c:	6938      	ldr	r0, [r7, #16]
 8011c4e:	f001 f859 	bl	8012d04 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8011c52:	697b      	ldr	r3, [r7, #20]
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	3718      	adds	r7, #24
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}

08011c5c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b08a      	sub	sp, #40	; 0x28
 8011c60:	af02      	add	r7, sp, #8
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c6c:	f3ef 8305 	mrs	r3, IPSR
 8011c70:	613b      	str	r3, [r7, #16]
  return(result);
 8011c72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d15f      	bne.n	8011d38 <osMessageQueueNew+0xdc>
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d05c      	beq.n	8011d38 <osMessageQueueNew+0xdc>
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d059      	beq.n	8011d38 <osMessageQueueNew+0xdc>
    mem = -1;
 8011c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d029      	beq.n	8011ce4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	689b      	ldr	r3, [r3, #8]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d012      	beq.n	8011cbe <osMessageQueueNew+0x62>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	2b4f      	cmp	r3, #79	; 0x4f
 8011c9e:	d90e      	bls.n	8011cbe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d00a      	beq.n	8011cbe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	695a      	ldr	r2, [r3, #20]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	68b9      	ldr	r1, [r7, #8]
 8011cb0:	fb01 f303 	mul.w	r3, r1, r3
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d302      	bcc.n	8011cbe <osMessageQueueNew+0x62>
        mem = 1;
 8011cb8:	2301      	movs	r3, #1
 8011cba:	61bb      	str	r3, [r7, #24]
 8011cbc:	e014      	b.n	8011ce8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	689b      	ldr	r3, [r3, #8]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d110      	bne.n	8011ce8 <osMessageQueueNew+0x8c>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d10c      	bne.n	8011ce8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d108      	bne.n	8011ce8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	695b      	ldr	r3, [r3, #20]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d104      	bne.n	8011ce8 <osMessageQueueNew+0x8c>
          mem = 0;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	61bb      	str	r3, [r7, #24]
 8011ce2:	e001      	b.n	8011ce8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011ce8:	69bb      	ldr	r3, [r7, #24]
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d10b      	bne.n	8011d06 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	691a      	ldr	r2, [r3, #16]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	689b      	ldr	r3, [r3, #8]
 8011cf6:	2100      	movs	r1, #0
 8011cf8:	9100      	str	r1, [sp, #0]
 8011cfa:	68b9      	ldr	r1, [r7, #8]
 8011cfc:	68f8      	ldr	r0, [r7, #12]
 8011cfe:	f000 fa2f 	bl	8012160 <xQueueGenericCreateStatic>
 8011d02:	61f8      	str	r0, [r7, #28]
 8011d04:	e008      	b.n	8011d18 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011d06:	69bb      	ldr	r3, [r7, #24]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d105      	bne.n	8011d18 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	68b9      	ldr	r1, [r7, #8]
 8011d10:	68f8      	ldr	r0, [r7, #12]
 8011d12:	f000 fa9d 	bl	8012250 <xQueueGenericCreate>
 8011d16:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011d18:	69fb      	ldr	r3, [r7, #28]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d00c      	beq.n	8011d38 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d003      	beq.n	8011d2c <osMessageQueueNew+0xd0>
        name = attr->name;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	617b      	str	r3, [r7, #20]
 8011d2a:	e001      	b.n	8011d30 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011d30:	6979      	ldr	r1, [r7, #20]
 8011d32:	69f8      	ldr	r0, [r7, #28]
 8011d34:	f001 f932 	bl	8012f9c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011d38:	69fb      	ldr	r3, [r7, #28]
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3720      	adds	r7, #32
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
	...

08011d44 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b088      	sub	sp, #32
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	603b      	str	r3, [r7, #0]
 8011d50:	4613      	mov	r3, r2
 8011d52:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d5c:	f3ef 8305 	mrs	r3, IPSR
 8011d60:	617b      	str	r3, [r7, #20]
  return(result);
 8011d62:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d028      	beq.n	8011dba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d005      	beq.n	8011d7a <osMessageQueuePut+0x36>
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d002      	beq.n	8011d7a <osMessageQueuePut+0x36>
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d003      	beq.n	8011d82 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011d7a:	f06f 0303 	mvn.w	r3, #3
 8011d7e:	61fb      	str	r3, [r7, #28]
 8011d80:	e038      	b.n	8011df4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011d82:	2300      	movs	r3, #0
 8011d84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011d86:	f107 0210 	add.w	r2, r7, #16
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	68b9      	ldr	r1, [r7, #8]
 8011d8e:	69b8      	ldr	r0, [r7, #24]
 8011d90:	f000 fc24 	bl	80125dc <xQueueGenericSendFromISR>
 8011d94:	4603      	mov	r3, r0
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d003      	beq.n	8011da2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011d9a:	f06f 0302 	mvn.w	r3, #2
 8011d9e:	61fb      	str	r3, [r7, #28]
 8011da0:	e028      	b.n	8011df4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011da2:	693b      	ldr	r3, [r7, #16]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d025      	beq.n	8011df4 <osMessageQueuePut+0xb0>
 8011da8:	4b15      	ldr	r3, [pc, #84]	; (8011e00 <osMessageQueuePut+0xbc>)
 8011daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dae:	601a      	str	r2, [r3, #0]
 8011db0:	f3bf 8f4f 	dsb	sy
 8011db4:	f3bf 8f6f 	isb	sy
 8011db8:	e01c      	b.n	8011df4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011dba:	69bb      	ldr	r3, [r7, #24]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d002      	beq.n	8011dc6 <osMessageQueuePut+0x82>
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d103      	bne.n	8011dce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011dc6:	f06f 0303 	mvn.w	r3, #3
 8011dca:	61fb      	str	r3, [r7, #28]
 8011dcc:	e012      	b.n	8011df4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011dce:	2300      	movs	r3, #0
 8011dd0:	683a      	ldr	r2, [r7, #0]
 8011dd2:	68b9      	ldr	r1, [r7, #8]
 8011dd4:	69b8      	ldr	r0, [r7, #24]
 8011dd6:	f000 fb03 	bl	80123e0 <xQueueGenericSend>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d009      	beq.n	8011df4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d003      	beq.n	8011dee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011de6:	f06f 0301 	mvn.w	r3, #1
 8011dea:	61fb      	str	r3, [r7, #28]
 8011dec:	e002      	b.n	8011df4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011dee:	f06f 0302 	mvn.w	r3, #2
 8011df2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011df4:	69fb      	ldr	r3, [r7, #28]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3720      	adds	r7, #32
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	e000ed04 	.word	0xe000ed04

08011e04 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b088      	sub	sp, #32
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	607a      	str	r2, [r7, #4]
 8011e10:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011e16:	2300      	movs	r3, #0
 8011e18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e1a:	f3ef 8305 	mrs	r3, IPSR
 8011e1e:	617b      	str	r3, [r7, #20]
  return(result);
 8011e20:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d028      	beq.n	8011e78 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d005      	beq.n	8011e38 <osMessageQueueGet+0x34>
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d002      	beq.n	8011e38 <osMessageQueueGet+0x34>
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d003      	beq.n	8011e40 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011e38:	f06f 0303 	mvn.w	r3, #3
 8011e3c:	61fb      	str	r3, [r7, #28]
 8011e3e:	e037      	b.n	8011eb0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011e40:	2300      	movs	r3, #0
 8011e42:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011e44:	f107 0310 	add.w	r3, r7, #16
 8011e48:	461a      	mov	r2, r3
 8011e4a:	68b9      	ldr	r1, [r7, #8]
 8011e4c:	69b8      	ldr	r0, [r7, #24]
 8011e4e:	f000 fed9 	bl	8012c04 <xQueueReceiveFromISR>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d003      	beq.n	8011e60 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011e58:	f06f 0302 	mvn.w	r3, #2
 8011e5c:	61fb      	str	r3, [r7, #28]
 8011e5e:	e027      	b.n	8011eb0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d024      	beq.n	8011eb0 <osMessageQueueGet+0xac>
 8011e66:	4b15      	ldr	r3, [pc, #84]	; (8011ebc <osMessageQueueGet+0xb8>)
 8011e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e6c:	601a      	str	r2, [r3, #0]
 8011e6e:	f3bf 8f4f 	dsb	sy
 8011e72:	f3bf 8f6f 	isb	sy
 8011e76:	e01b      	b.n	8011eb0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d002      	beq.n	8011e84 <osMessageQueueGet+0x80>
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d103      	bne.n	8011e8c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011e84:	f06f 0303 	mvn.w	r3, #3
 8011e88:	61fb      	str	r3, [r7, #28]
 8011e8a:	e011      	b.n	8011eb0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011e8c:	683a      	ldr	r2, [r7, #0]
 8011e8e:	68b9      	ldr	r1, [r7, #8]
 8011e90:	69b8      	ldr	r0, [r7, #24]
 8011e92:	f000 fccb 	bl	801282c <xQueueReceive>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	d009      	beq.n	8011eb0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d003      	beq.n	8011eaa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011ea2:	f06f 0301 	mvn.w	r3, #1
 8011ea6:	61fb      	str	r3, [r7, #28]
 8011ea8:	e002      	b.n	8011eb0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011eaa:	f06f 0302 	mvn.w	r3, #2
 8011eae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011eb0:	69fb      	ldr	r3, [r7, #28]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3720      	adds	r7, #32
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	e000ed04 	.word	0xe000ed04

08011ec0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011ec0:	b480      	push	{r7}
 8011ec2:	b085      	sub	sp, #20
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	4a07      	ldr	r2, [pc, #28]	; (8011eec <vApplicationGetIdleTaskMemory+0x2c>)
 8011ed0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	4a06      	ldr	r2, [pc, #24]	; (8011ef0 <vApplicationGetIdleTaskMemory+0x30>)
 8011ed6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2280      	movs	r2, #128	; 0x80
 8011edc:	601a      	str	r2, [r3, #0]
}
 8011ede:	bf00      	nop
 8011ee0:	3714      	adds	r7, #20
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr
 8011eea:	bf00      	nop
 8011eec:	200007c4 	.word	0x200007c4
 8011ef0:	20000884 	.word	0x20000884

08011ef4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011ef4:	b480      	push	{r7}
 8011ef6:	b085      	sub	sp, #20
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	60f8      	str	r0, [r7, #12]
 8011efc:	60b9      	str	r1, [r7, #8]
 8011efe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	4a07      	ldr	r2, [pc, #28]	; (8011f20 <vApplicationGetTimerTaskMemory+0x2c>)
 8011f04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	4a06      	ldr	r2, [pc, #24]	; (8011f24 <vApplicationGetTimerTaskMemory+0x30>)
 8011f0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011f12:	601a      	str	r2, [r3, #0]
}
 8011f14:	bf00      	nop
 8011f16:	3714      	adds	r7, #20
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr
 8011f20:	20000a84 	.word	0x20000a84
 8011f24:	20000b44 	.word	0x20000b44

08011f28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b083      	sub	sp, #12
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f103 0208 	add.w	r2, r3, #8
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f103 0208 	add.w	r2, r3, #8
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f103 0208 	add.w	r2, r3, #8
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011f5c:	bf00      	nop
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr

08011f68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2200      	movs	r2, #0
 8011f74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011f76:	bf00      	nop
 8011f78:	370c      	adds	r7, #12
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr

08011f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011f82:	b480      	push	{r7}
 8011f84:	b085      	sub	sp, #20
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	6078      	str	r0, [r7, #4]
 8011f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	68fa      	ldr	r2, [r7, #12]
 8011f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	689a      	ldr	r2, [r3, #8]
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	689b      	ldr	r3, [r3, #8]
 8011fa4:	683a      	ldr	r2, [r7, #0]
 8011fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	683a      	ldr	r2, [r7, #0]
 8011fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	1c5a      	adds	r2, r3, #1
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	601a      	str	r2, [r3, #0]
}
 8011fbe:	bf00      	nop
 8011fc0:	3714      	adds	r7, #20
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr

08011fca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fca:	b480      	push	{r7}
 8011fcc:	b085      	sub	sp, #20
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
 8011fd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fe0:	d103      	bne.n	8011fea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	691b      	ldr	r3, [r3, #16]
 8011fe6:	60fb      	str	r3, [r7, #12]
 8011fe8:	e00c      	b.n	8012004 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	3308      	adds	r3, #8
 8011fee:	60fb      	str	r3, [r7, #12]
 8011ff0:	e002      	b.n	8011ff8 <vListInsert+0x2e>
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	685b      	ldr	r3, [r3, #4]
 8011ff6:	60fb      	str	r3, [r7, #12]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	68ba      	ldr	r2, [r7, #8]
 8012000:	429a      	cmp	r2, r3
 8012002:	d2f6      	bcs.n	8011ff2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	685a      	ldr	r2, [r3, #4]
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	683a      	ldr	r2, [r7, #0]
 8012012:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	68fa      	ldr	r2, [r7, #12]
 8012018:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	683a      	ldr	r2, [r7, #0]
 801201e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	1c5a      	adds	r2, r3, #1
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	601a      	str	r2, [r3, #0]
}
 8012030:	bf00      	nop
 8012032:	3714      	adds	r7, #20
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr

0801203c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801203c:	b480      	push	{r7}
 801203e:	b085      	sub	sp, #20
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	691b      	ldr	r3, [r3, #16]
 8012048:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	6892      	ldr	r2, [r2, #8]
 8012052:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	689b      	ldr	r3, [r3, #8]
 8012058:	687a      	ldr	r2, [r7, #4]
 801205a:	6852      	ldr	r2, [r2, #4]
 801205c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	429a      	cmp	r2, r3
 8012066:	d103      	bne.n	8012070 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	689a      	ldr	r2, [r3, #8]
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	1e5a      	subs	r2, r3, #1
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	681b      	ldr	r3, [r3, #0]
}
 8012084:	4618      	mov	r0, r3
 8012086:	3714      	adds	r7, #20
 8012088:	46bd      	mov	sp, r7
 801208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208e:	4770      	bx	lr

08012090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d10a      	bne.n	80120ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80120a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a8:	f383 8811 	msr	BASEPRI, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f3bf 8f4f 	dsb	sy
 80120b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80120b6:	bf00      	nop
 80120b8:	e7fe      	b.n	80120b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80120ba:	f002 ffcb 	bl	8015054 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120c6:	68f9      	ldr	r1, [r7, #12]
 80120c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80120ca:	fb01 f303 	mul.w	r3, r1, r3
 80120ce:	441a      	add	r2, r3
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2200      	movs	r2, #0
 80120d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120ea:	3b01      	subs	r3, #1
 80120ec:	68f9      	ldr	r1, [r7, #12]
 80120ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80120f0:	fb01 f303 	mul.w	r3, r1, r3
 80120f4:	441a      	add	r2, r3
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	22ff      	movs	r2, #255	; 0xff
 80120fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	22ff      	movs	r2, #255	; 0xff
 8012106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d114      	bne.n	801213a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	691b      	ldr	r3, [r3, #16]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d01a      	beq.n	801214e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	3310      	adds	r3, #16
 801211c:	4618      	mov	r0, r3
 801211e:	f001 fd67 	bl	8013bf0 <xTaskRemoveFromEventList>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d012      	beq.n	801214e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012128:	4b0c      	ldr	r3, [pc, #48]	; (801215c <xQueueGenericReset+0xcc>)
 801212a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801212e:	601a      	str	r2, [r3, #0]
 8012130:	f3bf 8f4f 	dsb	sy
 8012134:	f3bf 8f6f 	isb	sy
 8012138:	e009      	b.n	801214e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	3310      	adds	r3, #16
 801213e:	4618      	mov	r0, r3
 8012140:	f7ff fef2 	bl	8011f28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	3324      	adds	r3, #36	; 0x24
 8012148:	4618      	mov	r0, r3
 801214a:	f7ff feed 	bl	8011f28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801214e:	f002 ffb1 	bl	80150b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012152:	2301      	movs	r3, #1
}
 8012154:	4618      	mov	r0, r3
 8012156:	3710      	adds	r7, #16
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	e000ed04 	.word	0xe000ed04

08012160 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012160:	b580      	push	{r7, lr}
 8012162:	b08e      	sub	sp, #56	; 0x38
 8012164:	af02      	add	r7, sp, #8
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
 801216c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d10a      	bne.n	801218a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012178:	f383 8811 	msr	BASEPRI, r3
 801217c:	f3bf 8f6f 	isb	sy
 8012180:	f3bf 8f4f 	dsb	sy
 8012184:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012186:	bf00      	nop
 8012188:	e7fe      	b.n	8012188 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d10a      	bne.n	80121a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012194:	f383 8811 	msr	BASEPRI, r3
 8012198:	f3bf 8f6f 	isb	sy
 801219c:	f3bf 8f4f 	dsb	sy
 80121a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121a2:	bf00      	nop
 80121a4:	e7fe      	b.n	80121a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d002      	beq.n	80121b2 <xQueueGenericCreateStatic+0x52>
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d001      	beq.n	80121b6 <xQueueGenericCreateStatic+0x56>
 80121b2:	2301      	movs	r3, #1
 80121b4:	e000      	b.n	80121b8 <xQueueGenericCreateStatic+0x58>
 80121b6:	2300      	movs	r3, #0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d10a      	bne.n	80121d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80121bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c0:	f383 8811 	msr	BASEPRI, r3
 80121c4:	f3bf 8f6f 	isb	sy
 80121c8:	f3bf 8f4f 	dsb	sy
 80121cc:	623b      	str	r3, [r7, #32]
}
 80121ce:	bf00      	nop
 80121d0:	e7fe      	b.n	80121d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d102      	bne.n	80121de <xQueueGenericCreateStatic+0x7e>
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d101      	bne.n	80121e2 <xQueueGenericCreateStatic+0x82>
 80121de:	2301      	movs	r3, #1
 80121e0:	e000      	b.n	80121e4 <xQueueGenericCreateStatic+0x84>
 80121e2:	2300      	movs	r3, #0
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d10a      	bne.n	80121fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80121e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ec:	f383 8811 	msr	BASEPRI, r3
 80121f0:	f3bf 8f6f 	isb	sy
 80121f4:	f3bf 8f4f 	dsb	sy
 80121f8:	61fb      	str	r3, [r7, #28]
}
 80121fa:	bf00      	nop
 80121fc:	e7fe      	b.n	80121fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80121fe:	2350      	movs	r3, #80	; 0x50
 8012200:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	2b50      	cmp	r3, #80	; 0x50
 8012206:	d00a      	beq.n	801221e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220c:	f383 8811 	msr	BASEPRI, r3
 8012210:	f3bf 8f6f 	isb	sy
 8012214:	f3bf 8f4f 	dsb	sy
 8012218:	61bb      	str	r3, [r7, #24]
}
 801221a:	bf00      	nop
 801221c:	e7fe      	b.n	801221c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801221e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00d      	beq.n	8012246 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222c:	2201      	movs	r2, #1
 801222e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012232:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012238:	9300      	str	r3, [sp, #0]
 801223a:	4613      	mov	r3, r2
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	68b9      	ldr	r1, [r7, #8]
 8012240:	68f8      	ldr	r0, [r7, #12]
 8012242:	f000 f83f 	bl	80122c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012248:	4618      	mov	r0, r3
 801224a:	3730      	adds	r7, #48	; 0x30
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012250:	b580      	push	{r7, lr}
 8012252:	b08a      	sub	sp, #40	; 0x28
 8012254:	af02      	add	r7, sp, #8
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	60b9      	str	r1, [r7, #8]
 801225a:	4613      	mov	r3, r2
 801225c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d10a      	bne.n	801227a <xQueueGenericCreate+0x2a>
	__asm volatile
 8012264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012268:	f383 8811 	msr	BASEPRI, r3
 801226c:	f3bf 8f6f 	isb	sy
 8012270:	f3bf 8f4f 	dsb	sy
 8012274:	613b      	str	r3, [r7, #16]
}
 8012276:	bf00      	nop
 8012278:	e7fe      	b.n	8012278 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	68ba      	ldr	r2, [r7, #8]
 801227e:	fb02 f303 	mul.w	r3, r2, r3
 8012282:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	3350      	adds	r3, #80	; 0x50
 8012288:	4618      	mov	r0, r3
 801228a:	f003 f805 	bl	8015298 <pvPortMalloc>
 801228e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012290:	69bb      	ldr	r3, [r7, #24]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d011      	beq.n	80122ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012296:	69bb      	ldr	r3, [r7, #24]
 8012298:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	3350      	adds	r3, #80	; 0x50
 801229e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	2200      	movs	r2, #0
 80122a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80122a8:	79fa      	ldrb	r2, [r7, #7]
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	4613      	mov	r3, r2
 80122b0:	697a      	ldr	r2, [r7, #20]
 80122b2:	68b9      	ldr	r1, [r7, #8]
 80122b4:	68f8      	ldr	r0, [r7, #12]
 80122b6:	f000 f805 	bl	80122c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80122ba:	69bb      	ldr	r3, [r7, #24]
	}
 80122bc:	4618      	mov	r0, r3
 80122be:	3720      	adds	r7, #32
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	60f8      	str	r0, [r7, #12]
 80122cc:	60b9      	str	r1, [r7, #8]
 80122ce:	607a      	str	r2, [r7, #4]
 80122d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d103      	bne.n	80122e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80122d8:	69bb      	ldr	r3, [r7, #24]
 80122da:	69ba      	ldr	r2, [r7, #24]
 80122dc:	601a      	str	r2, [r3, #0]
 80122de:	e002      	b.n	80122e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80122e0:	69bb      	ldr	r3, [r7, #24]
 80122e2:	687a      	ldr	r2, [r7, #4]
 80122e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80122ec:	69bb      	ldr	r3, [r7, #24]
 80122ee:	68ba      	ldr	r2, [r7, #8]
 80122f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80122f2:	2101      	movs	r1, #1
 80122f4:	69b8      	ldr	r0, [r7, #24]
 80122f6:	f7ff fecb 	bl	8012090 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	78fa      	ldrb	r2, [r7, #3]
 80122fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012302:	bf00      	nop
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801230a:	b580      	push	{r7, lr}
 801230c:	b08a      	sub	sp, #40	; 0x28
 801230e:	af02      	add	r7, sp, #8
 8012310:	60f8      	str	r0, [r7, #12]
 8012312:	60b9      	str	r1, [r7, #8]
 8012314:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10a      	bne.n	8012332 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012320:	f383 8811 	msr	BASEPRI, r3
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	f3bf 8f4f 	dsb	sy
 801232c:	61bb      	str	r3, [r7, #24]
}
 801232e:	bf00      	nop
 8012330:	e7fe      	b.n	8012330 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012332:	68ba      	ldr	r2, [r7, #8]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	429a      	cmp	r2, r3
 8012338:	d90a      	bls.n	8012350 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233e:	f383 8811 	msr	BASEPRI, r3
 8012342:	f3bf 8f6f 	isb	sy
 8012346:	f3bf 8f4f 	dsb	sy
 801234a:	617b      	str	r3, [r7, #20]
}
 801234c:	bf00      	nop
 801234e:	e7fe      	b.n	801234e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012350:	2302      	movs	r3, #2
 8012352:	9300      	str	r3, [sp, #0]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2200      	movs	r2, #0
 8012358:	2100      	movs	r1, #0
 801235a:	68f8      	ldr	r0, [r7, #12]
 801235c:	f7ff ff00 	bl	8012160 <xQueueGenericCreateStatic>
 8012360:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012362:	69fb      	ldr	r3, [r7, #28]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d002      	beq.n	801236e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801236e:	69fb      	ldr	r3, [r7, #28]
	}
 8012370:	4618      	mov	r0, r3
 8012372:	3720      	adds	r7, #32
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}

08012378 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012378:	b580      	push	{r7, lr}
 801237a:	b086      	sub	sp, #24
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d10a      	bne.n	801239e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8012388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801238c:	f383 8811 	msr	BASEPRI, r3
 8012390:	f3bf 8f6f 	isb	sy
 8012394:	f3bf 8f4f 	dsb	sy
 8012398:	613b      	str	r3, [r7, #16]
}
 801239a:	bf00      	nop
 801239c:	e7fe      	b.n	801239c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801239e:	683a      	ldr	r2, [r7, #0]
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d90a      	bls.n	80123bc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80123a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123aa:	f383 8811 	msr	BASEPRI, r3
 80123ae:	f3bf 8f6f 	isb	sy
 80123b2:	f3bf 8f4f 	dsb	sy
 80123b6:	60fb      	str	r3, [r7, #12]
}
 80123b8:	bf00      	nop
 80123ba:	e7fe      	b.n	80123ba <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80123bc:	2202      	movs	r2, #2
 80123be:	2100      	movs	r1, #0
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f7ff ff45 	bl	8012250 <xQueueGenericCreate>
 80123c6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d002      	beq.n	80123d4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	683a      	ldr	r2, [r7, #0]
 80123d2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80123d4:	697b      	ldr	r3, [r7, #20]
	}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3718      	adds	r7, #24
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
	...

080123e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b08e      	sub	sp, #56	; 0x38
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	60f8      	str	r0, [r7, #12]
 80123e8:	60b9      	str	r1, [r7, #8]
 80123ea:	607a      	str	r2, [r7, #4]
 80123ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80123ee:	2300      	movs	r3, #0
 80123f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80123f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d10a      	bne.n	8012412 <xQueueGenericSend+0x32>
	__asm volatile
 80123fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012400:	f383 8811 	msr	BASEPRI, r3
 8012404:	f3bf 8f6f 	isb	sy
 8012408:	f3bf 8f4f 	dsb	sy
 801240c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801240e:	bf00      	nop
 8012410:	e7fe      	b.n	8012410 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d103      	bne.n	8012420 <xQueueGenericSend+0x40>
 8012418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801241c:	2b00      	cmp	r3, #0
 801241e:	d101      	bne.n	8012424 <xQueueGenericSend+0x44>
 8012420:	2301      	movs	r3, #1
 8012422:	e000      	b.n	8012426 <xQueueGenericSend+0x46>
 8012424:	2300      	movs	r3, #0
 8012426:	2b00      	cmp	r3, #0
 8012428:	d10a      	bne.n	8012440 <xQueueGenericSend+0x60>
	__asm volatile
 801242a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242e:	f383 8811 	msr	BASEPRI, r3
 8012432:	f3bf 8f6f 	isb	sy
 8012436:	f3bf 8f4f 	dsb	sy
 801243a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801243c:	bf00      	nop
 801243e:	e7fe      	b.n	801243e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	2b02      	cmp	r3, #2
 8012444:	d103      	bne.n	801244e <xQueueGenericSend+0x6e>
 8012446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801244a:	2b01      	cmp	r3, #1
 801244c:	d101      	bne.n	8012452 <xQueueGenericSend+0x72>
 801244e:	2301      	movs	r3, #1
 8012450:	e000      	b.n	8012454 <xQueueGenericSend+0x74>
 8012452:	2300      	movs	r3, #0
 8012454:	2b00      	cmp	r3, #0
 8012456:	d10a      	bne.n	801246e <xQueueGenericSend+0x8e>
	__asm volatile
 8012458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245c:	f383 8811 	msr	BASEPRI, r3
 8012460:	f3bf 8f6f 	isb	sy
 8012464:	f3bf 8f4f 	dsb	sy
 8012468:	623b      	str	r3, [r7, #32]
}
 801246a:	bf00      	nop
 801246c:	e7fe      	b.n	801246c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801246e:	f001 fe55 	bl	801411c <xTaskGetSchedulerState>
 8012472:	4603      	mov	r3, r0
 8012474:	2b00      	cmp	r3, #0
 8012476:	d102      	bne.n	801247e <xQueueGenericSend+0x9e>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d101      	bne.n	8012482 <xQueueGenericSend+0xa2>
 801247e:	2301      	movs	r3, #1
 8012480:	e000      	b.n	8012484 <xQueueGenericSend+0xa4>
 8012482:	2300      	movs	r3, #0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d10a      	bne.n	801249e <xQueueGenericSend+0xbe>
	__asm volatile
 8012488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248c:	f383 8811 	msr	BASEPRI, r3
 8012490:	f3bf 8f6f 	isb	sy
 8012494:	f3bf 8f4f 	dsb	sy
 8012498:	61fb      	str	r3, [r7, #28]
}
 801249a:	bf00      	nop
 801249c:	e7fe      	b.n	801249c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801249e:	f002 fdd9 	bl	8015054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d302      	bcc.n	80124b4 <xQueueGenericSend+0xd4>
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	2b02      	cmp	r3, #2
 80124b2:	d129      	bne.n	8012508 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80124b4:	683a      	ldr	r2, [r7, #0]
 80124b6:	68b9      	ldr	r1, [r7, #8]
 80124b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124ba:	f000 fc5e 	bl	8012d7a <prvCopyDataToQueue>
 80124be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d010      	beq.n	80124ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ca:	3324      	adds	r3, #36	; 0x24
 80124cc:	4618      	mov	r0, r3
 80124ce:	f001 fb8f 	bl	8013bf0 <xTaskRemoveFromEventList>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d013      	beq.n	8012500 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80124d8:	4b3f      	ldr	r3, [pc, #252]	; (80125d8 <xQueueGenericSend+0x1f8>)
 80124da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124de:	601a      	str	r2, [r3, #0]
 80124e0:	f3bf 8f4f 	dsb	sy
 80124e4:	f3bf 8f6f 	isb	sy
 80124e8:	e00a      	b.n	8012500 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80124ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d007      	beq.n	8012500 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80124f0:	4b39      	ldr	r3, [pc, #228]	; (80125d8 <xQueueGenericSend+0x1f8>)
 80124f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124f6:	601a      	str	r2, [r3, #0]
 80124f8:	f3bf 8f4f 	dsb	sy
 80124fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012500:	f002 fdd8 	bl	80150b4 <vPortExitCritical>
				return pdPASS;
 8012504:	2301      	movs	r3, #1
 8012506:	e063      	b.n	80125d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d103      	bne.n	8012516 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801250e:	f002 fdd1 	bl	80150b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012512:	2300      	movs	r3, #0
 8012514:	e05c      	b.n	80125d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012518:	2b00      	cmp	r3, #0
 801251a:	d106      	bne.n	801252a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801251c:	f107 0314 	add.w	r3, r7, #20
 8012520:	4618      	mov	r0, r3
 8012522:	f001 fbc9 	bl	8013cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012526:	2301      	movs	r3, #1
 8012528:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801252a:	f002 fdc3 	bl	80150b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801252e:	f001 f887 	bl	8013640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012532:	f002 fd8f 	bl	8015054 <vPortEnterCritical>
 8012536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801253c:	b25b      	sxtb	r3, r3
 801253e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012542:	d103      	bne.n	801254c <xQueueGenericSend+0x16c>
 8012544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012546:	2200      	movs	r2, #0
 8012548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012552:	b25b      	sxtb	r3, r3
 8012554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012558:	d103      	bne.n	8012562 <xQueueGenericSend+0x182>
 801255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255c:	2200      	movs	r2, #0
 801255e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012562:	f002 fda7 	bl	80150b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012566:	1d3a      	adds	r2, r7, #4
 8012568:	f107 0314 	add.w	r3, r7, #20
 801256c:	4611      	mov	r1, r2
 801256e:	4618      	mov	r0, r3
 8012570:	f001 fbb8 	bl	8013ce4 <xTaskCheckForTimeOut>
 8012574:	4603      	mov	r3, r0
 8012576:	2b00      	cmp	r3, #0
 8012578:	d124      	bne.n	80125c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801257a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801257c:	f000 fcf5 	bl	8012f6a <prvIsQueueFull>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d018      	beq.n	80125b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012588:	3310      	adds	r3, #16
 801258a:	687a      	ldr	r2, [r7, #4]
 801258c:	4611      	mov	r1, r2
 801258e:	4618      	mov	r0, r3
 8012590:	f001 fade 	bl	8013b50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012596:	f000 fc80 	bl	8012e9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801259a:	f001 f85f 	bl	801365c <xTaskResumeAll>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f47f af7c 	bne.w	801249e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80125a6:	4b0c      	ldr	r3, [pc, #48]	; (80125d8 <xQueueGenericSend+0x1f8>)
 80125a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125ac:	601a      	str	r2, [r3, #0]
 80125ae:	f3bf 8f4f 	dsb	sy
 80125b2:	f3bf 8f6f 	isb	sy
 80125b6:	e772      	b.n	801249e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80125b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125ba:	f000 fc6e 	bl	8012e9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80125be:	f001 f84d 	bl	801365c <xTaskResumeAll>
 80125c2:	e76c      	b.n	801249e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80125c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125c6:	f000 fc68 	bl	8012e9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80125ca:	f001 f847 	bl	801365c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80125ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3738      	adds	r7, #56	; 0x38
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	e000ed04 	.word	0xe000ed04

080125dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b090      	sub	sp, #64	; 0x40
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	607a      	str	r2, [r7, #4]
 80125e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80125ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d10a      	bne.n	801260a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80125f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f8:	f383 8811 	msr	BASEPRI, r3
 80125fc:	f3bf 8f6f 	isb	sy
 8012600:	f3bf 8f4f 	dsb	sy
 8012604:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012606:	bf00      	nop
 8012608:	e7fe      	b.n	8012608 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d103      	bne.n	8012618 <xQueueGenericSendFromISR+0x3c>
 8012610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012614:	2b00      	cmp	r3, #0
 8012616:	d101      	bne.n	801261c <xQueueGenericSendFromISR+0x40>
 8012618:	2301      	movs	r3, #1
 801261a:	e000      	b.n	801261e <xQueueGenericSendFromISR+0x42>
 801261c:	2300      	movs	r3, #0
 801261e:	2b00      	cmp	r3, #0
 8012620:	d10a      	bne.n	8012638 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012626:	f383 8811 	msr	BASEPRI, r3
 801262a:	f3bf 8f6f 	isb	sy
 801262e:	f3bf 8f4f 	dsb	sy
 8012632:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012634:	bf00      	nop
 8012636:	e7fe      	b.n	8012636 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	2b02      	cmp	r3, #2
 801263c:	d103      	bne.n	8012646 <xQueueGenericSendFromISR+0x6a>
 801263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012642:	2b01      	cmp	r3, #1
 8012644:	d101      	bne.n	801264a <xQueueGenericSendFromISR+0x6e>
 8012646:	2301      	movs	r3, #1
 8012648:	e000      	b.n	801264c <xQueueGenericSendFromISR+0x70>
 801264a:	2300      	movs	r3, #0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d10a      	bne.n	8012666 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012654:	f383 8811 	msr	BASEPRI, r3
 8012658:	f3bf 8f6f 	isb	sy
 801265c:	f3bf 8f4f 	dsb	sy
 8012660:	623b      	str	r3, [r7, #32]
}
 8012662:	bf00      	nop
 8012664:	e7fe      	b.n	8012664 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012666:	f002 fdd7 	bl	8015218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801266a:	f3ef 8211 	mrs	r2, BASEPRI
 801266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012672:	f383 8811 	msr	BASEPRI, r3
 8012676:	f3bf 8f6f 	isb	sy
 801267a:	f3bf 8f4f 	dsb	sy
 801267e:	61fa      	str	r2, [r7, #28]
 8012680:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012682:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012684:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801268e:	429a      	cmp	r2, r3
 8012690:	d302      	bcc.n	8012698 <xQueueGenericSendFromISR+0xbc>
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	2b02      	cmp	r3, #2
 8012696:	d12f      	bne.n	80126f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801269e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126a8:	683a      	ldr	r2, [r7, #0]
 80126aa:	68b9      	ldr	r1, [r7, #8]
 80126ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80126ae:	f000 fb64 	bl	8012d7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80126b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80126b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126ba:	d112      	bne.n	80126e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d016      	beq.n	80126f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c6:	3324      	adds	r3, #36	; 0x24
 80126c8:	4618      	mov	r0, r3
 80126ca:	f001 fa91 	bl	8013bf0 <xTaskRemoveFromEventList>
 80126ce:	4603      	mov	r3, r0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d00e      	beq.n	80126f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00b      	beq.n	80126f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2201      	movs	r2, #1
 80126de:	601a      	str	r2, [r3, #0]
 80126e0:	e007      	b.n	80126f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80126e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80126e6:	3301      	adds	r3, #1
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	b25a      	sxtb	r2, r3
 80126ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80126f2:	2301      	movs	r3, #1
 80126f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80126f6:	e001      	b.n	80126fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80126f8:	2300      	movs	r3, #0
 80126fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80126fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012706:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801270a:	4618      	mov	r0, r3
 801270c:	3740      	adds	r7, #64	; 0x40
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}

08012712 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012712:	b580      	push	{r7, lr}
 8012714:	b08e      	sub	sp, #56	; 0x38
 8012716:	af00      	add	r7, sp, #0
 8012718:	6078      	str	r0, [r7, #4]
 801271a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012722:	2b00      	cmp	r3, #0
 8012724:	d10a      	bne.n	801273c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272a:	f383 8811 	msr	BASEPRI, r3
 801272e:	f3bf 8f6f 	isb	sy
 8012732:	f3bf 8f4f 	dsb	sy
 8012736:	623b      	str	r3, [r7, #32]
}
 8012738:	bf00      	nop
 801273a:	e7fe      	b.n	801273a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012740:	2b00      	cmp	r3, #0
 8012742:	d00a      	beq.n	801275a <xQueueGiveFromISR+0x48>
	__asm volatile
 8012744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012748:	f383 8811 	msr	BASEPRI, r3
 801274c:	f3bf 8f6f 	isb	sy
 8012750:	f3bf 8f4f 	dsb	sy
 8012754:	61fb      	str	r3, [r7, #28]
}
 8012756:	bf00      	nop
 8012758:	e7fe      	b.n	8012758 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d103      	bne.n	801276a <xQueueGiveFromISR+0x58>
 8012762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d101      	bne.n	801276e <xQueueGiveFromISR+0x5c>
 801276a:	2301      	movs	r3, #1
 801276c:	e000      	b.n	8012770 <xQueueGiveFromISR+0x5e>
 801276e:	2300      	movs	r3, #0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d10a      	bne.n	801278a <xQueueGiveFromISR+0x78>
	__asm volatile
 8012774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012778:	f383 8811 	msr	BASEPRI, r3
 801277c:	f3bf 8f6f 	isb	sy
 8012780:	f3bf 8f4f 	dsb	sy
 8012784:	61bb      	str	r3, [r7, #24]
}
 8012786:	bf00      	nop
 8012788:	e7fe      	b.n	8012788 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801278a:	f002 fd45 	bl	8015218 <vPortValidateInterruptPriority>
	__asm volatile
 801278e:	f3ef 8211 	mrs	r2, BASEPRI
 8012792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012796:	f383 8811 	msr	BASEPRI, r3
 801279a:	f3bf 8f6f 	isb	sy
 801279e:	f3bf 8f4f 	dsb	sy
 80127a2:	617a      	str	r2, [r7, #20]
 80127a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80127a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80127a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80127b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d22b      	bcs.n	8012812 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80127ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80127c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c6:	1c5a      	adds	r2, r3, #1
 80127c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80127cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80127d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127d4:	d112      	bne.n	80127fc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d016      	beq.n	801280c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e0:	3324      	adds	r3, #36	; 0x24
 80127e2:	4618      	mov	r0, r3
 80127e4:	f001 fa04 	bl	8013bf0 <xTaskRemoveFromEventList>
 80127e8:	4603      	mov	r3, r0
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d00e      	beq.n	801280c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d00b      	beq.n	801280c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	2201      	movs	r2, #1
 80127f8:	601a      	str	r2, [r3, #0]
 80127fa:	e007      	b.n	801280c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80127fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012800:	3301      	adds	r3, #1
 8012802:	b2db      	uxtb	r3, r3
 8012804:	b25a      	sxtb	r2, r3
 8012806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801280c:	2301      	movs	r3, #1
 801280e:	637b      	str	r3, [r7, #52]	; 0x34
 8012810:	e001      	b.n	8012816 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012812:	2300      	movs	r3, #0
 8012814:	637b      	str	r3, [r7, #52]	; 0x34
 8012816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012818:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	f383 8811 	msr	BASEPRI, r3
}
 8012820:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012824:	4618      	mov	r0, r3
 8012826:	3738      	adds	r7, #56	; 0x38
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b08c      	sub	sp, #48	; 0x30
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012838:	2300      	movs	r3, #0
 801283a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012842:	2b00      	cmp	r3, #0
 8012844:	d10a      	bne.n	801285c <xQueueReceive+0x30>
	__asm volatile
 8012846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801284a:	f383 8811 	msr	BASEPRI, r3
 801284e:	f3bf 8f6f 	isb	sy
 8012852:	f3bf 8f4f 	dsb	sy
 8012856:	623b      	str	r3, [r7, #32]
}
 8012858:	bf00      	nop
 801285a:	e7fe      	b.n	801285a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d103      	bne.n	801286a <xQueueReceive+0x3e>
 8012862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012866:	2b00      	cmp	r3, #0
 8012868:	d101      	bne.n	801286e <xQueueReceive+0x42>
 801286a:	2301      	movs	r3, #1
 801286c:	e000      	b.n	8012870 <xQueueReceive+0x44>
 801286e:	2300      	movs	r3, #0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d10a      	bne.n	801288a <xQueueReceive+0x5e>
	__asm volatile
 8012874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012878:	f383 8811 	msr	BASEPRI, r3
 801287c:	f3bf 8f6f 	isb	sy
 8012880:	f3bf 8f4f 	dsb	sy
 8012884:	61fb      	str	r3, [r7, #28]
}
 8012886:	bf00      	nop
 8012888:	e7fe      	b.n	8012888 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801288a:	f001 fc47 	bl	801411c <xTaskGetSchedulerState>
 801288e:	4603      	mov	r3, r0
 8012890:	2b00      	cmp	r3, #0
 8012892:	d102      	bne.n	801289a <xQueueReceive+0x6e>
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d101      	bne.n	801289e <xQueueReceive+0x72>
 801289a:	2301      	movs	r3, #1
 801289c:	e000      	b.n	80128a0 <xQueueReceive+0x74>
 801289e:	2300      	movs	r3, #0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d10a      	bne.n	80128ba <xQueueReceive+0x8e>
	__asm volatile
 80128a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a8:	f383 8811 	msr	BASEPRI, r3
 80128ac:	f3bf 8f6f 	isb	sy
 80128b0:	f3bf 8f4f 	dsb	sy
 80128b4:	61bb      	str	r3, [r7, #24]
}
 80128b6:	bf00      	nop
 80128b8:	e7fe      	b.n	80128b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80128ba:	f002 fbcb 	bl	8015054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d01f      	beq.n	801290a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80128ca:	68b9      	ldr	r1, [r7, #8]
 80128cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128ce:	f000 fabe 	bl	8012e4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80128d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d4:	1e5a      	subs	r2, r3, #1
 80128d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128dc:	691b      	ldr	r3, [r3, #16]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d00f      	beq.n	8012902 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e4:	3310      	adds	r3, #16
 80128e6:	4618      	mov	r0, r3
 80128e8:	f001 f982 	bl	8013bf0 <xTaskRemoveFromEventList>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d007      	beq.n	8012902 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80128f2:	4b3d      	ldr	r3, [pc, #244]	; (80129e8 <xQueueReceive+0x1bc>)
 80128f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128f8:	601a      	str	r2, [r3, #0]
 80128fa:	f3bf 8f4f 	dsb	sy
 80128fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012902:	f002 fbd7 	bl	80150b4 <vPortExitCritical>
				return pdPASS;
 8012906:	2301      	movs	r3, #1
 8012908:	e069      	b.n	80129de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d103      	bne.n	8012918 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012910:	f002 fbd0 	bl	80150b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012914:	2300      	movs	r3, #0
 8012916:	e062      	b.n	80129de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291a:	2b00      	cmp	r3, #0
 801291c:	d106      	bne.n	801292c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801291e:	f107 0310 	add.w	r3, r7, #16
 8012922:	4618      	mov	r0, r3
 8012924:	f001 f9c8 	bl	8013cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012928:	2301      	movs	r3, #1
 801292a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801292c:	f002 fbc2 	bl	80150b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012930:	f000 fe86 	bl	8013640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012934:	f002 fb8e 	bl	8015054 <vPortEnterCritical>
 8012938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801293e:	b25b      	sxtb	r3, r3
 8012940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012944:	d103      	bne.n	801294e <xQueueReceive+0x122>
 8012946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012948:	2200      	movs	r2, #0
 801294a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012954:	b25b      	sxtb	r3, r3
 8012956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801295a:	d103      	bne.n	8012964 <xQueueReceive+0x138>
 801295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295e:	2200      	movs	r2, #0
 8012960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012964:	f002 fba6 	bl	80150b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012968:	1d3a      	adds	r2, r7, #4
 801296a:	f107 0310 	add.w	r3, r7, #16
 801296e:	4611      	mov	r1, r2
 8012970:	4618      	mov	r0, r3
 8012972:	f001 f9b7 	bl	8013ce4 <xTaskCheckForTimeOut>
 8012976:	4603      	mov	r3, r0
 8012978:	2b00      	cmp	r3, #0
 801297a:	d123      	bne.n	80129c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801297c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801297e:	f000 fade 	bl	8012f3e <prvIsQueueEmpty>
 8012982:	4603      	mov	r3, r0
 8012984:	2b00      	cmp	r3, #0
 8012986:	d017      	beq.n	80129b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801298a:	3324      	adds	r3, #36	; 0x24
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	4611      	mov	r1, r2
 8012990:	4618      	mov	r0, r3
 8012992:	f001 f8dd 	bl	8013b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012998:	f000 fa7f 	bl	8012e9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801299c:	f000 fe5e 	bl	801365c <xTaskResumeAll>
 80129a0:	4603      	mov	r3, r0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d189      	bne.n	80128ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80129a6:	4b10      	ldr	r3, [pc, #64]	; (80129e8 <xQueueReceive+0x1bc>)
 80129a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129ac:	601a      	str	r2, [r3, #0]
 80129ae:	f3bf 8f4f 	dsb	sy
 80129b2:	f3bf 8f6f 	isb	sy
 80129b6:	e780      	b.n	80128ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80129b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129ba:	f000 fa6e 	bl	8012e9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80129be:	f000 fe4d 	bl	801365c <xTaskResumeAll>
 80129c2:	e77a      	b.n	80128ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80129c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129c6:	f000 fa68 	bl	8012e9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80129ca:	f000 fe47 	bl	801365c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80129ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129d0:	f000 fab5 	bl	8012f3e <prvIsQueueEmpty>
 80129d4:	4603      	mov	r3, r0
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	f43f af6f 	beq.w	80128ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80129dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3730      	adds	r7, #48	; 0x30
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
 80129e6:	bf00      	nop
 80129e8:	e000ed04 	.word	0xe000ed04

080129ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b08e      	sub	sp, #56	; 0x38
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80129f6:	2300      	movs	r3, #0
 80129f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80129fe:	2300      	movs	r3, #0
 8012a00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d10a      	bne.n	8012a1e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0c:	f383 8811 	msr	BASEPRI, r3
 8012a10:	f3bf 8f6f 	isb	sy
 8012a14:	f3bf 8f4f 	dsb	sy
 8012a18:	623b      	str	r3, [r7, #32]
}
 8012a1a:	bf00      	nop
 8012a1c:	e7fe      	b.n	8012a1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d00a      	beq.n	8012a3c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a2a:	f383 8811 	msr	BASEPRI, r3
 8012a2e:	f3bf 8f6f 	isb	sy
 8012a32:	f3bf 8f4f 	dsb	sy
 8012a36:	61fb      	str	r3, [r7, #28]
}
 8012a38:	bf00      	nop
 8012a3a:	e7fe      	b.n	8012a3a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a3c:	f001 fb6e 	bl	801411c <xTaskGetSchedulerState>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d102      	bne.n	8012a4c <xQueueSemaphoreTake+0x60>
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d101      	bne.n	8012a50 <xQueueSemaphoreTake+0x64>
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	e000      	b.n	8012a52 <xQueueSemaphoreTake+0x66>
 8012a50:	2300      	movs	r3, #0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d10a      	bne.n	8012a6c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a5a:	f383 8811 	msr	BASEPRI, r3
 8012a5e:	f3bf 8f6f 	isb	sy
 8012a62:	f3bf 8f4f 	dsb	sy
 8012a66:	61bb      	str	r3, [r7, #24]
}
 8012a68:	bf00      	nop
 8012a6a:	e7fe      	b.n	8012a6a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012a6c:	f002 faf2 	bl	8015054 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d024      	beq.n	8012ac6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7e:	1e5a      	subs	r2, r3, #1
 8012a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d104      	bne.n	8012a96 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012a8c:	f001 fdfc 	bl	8014688 <pvTaskIncrementMutexHeldCount>
 8012a90:	4602      	mov	r2, r0
 8012a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a94:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a98:	691b      	ldr	r3, [r3, #16]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00f      	beq.n	8012abe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa0:	3310      	adds	r3, #16
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f001 f8a4 	bl	8013bf0 <xTaskRemoveFromEventList>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d007      	beq.n	8012abe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012aae:	4b54      	ldr	r3, [pc, #336]	; (8012c00 <xQueueSemaphoreTake+0x214>)
 8012ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ab4:	601a      	str	r2, [r3, #0]
 8012ab6:	f3bf 8f4f 	dsb	sy
 8012aba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012abe:	f002 faf9 	bl	80150b4 <vPortExitCritical>
				return pdPASS;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	e097      	b.n	8012bf6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d111      	bne.n	8012af0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00a      	beq.n	8012ae8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad6:	f383 8811 	msr	BASEPRI, r3
 8012ada:	f3bf 8f6f 	isb	sy
 8012ade:	f3bf 8f4f 	dsb	sy
 8012ae2:	617b      	str	r3, [r7, #20]
}
 8012ae4:	bf00      	nop
 8012ae6:	e7fe      	b.n	8012ae6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012ae8:	f002 fae4 	bl	80150b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012aec:	2300      	movs	r3, #0
 8012aee:	e082      	b.n	8012bf6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d106      	bne.n	8012b04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012af6:	f107 030c 	add.w	r3, r7, #12
 8012afa:	4618      	mov	r0, r3
 8012afc:	f001 f8dc 	bl	8013cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012b00:	2301      	movs	r3, #1
 8012b02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012b04:	f002 fad6 	bl	80150b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b08:	f000 fd9a 	bl	8013640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012b0c:	f002 faa2 	bl	8015054 <vPortEnterCritical>
 8012b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b16:	b25b      	sxtb	r3, r3
 8012b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b1c:	d103      	bne.n	8012b26 <xQueueSemaphoreTake+0x13a>
 8012b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b20:	2200      	movs	r2, #0
 8012b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b2c:	b25b      	sxtb	r3, r3
 8012b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b32:	d103      	bne.n	8012b3c <xQueueSemaphoreTake+0x150>
 8012b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b36:	2200      	movs	r2, #0
 8012b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b3c:	f002 faba 	bl	80150b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012b40:	463a      	mov	r2, r7
 8012b42:	f107 030c 	add.w	r3, r7, #12
 8012b46:	4611      	mov	r1, r2
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f001 f8cb 	bl	8013ce4 <xTaskCheckForTimeOut>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d132      	bne.n	8012bba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b56:	f000 f9f2 	bl	8012f3e <prvIsQueueEmpty>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d026      	beq.n	8012bae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d109      	bne.n	8012b7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012b68:	f002 fa74 	bl	8015054 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6e:	689b      	ldr	r3, [r3, #8]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f001 faf1 	bl	8014158 <xTaskPriorityInherit>
 8012b76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012b78:	f002 fa9c 	bl	80150b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7e:	3324      	adds	r3, #36	; 0x24
 8012b80:	683a      	ldr	r2, [r7, #0]
 8012b82:	4611      	mov	r1, r2
 8012b84:	4618      	mov	r0, r3
 8012b86:	f000 ffe3 	bl	8013b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012b8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b8c:	f000 f985 	bl	8012e9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012b90:	f000 fd64 	bl	801365c <xTaskResumeAll>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f47f af68 	bne.w	8012a6c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012b9c:	4b18      	ldr	r3, [pc, #96]	; (8012c00 <xQueueSemaphoreTake+0x214>)
 8012b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ba2:	601a      	str	r2, [r3, #0]
 8012ba4:	f3bf 8f4f 	dsb	sy
 8012ba8:	f3bf 8f6f 	isb	sy
 8012bac:	e75e      	b.n	8012a6c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bb0:	f000 f973 	bl	8012e9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012bb4:	f000 fd52 	bl	801365c <xTaskResumeAll>
 8012bb8:	e758      	b.n	8012a6c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012bba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bbc:	f000 f96d 	bl	8012e9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012bc0:	f000 fd4c 	bl	801365c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012bc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bc6:	f000 f9ba 	bl	8012f3e <prvIsQueueEmpty>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	f43f af4d 	beq.w	8012a6c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00d      	beq.n	8012bf4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012bd8:	f002 fa3c 	bl	8015054 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bde:	f000 f8b4 	bl	8012d4a <prvGetDisinheritPriorityAfterTimeout>
 8012be2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be6:	689b      	ldr	r3, [r3, #8]
 8012be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012bea:	4618      	mov	r0, r3
 8012bec:	f001 fb8a 	bl	8014304 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012bf0:	f002 fa60 	bl	80150b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012bf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	3738      	adds	r7, #56	; 0x38
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	e000ed04 	.word	0xe000ed04

08012c04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b08e      	sub	sp, #56	; 0x38
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	60f8      	str	r0, [r7, #12]
 8012c0c:	60b9      	str	r1, [r7, #8]
 8012c0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d10a      	bne.n	8012c30 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c1e:	f383 8811 	msr	BASEPRI, r3
 8012c22:	f3bf 8f6f 	isb	sy
 8012c26:	f3bf 8f4f 	dsb	sy
 8012c2a:	623b      	str	r3, [r7, #32]
}
 8012c2c:	bf00      	nop
 8012c2e:	e7fe      	b.n	8012c2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d103      	bne.n	8012c3e <xQueueReceiveFromISR+0x3a>
 8012c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d101      	bne.n	8012c42 <xQueueReceiveFromISR+0x3e>
 8012c3e:	2301      	movs	r3, #1
 8012c40:	e000      	b.n	8012c44 <xQueueReceiveFromISR+0x40>
 8012c42:	2300      	movs	r3, #0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d10a      	bne.n	8012c5e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4c:	f383 8811 	msr	BASEPRI, r3
 8012c50:	f3bf 8f6f 	isb	sy
 8012c54:	f3bf 8f4f 	dsb	sy
 8012c58:	61fb      	str	r3, [r7, #28]
}
 8012c5a:	bf00      	nop
 8012c5c:	e7fe      	b.n	8012c5c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c5e:	f002 fadb 	bl	8015218 <vPortValidateInterruptPriority>
	__asm volatile
 8012c62:	f3ef 8211 	mrs	r2, BASEPRI
 8012c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6a:	f383 8811 	msr	BASEPRI, r3
 8012c6e:	f3bf 8f6f 	isb	sy
 8012c72:	f3bf 8f4f 	dsb	sy
 8012c76:	61ba      	str	r2, [r7, #24]
 8012c78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012c7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d02f      	beq.n	8012cea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c94:	68b9      	ldr	r1, [r7, #8]
 8012c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c98:	f000 f8d9 	bl	8012e4e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9e:	1e5a      	subs	r2, r3, #1
 8012ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012ca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cac:	d112      	bne.n	8012cd4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb0:	691b      	ldr	r3, [r3, #16]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d016      	beq.n	8012ce4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb8:	3310      	adds	r3, #16
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f000 ff98 	bl	8013bf0 <xTaskRemoveFromEventList>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d00e      	beq.n	8012ce4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00b      	beq.n	8012ce4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2201      	movs	r2, #1
 8012cd0:	601a      	str	r2, [r3, #0]
 8012cd2:	e007      	b.n	8012ce4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cd8:	3301      	adds	r3, #1
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	b25a      	sxtb	r2, r3
 8012cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8012ce8:	e001      	b.n	8012cee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012cea:	2300      	movs	r3, #0
 8012cec:	637b      	str	r3, [r7, #52]	; 0x34
 8012cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	f383 8811 	msr	BASEPRI, r3
}
 8012cf8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3738      	adds	r7, #56	; 0x38
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d10a      	bne.n	8012d2c <vQueueDelete+0x28>
	__asm volatile
 8012d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d1a:	f383 8811 	msr	BASEPRI, r3
 8012d1e:	f3bf 8f6f 	isb	sy
 8012d22:	f3bf 8f4f 	dsb	sy
 8012d26:	60bb      	str	r3, [r7, #8]
}
 8012d28:	bf00      	nop
 8012d2a:	e7fe      	b.n	8012d2a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012d2c:	68f8      	ldr	r0, [r7, #12]
 8012d2e:	f000 f95f 	bl	8012ff0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d102      	bne.n	8012d42 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	f002 fb77 	bl	8015430 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012d42:	bf00      	nop
 8012d44:	3710      	adds	r7, #16
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}

08012d4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012d4a:	b480      	push	{r7}
 8012d4c:	b085      	sub	sp, #20
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d006      	beq.n	8012d68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012d64:	60fb      	str	r3, [r7, #12]
 8012d66:	e001      	b.n	8012d6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012d68:	2300      	movs	r3, #0
 8012d6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
	}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3714      	adds	r7, #20
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr

08012d7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b086      	sub	sp, #24
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	60f8      	str	r0, [r7, #12]
 8012d82:	60b9      	str	r1, [r7, #8]
 8012d84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012d86:	2300      	movs	r3, #0
 8012d88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d10d      	bne.n	8012db4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d14d      	bne.n	8012e3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	689b      	ldr	r3, [r3, #8]
 8012da4:	4618      	mov	r0, r3
 8012da6:	f001 fa3f 	bl	8014228 <xTaskPriorityDisinherit>
 8012daa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	2200      	movs	r2, #0
 8012db0:	609a      	str	r2, [r3, #8]
 8012db2:	e043      	b.n	8012e3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d119      	bne.n	8012dee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	6858      	ldr	r0, [r3, #4]
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	68b9      	ldr	r1, [r7, #8]
 8012dc6:	f003 fad3 	bl	8016370 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dd2:	441a      	add	r2, r3
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	685a      	ldr	r2, [r3, #4]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d32b      	bcc.n	8012e3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	605a      	str	r2, [r3, #4]
 8012dec:	e026      	b.n	8012e3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	68d8      	ldr	r0, [r3, #12]
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012df6:	461a      	mov	r2, r3
 8012df8:	68b9      	ldr	r1, [r7, #8]
 8012dfa:	f003 fab9 	bl	8016370 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	68da      	ldr	r2, [r3, #12]
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e06:	425b      	negs	r3, r3
 8012e08:	441a      	add	r2, r3
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	68da      	ldr	r2, [r3, #12]
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d207      	bcs.n	8012e2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	689a      	ldr	r2, [r3, #8]
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e22:	425b      	negs	r3, r3
 8012e24:	441a      	add	r2, r3
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2b02      	cmp	r3, #2
 8012e2e:	d105      	bne.n	8012e3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d002      	beq.n	8012e3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	3b01      	subs	r3, #1
 8012e3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	1c5a      	adds	r2, r3, #1
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012e44:	697b      	ldr	r3, [r7, #20]
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3718      	adds	r7, #24
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b082      	sub	sp, #8
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
 8012e56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d018      	beq.n	8012e92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	68da      	ldr	r2, [r3, #12]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e68:	441a      	add	r2, r3
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	68da      	ldr	r2, [r3, #12]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	689b      	ldr	r3, [r3, #8]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d303      	bcc.n	8012e82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681a      	ldr	r2, [r3, #0]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	68d9      	ldr	r1, [r3, #12]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	6838      	ldr	r0, [r7, #0]
 8012e8e:	f003 fa6f 	bl	8016370 <memcpy>
	}
}
 8012e92:	bf00      	nop
 8012e94:	3708      	adds	r7, #8
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}

08012e9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012e9a:	b580      	push	{r7, lr}
 8012e9c:	b084      	sub	sp, #16
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012ea2:	f002 f8d7 	bl	8015054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012eac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012eae:	e011      	b.n	8012ed4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d012      	beq.n	8012ede <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	3324      	adds	r3, #36	; 0x24
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f000 fe97 	bl	8013bf0 <xTaskRemoveFromEventList>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d001      	beq.n	8012ecc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012ec8:	f000 ff6e 	bl	8013da8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012ecc:	7bfb      	ldrb	r3, [r7, #15]
 8012ece:	3b01      	subs	r3, #1
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	dce9      	bgt.n	8012eb0 <prvUnlockQueue+0x16>
 8012edc:	e000      	b.n	8012ee0 <prvUnlockQueue+0x46>
					break;
 8012ede:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	22ff      	movs	r2, #255	; 0xff
 8012ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012ee8:	f002 f8e4 	bl	80150b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012eec:	f002 f8b2 	bl	8015054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ef6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ef8:	e011      	b.n	8012f1e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	691b      	ldr	r3, [r3, #16]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d012      	beq.n	8012f28 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	3310      	adds	r3, #16
 8012f06:	4618      	mov	r0, r3
 8012f08:	f000 fe72 	bl	8013bf0 <xTaskRemoveFromEventList>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d001      	beq.n	8012f16 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012f12:	f000 ff49 	bl	8013da8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012f16:	7bbb      	ldrb	r3, [r7, #14]
 8012f18:	3b01      	subs	r3, #1
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	dce9      	bgt.n	8012efa <prvUnlockQueue+0x60>
 8012f26:	e000      	b.n	8012f2a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012f28:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	22ff      	movs	r2, #255	; 0xff
 8012f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012f32:	f002 f8bf 	bl	80150b4 <vPortExitCritical>
}
 8012f36:	bf00      	nop
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b084      	sub	sp, #16
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f46:	f002 f885 	bl	8015054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d102      	bne.n	8012f58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012f52:	2301      	movs	r3, #1
 8012f54:	60fb      	str	r3, [r7, #12]
 8012f56:	e001      	b.n	8012f5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f5c:	f002 f8aa 	bl	80150b4 <vPortExitCritical>

	return xReturn;
 8012f60:	68fb      	ldr	r3, [r7, #12]
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}

08012f6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012f6a:	b580      	push	{r7, lr}
 8012f6c:	b084      	sub	sp, #16
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f72:	f002 f86f 	bl	8015054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d102      	bne.n	8012f88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012f82:	2301      	movs	r3, #1
 8012f84:	60fb      	str	r3, [r7, #12]
 8012f86:	e001      	b.n	8012f8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f8c:	f002 f892 	bl	80150b4 <vPortExitCritical>

	return xReturn;
 8012f90:	68fb      	ldr	r3, [r7, #12]
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
	...

08012f9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b085      	sub	sp, #20
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	60fb      	str	r3, [r7, #12]
 8012faa:	e014      	b.n	8012fd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012fac:	4a0f      	ldr	r2, [pc, #60]	; (8012fec <vQueueAddToRegistry+0x50>)
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d10b      	bne.n	8012fd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012fb8:	490c      	ldr	r1, [pc, #48]	; (8012fec <vQueueAddToRegistry+0x50>)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	683a      	ldr	r2, [r7, #0]
 8012fbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012fc2:	4a0a      	ldr	r2, [pc, #40]	; (8012fec <vQueueAddToRegistry+0x50>)
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	00db      	lsls	r3, r3, #3
 8012fc8:	4413      	add	r3, r2
 8012fca:	687a      	ldr	r2, [r7, #4]
 8012fcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012fce:	e006      	b.n	8012fde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	60fb      	str	r3, [r7, #12]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2b07      	cmp	r3, #7
 8012fda:	d9e7      	bls.n	8012fac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012fdc:	bf00      	nop
 8012fde:	bf00      	nop
 8012fe0:	3714      	adds	r7, #20
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop
 8012fec:	20015398 	.word	0x20015398

08012ff0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b085      	sub	sp, #20
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	60fb      	str	r3, [r7, #12]
 8012ffc:	e016      	b.n	801302c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012ffe:	4a10      	ldr	r2, [pc, #64]	; (8013040 <vQueueUnregisterQueue+0x50>)
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	00db      	lsls	r3, r3, #3
 8013004:	4413      	add	r3, r2
 8013006:	685b      	ldr	r3, [r3, #4]
 8013008:	687a      	ldr	r2, [r7, #4]
 801300a:	429a      	cmp	r2, r3
 801300c:	d10b      	bne.n	8013026 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801300e:	4a0c      	ldr	r2, [pc, #48]	; (8013040 <vQueueUnregisterQueue+0x50>)
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2100      	movs	r1, #0
 8013014:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013018:	4a09      	ldr	r2, [pc, #36]	; (8013040 <vQueueUnregisterQueue+0x50>)
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	00db      	lsls	r3, r3, #3
 801301e:	4413      	add	r3, r2
 8013020:	2200      	movs	r2, #0
 8013022:	605a      	str	r2, [r3, #4]
				break;
 8013024:	e006      	b.n	8013034 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	3301      	adds	r3, #1
 801302a:	60fb      	str	r3, [r7, #12]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2b07      	cmp	r3, #7
 8013030:	d9e5      	bls.n	8012ffe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013032:	bf00      	nop
 8013034:	bf00      	nop
 8013036:	3714      	adds	r7, #20
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr
 8013040:	20015398 	.word	0x20015398

08013044 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013044:	b580      	push	{r7, lr}
 8013046:	b086      	sub	sp, #24
 8013048:	af00      	add	r7, sp, #0
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013054:	f001 fffe 	bl	8015054 <vPortEnterCritical>
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801305e:	b25b      	sxtb	r3, r3
 8013060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013064:	d103      	bne.n	801306e <vQueueWaitForMessageRestricted+0x2a>
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	2200      	movs	r2, #0
 801306a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013074:	b25b      	sxtb	r3, r3
 8013076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801307a:	d103      	bne.n	8013084 <vQueueWaitForMessageRestricted+0x40>
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	2200      	movs	r2, #0
 8013080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013084:	f002 f816 	bl	80150b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801308c:	2b00      	cmp	r3, #0
 801308e:	d106      	bne.n	801309e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	3324      	adds	r3, #36	; 0x24
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	68b9      	ldr	r1, [r7, #8]
 8013098:	4618      	mov	r0, r3
 801309a:	f000 fd7d 	bl	8013b98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801309e:	6978      	ldr	r0, [r7, #20]
 80130a0:	f7ff fefb 	bl	8012e9a <prvUnlockQueue>
	}
 80130a4:	bf00      	nop
 80130a6:	3718      	adds	r7, #24
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}

080130ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b08e      	sub	sp, #56	; 0x38
 80130b0:	af04      	add	r7, sp, #16
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	607a      	str	r2, [r7, #4]
 80130b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80130ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d10a      	bne.n	80130d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80130c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c4:	f383 8811 	msr	BASEPRI, r3
 80130c8:	f3bf 8f6f 	isb	sy
 80130cc:	f3bf 8f4f 	dsb	sy
 80130d0:	623b      	str	r3, [r7, #32]
}
 80130d2:	bf00      	nop
 80130d4:	e7fe      	b.n	80130d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80130d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d10a      	bne.n	80130f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80130dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e0:	f383 8811 	msr	BASEPRI, r3
 80130e4:	f3bf 8f6f 	isb	sy
 80130e8:	f3bf 8f4f 	dsb	sy
 80130ec:	61fb      	str	r3, [r7, #28]
}
 80130ee:	bf00      	nop
 80130f0:	e7fe      	b.n	80130f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80130f2:	23c0      	movs	r3, #192	; 0xc0
 80130f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	2bc0      	cmp	r3, #192	; 0xc0
 80130fa:	d00a      	beq.n	8013112 <xTaskCreateStatic+0x66>
	__asm volatile
 80130fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013100:	f383 8811 	msr	BASEPRI, r3
 8013104:	f3bf 8f6f 	isb	sy
 8013108:	f3bf 8f4f 	dsb	sy
 801310c:	61bb      	str	r3, [r7, #24]
}
 801310e:	bf00      	nop
 8013110:	e7fe      	b.n	8013110 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013112:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013116:	2b00      	cmp	r3, #0
 8013118:	d01e      	beq.n	8013158 <xTaskCreateStatic+0xac>
 801311a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801311c:	2b00      	cmp	r3, #0
 801311e:	d01b      	beq.n	8013158 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013122:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013128:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312c:	2202      	movs	r2, #2
 801312e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013132:	2300      	movs	r3, #0
 8013134:	9303      	str	r3, [sp, #12]
 8013136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013138:	9302      	str	r3, [sp, #8]
 801313a:	f107 0314 	add.w	r3, r7, #20
 801313e:	9301      	str	r3, [sp, #4]
 8013140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	68b9      	ldr	r1, [r7, #8]
 801314a:	68f8      	ldr	r0, [r7, #12]
 801314c:	f000 f850 	bl	80131f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013152:	f000 f8f7 	bl	8013344 <prvAddNewTaskToReadyList>
 8013156:	e001      	b.n	801315c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013158:	2300      	movs	r3, #0
 801315a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801315c:	697b      	ldr	r3, [r7, #20]
	}
 801315e:	4618      	mov	r0, r3
 8013160:	3728      	adds	r7, #40	; 0x28
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013166:	b580      	push	{r7, lr}
 8013168:	b08c      	sub	sp, #48	; 0x30
 801316a:	af04      	add	r7, sp, #16
 801316c:	60f8      	str	r0, [r7, #12]
 801316e:	60b9      	str	r1, [r7, #8]
 8013170:	603b      	str	r3, [r7, #0]
 8013172:	4613      	mov	r3, r2
 8013174:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013176:	88fb      	ldrh	r3, [r7, #6]
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	4618      	mov	r0, r3
 801317c:	f002 f88c 	bl	8015298 <pvPortMalloc>
 8013180:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d00e      	beq.n	80131a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013188:	20c0      	movs	r0, #192	; 0xc0
 801318a:	f002 f885 	bl	8015298 <pvPortMalloc>
 801318e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013190:	69fb      	ldr	r3, [r7, #28]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d003      	beq.n	801319e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	697a      	ldr	r2, [r7, #20]
 801319a:	631a      	str	r2, [r3, #48]	; 0x30
 801319c:	e005      	b.n	80131aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801319e:	6978      	ldr	r0, [r7, #20]
 80131a0:	f002 f946 	bl	8015430 <vPortFree>
 80131a4:	e001      	b.n	80131aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80131a6:	2300      	movs	r3, #0
 80131a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d017      	beq.n	80131e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80131b0:	69fb      	ldr	r3, [r7, #28]
 80131b2:	2200      	movs	r2, #0
 80131b4:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80131b8:	88fa      	ldrh	r2, [r7, #6]
 80131ba:	2300      	movs	r3, #0
 80131bc:	9303      	str	r3, [sp, #12]
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	9302      	str	r3, [sp, #8]
 80131c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c4:	9301      	str	r3, [sp, #4]
 80131c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	68b9      	ldr	r1, [r7, #8]
 80131ce:	68f8      	ldr	r0, [r7, #12]
 80131d0:	f000 f80e 	bl	80131f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80131d4:	69f8      	ldr	r0, [r7, #28]
 80131d6:	f000 f8b5 	bl	8013344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80131da:	2301      	movs	r3, #1
 80131dc:	61bb      	str	r3, [r7, #24]
 80131de:	e002      	b.n	80131e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80131e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80131e6:	69bb      	ldr	r3, [r7, #24]
	}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3720      	adds	r7, #32
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b088      	sub	sp, #32
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	60f8      	str	r0, [r7, #12]
 80131f8:	60b9      	str	r1, [r7, #8]
 80131fa:	607a      	str	r2, [r7, #4]
 80131fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80131fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013200:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	461a      	mov	r2, r3
 8013208:	21a5      	movs	r1, #165	; 0xa5
 801320a:	f003 f8bf 	bl	801638c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013218:	3b01      	subs	r3, #1
 801321a:	009b      	lsls	r3, r3, #2
 801321c:	4413      	add	r3, r2
 801321e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013220:	69bb      	ldr	r3, [r7, #24]
 8013222:	f023 0307 	bic.w	r3, r3, #7
 8013226:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	f003 0307 	and.w	r3, r3, #7
 801322e:	2b00      	cmp	r3, #0
 8013230:	d00a      	beq.n	8013248 <prvInitialiseNewTask+0x58>
	__asm volatile
 8013232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013236:	f383 8811 	msr	BASEPRI, r3
 801323a:	f3bf 8f6f 	isb	sy
 801323e:	f3bf 8f4f 	dsb	sy
 8013242:	617b      	str	r3, [r7, #20]
}
 8013244:	bf00      	nop
 8013246:	e7fe      	b.n	8013246 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d01f      	beq.n	801328e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801324e:	2300      	movs	r3, #0
 8013250:	61fb      	str	r3, [r7, #28]
 8013252:	e012      	b.n	801327a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013254:	68ba      	ldr	r2, [r7, #8]
 8013256:	69fb      	ldr	r3, [r7, #28]
 8013258:	4413      	add	r3, r2
 801325a:	7819      	ldrb	r1, [r3, #0]
 801325c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	4413      	add	r3, r2
 8013262:	3334      	adds	r3, #52	; 0x34
 8013264:	460a      	mov	r2, r1
 8013266:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013268:	68ba      	ldr	r2, [r7, #8]
 801326a:	69fb      	ldr	r3, [r7, #28]
 801326c:	4413      	add	r3, r2
 801326e:	781b      	ldrb	r3, [r3, #0]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d006      	beq.n	8013282 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	3301      	adds	r3, #1
 8013278:	61fb      	str	r3, [r7, #28]
 801327a:	69fb      	ldr	r3, [r7, #28]
 801327c:	2b0f      	cmp	r3, #15
 801327e:	d9e9      	bls.n	8013254 <prvInitialiseNewTask+0x64>
 8013280:	e000      	b.n	8013284 <prvInitialiseNewTask+0x94>
			{
				break;
 8013282:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013286:	2200      	movs	r2, #0
 8013288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801328c:	e003      	b.n	8013296 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013290:	2200      	movs	r2, #0
 8013292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013298:	2b37      	cmp	r3, #55	; 0x37
 801329a:	d901      	bls.n	80132a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801329c:	2337      	movs	r3, #55	; 0x37
 801329e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80132a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80132a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80132ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ae:	2200      	movs	r2, #0
 80132b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b4:	3304      	adds	r3, #4
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fe fe56 	bl	8011f68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80132bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132be:	3318      	adds	r3, #24
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fe fe51 	bl	8011f68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80132c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80132d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80132d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80132dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132de:	2200      	movs	r2, #0
 80132e0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80132e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e4:	2200      	movs	r2, #0
 80132e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80132ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ec:	2200      	movs	r2, #0
 80132ee:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80132f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f4:	3358      	adds	r3, #88	; 0x58
 80132f6:	2260      	movs	r2, #96	; 0x60
 80132f8:	2100      	movs	r1, #0
 80132fa:	4618      	mov	r0, r3
 80132fc:	f003 f846 	bl	801638c <memset>
 8013300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013302:	4a0d      	ldr	r2, [pc, #52]	; (8013338 <prvInitialiseNewTask+0x148>)
 8013304:	65da      	str	r2, [r3, #92]	; 0x5c
 8013306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013308:	4a0c      	ldr	r2, [pc, #48]	; (801333c <prvInitialiseNewTask+0x14c>)
 801330a:	661a      	str	r2, [r3, #96]	; 0x60
 801330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330e:	4a0c      	ldr	r2, [pc, #48]	; (8013340 <prvInitialiseNewTask+0x150>)
 8013310:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013312:	683a      	ldr	r2, [r7, #0]
 8013314:	68f9      	ldr	r1, [r7, #12]
 8013316:	69b8      	ldr	r0, [r7, #24]
 8013318:	f001 fd6c 	bl	8014df4 <pxPortInitialiseStack>
 801331c:	4602      	mov	r2, r0
 801331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013320:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013324:	2b00      	cmp	r3, #0
 8013326:	d002      	beq.n	801332e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801332c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801332e:	bf00      	nop
 8013330:	3720      	adds	r7, #32
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
 8013336:	bf00      	nop
 8013338:	08019f68 	.word	0x08019f68
 801333c:	08019f88 	.word	0x08019f88
 8013340:	08019f48 	.word	0x08019f48

08013344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801334c:	f001 fe82 	bl	8015054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013350:	4b2d      	ldr	r3, [pc, #180]	; (8013408 <prvAddNewTaskToReadyList+0xc4>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	3301      	adds	r3, #1
 8013356:	4a2c      	ldr	r2, [pc, #176]	; (8013408 <prvAddNewTaskToReadyList+0xc4>)
 8013358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801335a:	4b2c      	ldr	r3, [pc, #176]	; (801340c <prvAddNewTaskToReadyList+0xc8>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d109      	bne.n	8013376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013362:	4a2a      	ldr	r2, [pc, #168]	; (801340c <prvAddNewTaskToReadyList+0xc8>)
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013368:	4b27      	ldr	r3, [pc, #156]	; (8013408 <prvAddNewTaskToReadyList+0xc4>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	2b01      	cmp	r3, #1
 801336e:	d110      	bne.n	8013392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013370:	f000 fd3e 	bl	8013df0 <prvInitialiseTaskLists>
 8013374:	e00d      	b.n	8013392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013376:	4b26      	ldr	r3, [pc, #152]	; (8013410 <prvAddNewTaskToReadyList+0xcc>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d109      	bne.n	8013392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801337e:	4b23      	ldr	r3, [pc, #140]	; (801340c <prvAddNewTaskToReadyList+0xc8>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013388:	429a      	cmp	r2, r3
 801338a:	d802      	bhi.n	8013392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801338c:	4a1f      	ldr	r2, [pc, #124]	; (801340c <prvAddNewTaskToReadyList+0xc8>)
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013392:	4b20      	ldr	r3, [pc, #128]	; (8013414 <prvAddNewTaskToReadyList+0xd0>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	3301      	adds	r3, #1
 8013398:	4a1e      	ldr	r2, [pc, #120]	; (8013414 <prvAddNewTaskToReadyList+0xd0>)
 801339a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801339c:	4b1d      	ldr	r3, [pc, #116]	; (8013414 <prvAddNewTaskToReadyList+0xd0>)
 801339e:	681a      	ldr	r2, [r3, #0]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133a8:	4b1b      	ldr	r3, [pc, #108]	; (8013418 <prvAddNewTaskToReadyList+0xd4>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d903      	bls.n	80133b8 <prvAddNewTaskToReadyList+0x74>
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b4:	4a18      	ldr	r2, [pc, #96]	; (8013418 <prvAddNewTaskToReadyList+0xd4>)
 80133b6:	6013      	str	r3, [r2, #0]
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133bc:	4613      	mov	r3, r2
 80133be:	009b      	lsls	r3, r3, #2
 80133c0:	4413      	add	r3, r2
 80133c2:	009b      	lsls	r3, r3, #2
 80133c4:	4a15      	ldr	r2, [pc, #84]	; (801341c <prvAddNewTaskToReadyList+0xd8>)
 80133c6:	441a      	add	r2, r3
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	3304      	adds	r3, #4
 80133cc:	4619      	mov	r1, r3
 80133ce:	4610      	mov	r0, r2
 80133d0:	f7fe fdd7 	bl	8011f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80133d4:	f001 fe6e 	bl	80150b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80133d8:	4b0d      	ldr	r3, [pc, #52]	; (8013410 <prvAddNewTaskToReadyList+0xcc>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d00e      	beq.n	80133fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80133e0:	4b0a      	ldr	r3, [pc, #40]	; (801340c <prvAddNewTaskToReadyList+0xc8>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d207      	bcs.n	80133fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80133ee:	4b0c      	ldr	r3, [pc, #48]	; (8013420 <prvAddNewTaskToReadyList+0xdc>)
 80133f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133f4:	601a      	str	r2, [r3, #0]
 80133f6:	f3bf 8f4f 	dsb	sy
 80133fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133fe:	bf00      	nop
 8013400:	3708      	adds	r7, #8
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	20001418 	.word	0x20001418
 801340c:	20000f44 	.word	0x20000f44
 8013410:	20001424 	.word	0x20001424
 8013414:	20001434 	.word	0x20001434
 8013418:	20001420 	.word	0x20001420
 801341c:	20000f48 	.word	0x20000f48
 8013420:	e000ed04 	.word	0xe000ed04

08013424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801342c:	2300      	movs	r3, #0
 801342e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d017      	beq.n	8013466 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013436:	4b13      	ldr	r3, [pc, #76]	; (8013484 <vTaskDelay+0x60>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d00a      	beq.n	8013454 <vTaskDelay+0x30>
	__asm volatile
 801343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013442:	f383 8811 	msr	BASEPRI, r3
 8013446:	f3bf 8f6f 	isb	sy
 801344a:	f3bf 8f4f 	dsb	sy
 801344e:	60bb      	str	r3, [r7, #8]
}
 8013450:	bf00      	nop
 8013452:	e7fe      	b.n	8013452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013454:	f000 f8f4 	bl	8013640 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013458:	2100      	movs	r1, #0
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f001 f928 	bl	80146b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013460:	f000 f8fc 	bl	801365c <xTaskResumeAll>
 8013464:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d107      	bne.n	801347c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801346c:	4b06      	ldr	r3, [pc, #24]	; (8013488 <vTaskDelay+0x64>)
 801346e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013472:	601a      	str	r2, [r3, #0]
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801347c:	bf00      	nop
 801347e:	3710      	adds	r7, #16
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}
 8013484:	20001440 	.word	0x20001440
 8013488:	e000ed04 	.word	0xe000ed04

0801348c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801348c:	b580      	push	{r7, lr}
 801348e:	b088      	sub	sp, #32
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d10a      	bne.n	80134b4 <eTaskGetState+0x28>
	__asm volatile
 801349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a2:	f383 8811 	msr	BASEPRI, r3
 80134a6:	f3bf 8f6f 	isb	sy
 80134aa:	f3bf 8f4f 	dsb	sy
 80134ae:	60bb      	str	r3, [r7, #8]
}
 80134b0:	bf00      	nop
 80134b2:	e7fe      	b.n	80134b2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80134b4:	4b23      	ldr	r3, [pc, #140]	; (8013544 <eTaskGetState+0xb8>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	69ba      	ldr	r2, [r7, #24]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d102      	bne.n	80134c4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80134be:	2300      	movs	r3, #0
 80134c0:	77fb      	strb	r3, [r7, #31]
 80134c2:	e03a      	b.n	801353a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80134c4:	f001 fdc6 	bl	8015054 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	695b      	ldr	r3, [r3, #20]
 80134cc:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80134ce:	4b1e      	ldr	r3, [pc, #120]	; (8013548 <eTaskGetState+0xbc>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80134d4:	4b1d      	ldr	r3, [pc, #116]	; (801354c <eTaskGetState+0xc0>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80134da:	f001 fdeb 	bl	80150b4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80134de:	697a      	ldr	r2, [r7, #20]
 80134e0:	693b      	ldr	r3, [r7, #16]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d003      	beq.n	80134ee <eTaskGetState+0x62>
 80134e6:	697a      	ldr	r2, [r7, #20]
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d102      	bne.n	80134f4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80134ee:	2302      	movs	r3, #2
 80134f0:	77fb      	strb	r3, [r7, #31]
 80134f2:	e022      	b.n	801353a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	4a16      	ldr	r2, [pc, #88]	; (8013550 <eTaskGetState+0xc4>)
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d112      	bne.n	8013522 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80134fc:	69bb      	ldr	r3, [r7, #24]
 80134fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013500:	2b00      	cmp	r3, #0
 8013502:	d10b      	bne.n	801351c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013504:	69bb      	ldr	r3, [r7, #24]
 8013506:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801350a:	b2db      	uxtb	r3, r3
 801350c:	2b01      	cmp	r3, #1
 801350e:	d102      	bne.n	8013516 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8013510:	2302      	movs	r3, #2
 8013512:	77fb      	strb	r3, [r7, #31]
 8013514:	e011      	b.n	801353a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8013516:	2303      	movs	r3, #3
 8013518:	77fb      	strb	r3, [r7, #31]
 801351a:	e00e      	b.n	801353a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801351c:	2302      	movs	r3, #2
 801351e:	77fb      	strb	r3, [r7, #31]
 8013520:	e00b      	b.n	801353a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	4a0b      	ldr	r2, [pc, #44]	; (8013554 <eTaskGetState+0xc8>)
 8013526:	4293      	cmp	r3, r2
 8013528:	d002      	beq.n	8013530 <eTaskGetState+0xa4>
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d102      	bne.n	8013536 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013530:	2304      	movs	r3, #4
 8013532:	77fb      	strb	r3, [r7, #31]
 8013534:	e001      	b.n	801353a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8013536:	2301      	movs	r3, #1
 8013538:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801353a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801353c:	4618      	mov	r0, r3
 801353e:	3720      	adds	r7, #32
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}
 8013544:	20000f44 	.word	0x20000f44
 8013548:	200013d0 	.word	0x200013d0
 801354c:	200013d4 	.word	0x200013d4
 8013550:	20001404 	.word	0x20001404
 8013554:	200013ec 	.word	0x200013ec

08013558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b08a      	sub	sp, #40	; 0x28
 801355c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801355e:	2300      	movs	r3, #0
 8013560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013562:	2300      	movs	r3, #0
 8013564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013566:	463a      	mov	r2, r7
 8013568:	1d39      	adds	r1, r7, #4
 801356a:	f107 0308 	add.w	r3, r7, #8
 801356e:	4618      	mov	r0, r3
 8013570:	f7fe fca6 	bl	8011ec0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013574:	6839      	ldr	r1, [r7, #0]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	68ba      	ldr	r2, [r7, #8]
 801357a:	9202      	str	r2, [sp, #8]
 801357c:	9301      	str	r3, [sp, #4]
 801357e:	2300      	movs	r3, #0
 8013580:	9300      	str	r3, [sp, #0]
 8013582:	2300      	movs	r3, #0
 8013584:	460a      	mov	r2, r1
 8013586:	4925      	ldr	r1, [pc, #148]	; (801361c <vTaskStartScheduler+0xc4>)
 8013588:	4825      	ldr	r0, [pc, #148]	; (8013620 <vTaskStartScheduler+0xc8>)
 801358a:	f7ff fd8f 	bl	80130ac <xTaskCreateStatic>
 801358e:	4603      	mov	r3, r0
 8013590:	4a24      	ldr	r2, [pc, #144]	; (8013624 <vTaskStartScheduler+0xcc>)
 8013592:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013594:	4b23      	ldr	r3, [pc, #140]	; (8013624 <vTaskStartScheduler+0xcc>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d002      	beq.n	80135a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801359c:	2301      	movs	r3, #1
 801359e:	617b      	str	r3, [r7, #20]
 80135a0:	e001      	b.n	80135a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80135a2:	2300      	movs	r3, #0
 80135a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d102      	bne.n	80135b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80135ac:	f001 f8d4 	bl	8014758 <xTimerCreateTimerTask>
 80135b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80135b2:	697b      	ldr	r3, [r7, #20]
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	d11e      	bne.n	80135f6 <vTaskStartScheduler+0x9e>
	__asm volatile
 80135b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135bc:	f383 8811 	msr	BASEPRI, r3
 80135c0:	f3bf 8f6f 	isb	sy
 80135c4:	f3bf 8f4f 	dsb	sy
 80135c8:	613b      	str	r3, [r7, #16]
}
 80135ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80135cc:	4b16      	ldr	r3, [pc, #88]	; (8013628 <vTaskStartScheduler+0xd0>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	3358      	adds	r3, #88	; 0x58
 80135d2:	4a16      	ldr	r2, [pc, #88]	; (801362c <vTaskStartScheduler+0xd4>)
 80135d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80135d6:	4b16      	ldr	r3, [pc, #88]	; (8013630 <vTaskStartScheduler+0xd8>)
 80135d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80135de:	4b15      	ldr	r3, [pc, #84]	; (8013634 <vTaskStartScheduler+0xdc>)
 80135e0:	2201      	movs	r2, #1
 80135e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80135e4:	4b14      	ldr	r3, [pc, #80]	; (8013638 <vTaskStartScheduler+0xe0>)
 80135e6:	2200      	movs	r2, #0
 80135e8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80135ea:	4b14      	ldr	r3, [pc, #80]	; (801363c <vTaskStartScheduler+0xe4>)
 80135ec:	2200      	movs	r2, #0
 80135ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80135f0:	f001 fc8e 	bl	8014f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80135f4:	e00e      	b.n	8013614 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135fc:	d10a      	bne.n	8013614 <vTaskStartScheduler+0xbc>
	__asm volatile
 80135fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013602:	f383 8811 	msr	BASEPRI, r3
 8013606:	f3bf 8f6f 	isb	sy
 801360a:	f3bf 8f4f 	dsb	sy
 801360e:	60fb      	str	r3, [r7, #12]
}
 8013610:	bf00      	nop
 8013612:	e7fe      	b.n	8013612 <vTaskStartScheduler+0xba>
}
 8013614:	bf00      	nop
 8013616:	3718      	adds	r7, #24
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	080196f0 	.word	0x080196f0
 8013620:	08013dc1 	.word	0x08013dc1
 8013624:	2000143c 	.word	0x2000143c
 8013628:	20000f44 	.word	0x20000f44
 801362c:	200001a0 	.word	0x200001a0
 8013630:	20001438 	.word	0x20001438
 8013634:	20001424 	.word	0x20001424
 8013638:	2000141c 	.word	0x2000141c
 801363c:	20010fe0 	.word	0x20010fe0

08013640 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013640:	b480      	push	{r7}
 8013642:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013644:	4b04      	ldr	r3, [pc, #16]	; (8013658 <vTaskSuspendAll+0x18>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	3301      	adds	r3, #1
 801364a:	4a03      	ldr	r2, [pc, #12]	; (8013658 <vTaskSuspendAll+0x18>)
 801364c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801364e:	bf00      	nop
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr
 8013658:	20001440 	.word	0x20001440

0801365c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b084      	sub	sp, #16
 8013660:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013662:	2300      	movs	r3, #0
 8013664:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013666:	2300      	movs	r3, #0
 8013668:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801366a:	4b42      	ldr	r3, [pc, #264]	; (8013774 <xTaskResumeAll+0x118>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d10a      	bne.n	8013688 <xTaskResumeAll+0x2c>
	__asm volatile
 8013672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013676:	f383 8811 	msr	BASEPRI, r3
 801367a:	f3bf 8f6f 	isb	sy
 801367e:	f3bf 8f4f 	dsb	sy
 8013682:	603b      	str	r3, [r7, #0]
}
 8013684:	bf00      	nop
 8013686:	e7fe      	b.n	8013686 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013688:	f001 fce4 	bl	8015054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801368c:	4b39      	ldr	r3, [pc, #228]	; (8013774 <xTaskResumeAll+0x118>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	3b01      	subs	r3, #1
 8013692:	4a38      	ldr	r2, [pc, #224]	; (8013774 <xTaskResumeAll+0x118>)
 8013694:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013696:	4b37      	ldr	r3, [pc, #220]	; (8013774 <xTaskResumeAll+0x118>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d162      	bne.n	8013764 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801369e:	4b36      	ldr	r3, [pc, #216]	; (8013778 <xTaskResumeAll+0x11c>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d05e      	beq.n	8013764 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80136a6:	e02f      	b.n	8013708 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136a8:	4b34      	ldr	r3, [pc, #208]	; (801377c <xTaskResumeAll+0x120>)
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	3318      	adds	r3, #24
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7fe fcc1 	bl	801203c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	3304      	adds	r3, #4
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fe fcbc 	bl	801203c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136c8:	4b2d      	ldr	r3, [pc, #180]	; (8013780 <xTaskResumeAll+0x124>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d903      	bls.n	80136d8 <xTaskResumeAll+0x7c>
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d4:	4a2a      	ldr	r2, [pc, #168]	; (8013780 <xTaskResumeAll+0x124>)
 80136d6:	6013      	str	r3, [r2, #0]
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136dc:	4613      	mov	r3, r2
 80136de:	009b      	lsls	r3, r3, #2
 80136e0:	4413      	add	r3, r2
 80136e2:	009b      	lsls	r3, r3, #2
 80136e4:	4a27      	ldr	r2, [pc, #156]	; (8013784 <xTaskResumeAll+0x128>)
 80136e6:	441a      	add	r2, r3
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	3304      	adds	r3, #4
 80136ec:	4619      	mov	r1, r3
 80136ee:	4610      	mov	r0, r2
 80136f0:	f7fe fc47 	bl	8011f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136f8:	4b23      	ldr	r3, [pc, #140]	; (8013788 <xTaskResumeAll+0x12c>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136fe:	429a      	cmp	r2, r3
 8013700:	d302      	bcc.n	8013708 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013702:	4b22      	ldr	r3, [pc, #136]	; (801378c <xTaskResumeAll+0x130>)
 8013704:	2201      	movs	r2, #1
 8013706:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013708:	4b1c      	ldr	r3, [pc, #112]	; (801377c <xTaskResumeAll+0x120>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d1cb      	bne.n	80136a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d001      	beq.n	801371a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013716:	f000 fce1 	bl	80140dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801371a:	4b1d      	ldr	r3, [pc, #116]	; (8013790 <xTaskResumeAll+0x134>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d010      	beq.n	8013748 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013726:	f000 f8d7 	bl	80138d8 <xTaskIncrementTick>
 801372a:	4603      	mov	r3, r0
 801372c:	2b00      	cmp	r3, #0
 801372e:	d002      	beq.n	8013736 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013730:	4b16      	ldr	r3, [pc, #88]	; (801378c <xTaskResumeAll+0x130>)
 8013732:	2201      	movs	r2, #1
 8013734:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	3b01      	subs	r3, #1
 801373a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1f1      	bne.n	8013726 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013742:	4b13      	ldr	r3, [pc, #76]	; (8013790 <xTaskResumeAll+0x134>)
 8013744:	2200      	movs	r2, #0
 8013746:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013748:	4b10      	ldr	r3, [pc, #64]	; (801378c <xTaskResumeAll+0x130>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d009      	beq.n	8013764 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013750:	2301      	movs	r3, #1
 8013752:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013754:	4b0f      	ldr	r3, [pc, #60]	; (8013794 <xTaskResumeAll+0x138>)
 8013756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801375a:	601a      	str	r2, [r3, #0]
 801375c:	f3bf 8f4f 	dsb	sy
 8013760:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013764:	f001 fca6 	bl	80150b4 <vPortExitCritical>

	return xAlreadyYielded;
 8013768:	68bb      	ldr	r3, [r7, #8]
}
 801376a:	4618      	mov	r0, r3
 801376c:	3710      	adds	r7, #16
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	20001440 	.word	0x20001440
 8013778:	20001418 	.word	0x20001418
 801377c:	200013d8 	.word	0x200013d8
 8013780:	20001420 	.word	0x20001420
 8013784:	20000f48 	.word	0x20000f48
 8013788:	20000f44 	.word	0x20000f44
 801378c:	2000142c 	.word	0x2000142c
 8013790:	20001428 	.word	0x20001428
 8013794:	e000ed04 	.word	0xe000ed04

08013798 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013798:	b480      	push	{r7}
 801379a:	b083      	sub	sp, #12
 801379c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801379e:	4b05      	ldr	r3, [pc, #20]	; (80137b4 <xTaskGetTickCount+0x1c>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80137a4:	687b      	ldr	r3, [r7, #4]
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	370c      	adds	r7, #12
 80137aa:	46bd      	mov	sp, r7
 80137ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b0:	4770      	bx	lr
 80137b2:	bf00      	nop
 80137b4:	2000141c 	.word	0x2000141c

080137b8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b086      	sub	sp, #24
 80137bc:	af00      	add	r7, sp, #0
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	60b9      	str	r1, [r7, #8]
 80137c2:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80137c4:	2300      	movs	r3, #0
 80137c6:	617b      	str	r3, [r7, #20]
 80137c8:	2338      	movs	r3, #56	; 0x38
 80137ca:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80137cc:	f7ff ff38 	bl	8013640 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80137d0:	4b3a      	ldr	r3, [pc, #232]	; (80138bc <uxTaskGetSystemState+0x104>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	68ba      	ldr	r2, [r7, #8]
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d369      	bcc.n	80138ae <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	3b01      	subs	r3, #1
 80137de:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80137e0:	697a      	ldr	r2, [r7, #20]
 80137e2:	4613      	mov	r3, r2
 80137e4:	00db      	lsls	r3, r3, #3
 80137e6:	4413      	add	r3, r2
 80137e8:	009b      	lsls	r3, r3, #2
 80137ea:	461a      	mov	r2, r3
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	1898      	adds	r0, r3, r2
 80137f0:	693a      	ldr	r2, [r7, #16]
 80137f2:	4613      	mov	r3, r2
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	4413      	add	r3, r2
 80137f8:	009b      	lsls	r3, r3, #2
 80137fa:	4a31      	ldr	r2, [pc, #196]	; (80138c0 <uxTaskGetSystemState+0x108>)
 80137fc:	4413      	add	r3, r2
 80137fe:	2201      	movs	r2, #1
 8013800:	4619      	mov	r1, r3
 8013802:	f000 fbc9 	bl	8013f98 <prvListTasksWithinSingleList>
 8013806:	4602      	mov	r2, r0
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	4413      	add	r3, r2
 801380c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d1e2      	bne.n	80137da <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8013814:	697a      	ldr	r2, [r7, #20]
 8013816:	4613      	mov	r3, r2
 8013818:	00db      	lsls	r3, r3, #3
 801381a:	4413      	add	r3, r2
 801381c:	009b      	lsls	r3, r3, #2
 801381e:	461a      	mov	r2, r3
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	4413      	add	r3, r2
 8013824:	4a27      	ldr	r2, [pc, #156]	; (80138c4 <uxTaskGetSystemState+0x10c>)
 8013826:	6811      	ldr	r1, [r2, #0]
 8013828:	2202      	movs	r2, #2
 801382a:	4618      	mov	r0, r3
 801382c:	f000 fbb4 	bl	8013f98 <prvListTasksWithinSingleList>
 8013830:	4602      	mov	r2, r0
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	4413      	add	r3, r2
 8013836:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	4613      	mov	r3, r2
 801383c:	00db      	lsls	r3, r3, #3
 801383e:	4413      	add	r3, r2
 8013840:	009b      	lsls	r3, r3, #2
 8013842:	461a      	mov	r2, r3
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	4413      	add	r3, r2
 8013848:	4a1f      	ldr	r2, [pc, #124]	; (80138c8 <uxTaskGetSystemState+0x110>)
 801384a:	6811      	ldr	r1, [r2, #0]
 801384c:	2202      	movs	r2, #2
 801384e:	4618      	mov	r0, r3
 8013850:	f000 fba2 	bl	8013f98 <prvListTasksWithinSingleList>
 8013854:	4602      	mov	r2, r0
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	4413      	add	r3, r2
 801385a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 801385c:	697a      	ldr	r2, [r7, #20]
 801385e:	4613      	mov	r3, r2
 8013860:	00db      	lsls	r3, r3, #3
 8013862:	4413      	add	r3, r2
 8013864:	009b      	lsls	r3, r3, #2
 8013866:	461a      	mov	r2, r3
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	4413      	add	r3, r2
 801386c:	2204      	movs	r2, #4
 801386e:	4917      	ldr	r1, [pc, #92]	; (80138cc <uxTaskGetSystemState+0x114>)
 8013870:	4618      	mov	r0, r3
 8013872:	f000 fb91 	bl	8013f98 <prvListTasksWithinSingleList>
 8013876:	4602      	mov	r2, r0
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	4413      	add	r3, r2
 801387c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 801387e:	697a      	ldr	r2, [r7, #20]
 8013880:	4613      	mov	r3, r2
 8013882:	00db      	lsls	r3, r3, #3
 8013884:	4413      	add	r3, r2
 8013886:	009b      	lsls	r3, r3, #2
 8013888:	461a      	mov	r2, r3
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	4413      	add	r3, r2
 801388e:	2203      	movs	r2, #3
 8013890:	490f      	ldr	r1, [pc, #60]	; (80138d0 <uxTaskGetSystemState+0x118>)
 8013892:	4618      	mov	r0, r3
 8013894:	f000 fb80 	bl	8013f98 <prvListTasksWithinSingleList>
 8013898:	4602      	mov	r2, r0
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	4413      	add	r3, r2
 801389e:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d003      	beq.n	80138ae <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80138a6:	4b0b      	ldr	r3, [pc, #44]	; (80138d4 <uxTaskGetSystemState+0x11c>)
 80138a8:	681a      	ldr	r2, [r3, #0]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80138ae:	f7ff fed5 	bl	801365c <xTaskResumeAll>

		return uxTask;
 80138b2:	697b      	ldr	r3, [r7, #20]
	}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3718      	adds	r7, #24
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	20001418 	.word	0x20001418
 80138c0:	20000f48 	.word	0x20000f48
 80138c4:	200013d0 	.word	0x200013d0
 80138c8:	200013d4 	.word	0x200013d4
 80138cc:	200013ec 	.word	0x200013ec
 80138d0:	20001404 	.word	0x20001404
 80138d4:	20010fe0 	.word	0x20010fe0

080138d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b086      	sub	sp, #24
 80138dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80138de:	2300      	movs	r3, #0
 80138e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80138e2:	4b4f      	ldr	r3, [pc, #316]	; (8013a20 <xTaskIncrementTick+0x148>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f040 808f 	bne.w	8013a0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80138ec:	4b4d      	ldr	r3, [pc, #308]	; (8013a24 <xTaskIncrementTick+0x14c>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	3301      	adds	r3, #1
 80138f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80138f4:	4a4b      	ldr	r2, [pc, #300]	; (8013a24 <xTaskIncrementTick+0x14c>)
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d120      	bne.n	8013942 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013900:	4b49      	ldr	r3, [pc, #292]	; (8013a28 <xTaskIncrementTick+0x150>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d00a      	beq.n	8013920 <xTaskIncrementTick+0x48>
	__asm volatile
 801390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801390e:	f383 8811 	msr	BASEPRI, r3
 8013912:	f3bf 8f6f 	isb	sy
 8013916:	f3bf 8f4f 	dsb	sy
 801391a:	603b      	str	r3, [r7, #0]
}
 801391c:	bf00      	nop
 801391e:	e7fe      	b.n	801391e <xTaskIncrementTick+0x46>
 8013920:	4b41      	ldr	r3, [pc, #260]	; (8013a28 <xTaskIncrementTick+0x150>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	60fb      	str	r3, [r7, #12]
 8013926:	4b41      	ldr	r3, [pc, #260]	; (8013a2c <xTaskIncrementTick+0x154>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	4a3f      	ldr	r2, [pc, #252]	; (8013a28 <xTaskIncrementTick+0x150>)
 801392c:	6013      	str	r3, [r2, #0]
 801392e:	4a3f      	ldr	r2, [pc, #252]	; (8013a2c <xTaskIncrementTick+0x154>)
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	6013      	str	r3, [r2, #0]
 8013934:	4b3e      	ldr	r3, [pc, #248]	; (8013a30 <xTaskIncrementTick+0x158>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	3301      	adds	r3, #1
 801393a:	4a3d      	ldr	r2, [pc, #244]	; (8013a30 <xTaskIncrementTick+0x158>)
 801393c:	6013      	str	r3, [r2, #0]
 801393e:	f000 fbcd 	bl	80140dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013942:	4b3c      	ldr	r3, [pc, #240]	; (8013a34 <xTaskIncrementTick+0x15c>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	693a      	ldr	r2, [r7, #16]
 8013948:	429a      	cmp	r2, r3
 801394a:	d349      	bcc.n	80139e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801394c:	4b36      	ldr	r3, [pc, #216]	; (8013a28 <xTaskIncrementTick+0x150>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d104      	bne.n	8013960 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013956:	4b37      	ldr	r3, [pc, #220]	; (8013a34 <xTaskIncrementTick+0x15c>)
 8013958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801395c:	601a      	str	r2, [r3, #0]
					break;
 801395e:	e03f      	b.n	80139e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013960:	4b31      	ldr	r3, [pc, #196]	; (8013a28 <xTaskIncrementTick+0x150>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	68db      	ldr	r3, [r3, #12]
 8013968:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	685b      	ldr	r3, [r3, #4]
 801396e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013970:	693a      	ldr	r2, [r7, #16]
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	429a      	cmp	r2, r3
 8013976:	d203      	bcs.n	8013980 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013978:	4a2e      	ldr	r2, [pc, #184]	; (8013a34 <xTaskIncrementTick+0x15c>)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801397e:	e02f      	b.n	80139e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	3304      	adds	r3, #4
 8013984:	4618      	mov	r0, r3
 8013986:	f7fe fb59 	bl	801203c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801398e:	2b00      	cmp	r3, #0
 8013990:	d004      	beq.n	801399c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	3318      	adds	r3, #24
 8013996:	4618      	mov	r0, r3
 8013998:	f7fe fb50 	bl	801203c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139a0:	4b25      	ldr	r3, [pc, #148]	; (8013a38 <xTaskIncrementTick+0x160>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d903      	bls.n	80139b0 <xTaskIncrementTick+0xd8>
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ac:	4a22      	ldr	r2, [pc, #136]	; (8013a38 <xTaskIncrementTick+0x160>)
 80139ae:	6013      	str	r3, [r2, #0]
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139b4:	4613      	mov	r3, r2
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	4413      	add	r3, r2
 80139ba:	009b      	lsls	r3, r3, #2
 80139bc:	4a1f      	ldr	r2, [pc, #124]	; (8013a3c <xTaskIncrementTick+0x164>)
 80139be:	441a      	add	r2, r3
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	3304      	adds	r3, #4
 80139c4:	4619      	mov	r1, r3
 80139c6:	4610      	mov	r0, r2
 80139c8:	f7fe fadb 	bl	8011f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139d0:	4b1b      	ldr	r3, [pc, #108]	; (8013a40 <xTaskIncrementTick+0x168>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d3b8      	bcc.n	801394c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80139da:	2301      	movs	r3, #1
 80139dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80139de:	e7b5      	b.n	801394c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80139e0:	4b17      	ldr	r3, [pc, #92]	; (8013a40 <xTaskIncrementTick+0x168>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139e6:	4915      	ldr	r1, [pc, #84]	; (8013a3c <xTaskIncrementTick+0x164>)
 80139e8:	4613      	mov	r3, r2
 80139ea:	009b      	lsls	r3, r3, #2
 80139ec:	4413      	add	r3, r2
 80139ee:	009b      	lsls	r3, r3, #2
 80139f0:	440b      	add	r3, r1
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d901      	bls.n	80139fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80139f8:	2301      	movs	r3, #1
 80139fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80139fc:	4b11      	ldr	r3, [pc, #68]	; (8013a44 <xTaskIncrementTick+0x16c>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d007      	beq.n	8013a14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013a04:	2301      	movs	r3, #1
 8013a06:	617b      	str	r3, [r7, #20]
 8013a08:	e004      	b.n	8013a14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013a0a:	4b0f      	ldr	r3, [pc, #60]	; (8013a48 <xTaskIncrementTick+0x170>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	3301      	adds	r3, #1
 8013a10:	4a0d      	ldr	r2, [pc, #52]	; (8013a48 <xTaskIncrementTick+0x170>)
 8013a12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013a14:	697b      	ldr	r3, [r7, #20]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3718      	adds	r7, #24
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	20001440 	.word	0x20001440
 8013a24:	2000141c 	.word	0x2000141c
 8013a28:	200013d0 	.word	0x200013d0
 8013a2c:	200013d4 	.word	0x200013d4
 8013a30:	20001430 	.word	0x20001430
 8013a34:	20001438 	.word	0x20001438
 8013a38:	20001420 	.word	0x20001420
 8013a3c:	20000f48 	.word	0x20000f48
 8013a40:	20000f44 	.word	0x20000f44
 8013a44:	2000142c 	.word	0x2000142c
 8013a48:	20001428 	.word	0x20001428

08013a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013a52:	4b36      	ldr	r3, [pc, #216]	; (8013b2c <vTaskSwitchContext+0xe0>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d003      	beq.n	8013a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013a5a:	4b35      	ldr	r3, [pc, #212]	; (8013b30 <vTaskSwitchContext+0xe4>)
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013a60:	e05e      	b.n	8013b20 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8013a62:	4b33      	ldr	r3, [pc, #204]	; (8013b30 <vTaskSwitchContext+0xe4>)
 8013a64:	2200      	movs	r2, #0
 8013a66:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013a68:	4b32      	ldr	r3, [pc, #200]	; (8013b34 <vTaskSwitchContext+0xe8>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	4a32      	ldr	r2, [pc, #200]	; (8013b38 <vTaskSwitchContext+0xec>)
 8013a6e:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8013a70:	4b31      	ldr	r3, [pc, #196]	; (8013b38 <vTaskSwitchContext+0xec>)
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	4b31      	ldr	r3, [pc, #196]	; (8013b3c <vTaskSwitchContext+0xf0>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d909      	bls.n	8013a90 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8013a7c:	4b30      	ldr	r3, [pc, #192]	; (8013b40 <vTaskSwitchContext+0xf4>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013a82:	4a2d      	ldr	r2, [pc, #180]	; (8013b38 <vTaskSwitchContext+0xec>)
 8013a84:	6810      	ldr	r0, [r2, #0]
 8013a86:	4a2d      	ldr	r2, [pc, #180]	; (8013b3c <vTaskSwitchContext+0xf0>)
 8013a88:	6812      	ldr	r2, [r2, #0]
 8013a8a:	1a82      	subs	r2, r0, r2
 8013a8c:	440a      	add	r2, r1
 8013a8e:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8013a90:	4b29      	ldr	r3, [pc, #164]	; (8013b38 <vTaskSwitchContext+0xec>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	4a29      	ldr	r2, [pc, #164]	; (8013b3c <vTaskSwitchContext+0xf0>)
 8013a96:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a98:	4b2a      	ldr	r3, [pc, #168]	; (8013b44 <vTaskSwitchContext+0xf8>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	60fb      	str	r3, [r7, #12]
 8013a9e:	e010      	b.n	8013ac2 <vTaskSwitchContext+0x76>
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d10a      	bne.n	8013abc <vTaskSwitchContext+0x70>
	__asm volatile
 8013aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aaa:	f383 8811 	msr	BASEPRI, r3
 8013aae:	f3bf 8f6f 	isb	sy
 8013ab2:	f3bf 8f4f 	dsb	sy
 8013ab6:	607b      	str	r3, [r7, #4]
}
 8013ab8:	bf00      	nop
 8013aba:	e7fe      	b.n	8013aba <vTaskSwitchContext+0x6e>
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	3b01      	subs	r3, #1
 8013ac0:	60fb      	str	r3, [r7, #12]
 8013ac2:	4921      	ldr	r1, [pc, #132]	; (8013b48 <vTaskSwitchContext+0xfc>)
 8013ac4:	68fa      	ldr	r2, [r7, #12]
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	009b      	lsls	r3, r3, #2
 8013aca:	4413      	add	r3, r2
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	440b      	add	r3, r1
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d0e4      	beq.n	8013aa0 <vTaskSwitchContext+0x54>
 8013ad6:	68fa      	ldr	r2, [r7, #12]
 8013ad8:	4613      	mov	r3, r2
 8013ada:	009b      	lsls	r3, r3, #2
 8013adc:	4413      	add	r3, r2
 8013ade:	009b      	lsls	r3, r3, #2
 8013ae0:	4a19      	ldr	r2, [pc, #100]	; (8013b48 <vTaskSwitchContext+0xfc>)
 8013ae2:	4413      	add	r3, r2
 8013ae4:	60bb      	str	r3, [r7, #8]
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	685b      	ldr	r3, [r3, #4]
 8013aea:	685a      	ldr	r2, [r3, #4]
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	605a      	str	r2, [r3, #4]
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	685a      	ldr	r2, [r3, #4]
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	3308      	adds	r3, #8
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d104      	bne.n	8013b06 <vTaskSwitchContext+0xba>
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	685b      	ldr	r3, [r3, #4]
 8013b00:	685a      	ldr	r2, [r3, #4]
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	605a      	str	r2, [r3, #4]
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	685b      	ldr	r3, [r3, #4]
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	4a0c      	ldr	r2, [pc, #48]	; (8013b40 <vTaskSwitchContext+0xf4>)
 8013b0e:	6013      	str	r3, [r2, #0]
 8013b10:	4a0c      	ldr	r2, [pc, #48]	; (8013b44 <vTaskSwitchContext+0xf8>)
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013b16:	4b0a      	ldr	r3, [pc, #40]	; (8013b40 <vTaskSwitchContext+0xf4>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	3358      	adds	r3, #88	; 0x58
 8013b1c:	4a0b      	ldr	r2, [pc, #44]	; (8013b4c <vTaskSwitchContext+0x100>)
 8013b1e:	6013      	str	r3, [r2, #0]
}
 8013b20:	bf00      	nop
 8013b22:	3714      	adds	r7, #20
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr
 8013b2c:	20001440 	.word	0x20001440
 8013b30:	2000142c 	.word	0x2000142c
 8013b34:	20010fe0 	.word	0x20010fe0
 8013b38:	20001448 	.word	0x20001448
 8013b3c:	20001444 	.word	0x20001444
 8013b40:	20000f44 	.word	0x20000f44
 8013b44:	20001420 	.word	0x20001420
 8013b48:	20000f48 	.word	0x20000f48
 8013b4c:	200001a0 	.word	0x200001a0

08013b50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b084      	sub	sp, #16
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d10a      	bne.n	8013b76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b64:	f383 8811 	msr	BASEPRI, r3
 8013b68:	f3bf 8f6f 	isb	sy
 8013b6c:	f3bf 8f4f 	dsb	sy
 8013b70:	60fb      	str	r3, [r7, #12]
}
 8013b72:	bf00      	nop
 8013b74:	e7fe      	b.n	8013b74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013b76:	4b07      	ldr	r3, [pc, #28]	; (8013b94 <vTaskPlaceOnEventList+0x44>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	3318      	adds	r3, #24
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f7fe fa23 	bl	8011fca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013b84:	2101      	movs	r1, #1
 8013b86:	6838      	ldr	r0, [r7, #0]
 8013b88:	f000 fd92 	bl	80146b0 <prvAddCurrentTaskToDelayedList>
}
 8013b8c:	bf00      	nop
 8013b8e:	3710      	adds	r7, #16
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	20000f44 	.word	0x20000f44

08013b98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b086      	sub	sp, #24
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d10a      	bne.n	8013bc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bae:	f383 8811 	msr	BASEPRI, r3
 8013bb2:	f3bf 8f6f 	isb	sy
 8013bb6:	f3bf 8f4f 	dsb	sy
 8013bba:	617b      	str	r3, [r7, #20]
}
 8013bbc:	bf00      	nop
 8013bbe:	e7fe      	b.n	8013bbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013bc0:	4b0a      	ldr	r3, [pc, #40]	; (8013bec <vTaskPlaceOnEventListRestricted+0x54>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	3318      	adds	r3, #24
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	68f8      	ldr	r0, [r7, #12]
 8013bca:	f7fe f9da 	bl	8011f82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d002      	beq.n	8013bda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013bda:	6879      	ldr	r1, [r7, #4]
 8013bdc:	68b8      	ldr	r0, [r7, #8]
 8013bde:	f000 fd67 	bl	80146b0 <prvAddCurrentTaskToDelayedList>
	}
 8013be2:	bf00      	nop
 8013be4:	3718      	adds	r7, #24
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}
 8013bea:	bf00      	nop
 8013bec:	20000f44 	.word	0x20000f44

08013bf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b086      	sub	sp, #24
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	68db      	ldr	r3, [r3, #12]
 8013bfc:	68db      	ldr	r3, [r3, #12]
 8013bfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d10a      	bne.n	8013c1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0a:	f383 8811 	msr	BASEPRI, r3
 8013c0e:	f3bf 8f6f 	isb	sy
 8013c12:	f3bf 8f4f 	dsb	sy
 8013c16:	60fb      	str	r3, [r7, #12]
}
 8013c18:	bf00      	nop
 8013c1a:	e7fe      	b.n	8013c1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	3318      	adds	r3, #24
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fe fa0b 	bl	801203c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c26:	4b1e      	ldr	r3, [pc, #120]	; (8013ca0 <xTaskRemoveFromEventList+0xb0>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d11d      	bne.n	8013c6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	3304      	adds	r3, #4
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fe fa02 	bl	801203c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c3c:	4b19      	ldr	r3, [pc, #100]	; (8013ca4 <xTaskRemoveFromEventList+0xb4>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d903      	bls.n	8013c4c <xTaskRemoveFromEventList+0x5c>
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c48:	4a16      	ldr	r2, [pc, #88]	; (8013ca4 <xTaskRemoveFromEventList+0xb4>)
 8013c4a:	6013      	str	r3, [r2, #0]
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c50:	4613      	mov	r3, r2
 8013c52:	009b      	lsls	r3, r3, #2
 8013c54:	4413      	add	r3, r2
 8013c56:	009b      	lsls	r3, r3, #2
 8013c58:	4a13      	ldr	r2, [pc, #76]	; (8013ca8 <xTaskRemoveFromEventList+0xb8>)
 8013c5a:	441a      	add	r2, r3
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	3304      	adds	r3, #4
 8013c60:	4619      	mov	r1, r3
 8013c62:	4610      	mov	r0, r2
 8013c64:	f7fe f98d 	bl	8011f82 <vListInsertEnd>
 8013c68:	e005      	b.n	8013c76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	3318      	adds	r3, #24
 8013c6e:	4619      	mov	r1, r3
 8013c70:	480e      	ldr	r0, [pc, #56]	; (8013cac <xTaskRemoveFromEventList+0xbc>)
 8013c72:	f7fe f986 	bl	8011f82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013c76:	693b      	ldr	r3, [r7, #16]
 8013c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c7a:	4b0d      	ldr	r3, [pc, #52]	; (8013cb0 <xTaskRemoveFromEventList+0xc0>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c80:	429a      	cmp	r2, r3
 8013c82:	d905      	bls.n	8013c90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013c84:	2301      	movs	r3, #1
 8013c86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013c88:	4b0a      	ldr	r3, [pc, #40]	; (8013cb4 <xTaskRemoveFromEventList+0xc4>)
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	601a      	str	r2, [r3, #0]
 8013c8e:	e001      	b.n	8013c94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013c90:	2300      	movs	r3, #0
 8013c92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013c94:	697b      	ldr	r3, [r7, #20]
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3718      	adds	r7, #24
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	20001440 	.word	0x20001440
 8013ca4:	20001420 	.word	0x20001420
 8013ca8:	20000f48 	.word	0x20000f48
 8013cac:	200013d8 	.word	0x200013d8
 8013cb0:	20000f44 	.word	0x20000f44
 8013cb4:	2000142c 	.word	0x2000142c

08013cb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013cc0:	4b06      	ldr	r3, [pc, #24]	; (8013cdc <vTaskInternalSetTimeOutState+0x24>)
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013cc8:	4b05      	ldr	r3, [pc, #20]	; (8013ce0 <vTaskInternalSetTimeOutState+0x28>)
 8013cca:	681a      	ldr	r2, [r3, #0]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	605a      	str	r2, [r3, #4]
}
 8013cd0:	bf00      	nop
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr
 8013cdc:	20001430 	.word	0x20001430
 8013ce0:	2000141c 	.word	0x2000141c

08013ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b088      	sub	sp, #32
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d10a      	bne.n	8013d0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf8:	f383 8811 	msr	BASEPRI, r3
 8013cfc:	f3bf 8f6f 	isb	sy
 8013d00:	f3bf 8f4f 	dsb	sy
 8013d04:	613b      	str	r3, [r7, #16]
}
 8013d06:	bf00      	nop
 8013d08:	e7fe      	b.n	8013d08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d10a      	bne.n	8013d26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d14:	f383 8811 	msr	BASEPRI, r3
 8013d18:	f3bf 8f6f 	isb	sy
 8013d1c:	f3bf 8f4f 	dsb	sy
 8013d20:	60fb      	str	r3, [r7, #12]
}
 8013d22:	bf00      	nop
 8013d24:	e7fe      	b.n	8013d24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013d26:	f001 f995 	bl	8015054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013d2a:	4b1d      	ldr	r3, [pc, #116]	; (8013da0 <xTaskCheckForTimeOut+0xbc>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	685b      	ldr	r3, [r3, #4]
 8013d34:	69ba      	ldr	r2, [r7, #24]
 8013d36:	1ad3      	subs	r3, r2, r3
 8013d38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d42:	d102      	bne.n	8013d4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013d44:	2300      	movs	r3, #0
 8013d46:	61fb      	str	r3, [r7, #28]
 8013d48:	e023      	b.n	8013d92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	4b15      	ldr	r3, [pc, #84]	; (8013da4 <xTaskCheckForTimeOut+0xc0>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d007      	beq.n	8013d66 <xTaskCheckForTimeOut+0x82>
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	685b      	ldr	r3, [r3, #4]
 8013d5a:	69ba      	ldr	r2, [r7, #24]
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d302      	bcc.n	8013d66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013d60:	2301      	movs	r3, #1
 8013d62:	61fb      	str	r3, [r7, #28]
 8013d64:	e015      	b.n	8013d92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	697a      	ldr	r2, [r7, #20]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d20b      	bcs.n	8013d88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	1ad2      	subs	r2, r2, r3
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f7ff ff9b 	bl	8013cb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013d82:	2300      	movs	r3, #0
 8013d84:	61fb      	str	r3, [r7, #28]
 8013d86:	e004      	b.n	8013d92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013d8e:	2301      	movs	r3, #1
 8013d90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013d92:	f001 f98f 	bl	80150b4 <vPortExitCritical>

	return xReturn;
 8013d96:	69fb      	ldr	r3, [r7, #28]
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3720      	adds	r7, #32
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	2000141c 	.word	0x2000141c
 8013da4:	20001430 	.word	0x20001430

08013da8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013da8:	b480      	push	{r7}
 8013daa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013dac:	4b03      	ldr	r3, [pc, #12]	; (8013dbc <vTaskMissedYield+0x14>)
 8013dae:	2201      	movs	r2, #1
 8013db0:	601a      	str	r2, [r3, #0]
}
 8013db2:	bf00      	nop
 8013db4:	46bd      	mov	sp, r7
 8013db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dba:	4770      	bx	lr
 8013dbc:	2000142c 	.word	0x2000142c

08013dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013dc8:	f000 f852 	bl	8013e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013dcc:	4b06      	ldr	r3, [pc, #24]	; (8013de8 <prvIdleTask+0x28>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d9f9      	bls.n	8013dc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013dd4:	4b05      	ldr	r3, [pc, #20]	; (8013dec <prvIdleTask+0x2c>)
 8013dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dda:	601a      	str	r2, [r3, #0]
 8013ddc:	f3bf 8f4f 	dsb	sy
 8013de0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013de4:	e7f0      	b.n	8013dc8 <prvIdleTask+0x8>
 8013de6:	bf00      	nop
 8013de8:	20000f48 	.word	0x20000f48
 8013dec:	e000ed04 	.word	0xe000ed04

08013df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b082      	sub	sp, #8
 8013df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013df6:	2300      	movs	r3, #0
 8013df8:	607b      	str	r3, [r7, #4]
 8013dfa:	e00c      	b.n	8013e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	4613      	mov	r3, r2
 8013e00:	009b      	lsls	r3, r3, #2
 8013e02:	4413      	add	r3, r2
 8013e04:	009b      	lsls	r3, r3, #2
 8013e06:	4a12      	ldr	r2, [pc, #72]	; (8013e50 <prvInitialiseTaskLists+0x60>)
 8013e08:	4413      	add	r3, r2
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7fe f88c 	bl	8011f28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	3301      	adds	r3, #1
 8013e14:	607b      	str	r3, [r7, #4]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	2b37      	cmp	r3, #55	; 0x37
 8013e1a:	d9ef      	bls.n	8013dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013e1c:	480d      	ldr	r0, [pc, #52]	; (8013e54 <prvInitialiseTaskLists+0x64>)
 8013e1e:	f7fe f883 	bl	8011f28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013e22:	480d      	ldr	r0, [pc, #52]	; (8013e58 <prvInitialiseTaskLists+0x68>)
 8013e24:	f7fe f880 	bl	8011f28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013e28:	480c      	ldr	r0, [pc, #48]	; (8013e5c <prvInitialiseTaskLists+0x6c>)
 8013e2a:	f7fe f87d 	bl	8011f28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013e2e:	480c      	ldr	r0, [pc, #48]	; (8013e60 <prvInitialiseTaskLists+0x70>)
 8013e30:	f7fe f87a 	bl	8011f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013e34:	480b      	ldr	r0, [pc, #44]	; (8013e64 <prvInitialiseTaskLists+0x74>)
 8013e36:	f7fe f877 	bl	8011f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013e3a:	4b0b      	ldr	r3, [pc, #44]	; (8013e68 <prvInitialiseTaskLists+0x78>)
 8013e3c:	4a05      	ldr	r2, [pc, #20]	; (8013e54 <prvInitialiseTaskLists+0x64>)
 8013e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013e40:	4b0a      	ldr	r3, [pc, #40]	; (8013e6c <prvInitialiseTaskLists+0x7c>)
 8013e42:	4a05      	ldr	r2, [pc, #20]	; (8013e58 <prvInitialiseTaskLists+0x68>)
 8013e44:	601a      	str	r2, [r3, #0]
}
 8013e46:	bf00      	nop
 8013e48:	3708      	adds	r7, #8
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	20000f48 	.word	0x20000f48
 8013e54:	200013a8 	.word	0x200013a8
 8013e58:	200013bc 	.word	0x200013bc
 8013e5c:	200013d8 	.word	0x200013d8
 8013e60:	200013ec 	.word	0x200013ec
 8013e64:	20001404 	.word	0x20001404
 8013e68:	200013d0 	.word	0x200013d0
 8013e6c:	200013d4 	.word	0x200013d4

08013e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e76:	e019      	b.n	8013eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013e78:	f001 f8ec 	bl	8015054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e7c:	4b10      	ldr	r3, [pc, #64]	; (8013ec0 <prvCheckTasksWaitingTermination+0x50>)
 8013e7e:	68db      	ldr	r3, [r3, #12]
 8013e80:	68db      	ldr	r3, [r3, #12]
 8013e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	3304      	adds	r3, #4
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7fe f8d7 	bl	801203c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013e8e:	4b0d      	ldr	r3, [pc, #52]	; (8013ec4 <prvCheckTasksWaitingTermination+0x54>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	3b01      	subs	r3, #1
 8013e94:	4a0b      	ldr	r2, [pc, #44]	; (8013ec4 <prvCheckTasksWaitingTermination+0x54>)
 8013e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013e98:	4b0b      	ldr	r3, [pc, #44]	; (8013ec8 <prvCheckTasksWaitingTermination+0x58>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3b01      	subs	r3, #1
 8013e9e:	4a0a      	ldr	r2, [pc, #40]	; (8013ec8 <prvCheckTasksWaitingTermination+0x58>)
 8013ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013ea2:	f001 f907 	bl	80150b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f000 f8e4 	bl	8014074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013eac:	4b06      	ldr	r3, [pc, #24]	; (8013ec8 <prvCheckTasksWaitingTermination+0x58>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d1e1      	bne.n	8013e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013eb4:	bf00      	nop
 8013eb6:	bf00      	nop
 8013eb8:	3708      	adds	r7, #8
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	200013ec 	.word	0x200013ec
 8013ec4:	20001418 	.word	0x20001418
 8013ec8:	20001400 	.word	0x20001400

08013ecc <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b086      	sub	sp, #24
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	60f8      	str	r0, [r7, #12]
 8013ed4:	60b9      	str	r1, [r7, #8]
 8013ed6:	607a      	str	r2, [r7, #4]
 8013ed8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d102      	bne.n	8013ee6 <vTaskGetInfo+0x1a>
 8013ee0:	4b2c      	ldr	r3, [pc, #176]	; (8013f94 <vTaskGetInfo+0xc8>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	e000      	b.n	8013ee8 <vTaskGetInfo+0x1c>
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	697a      	ldr	r2, [r7, #20]
 8013eee:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8013f22:	78fb      	ldrb	r3, [r7, #3]
 8013f24:	2b05      	cmp	r3, #5
 8013f26:	d01a      	beq.n	8013f5e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8013f28:	4b1a      	ldr	r3, [pc, #104]	; (8013f94 <vTaskGetInfo+0xc8>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	697a      	ldr	r2, [r7, #20]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d103      	bne.n	8013f3a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	2200      	movs	r2, #0
 8013f36:	731a      	strb	r2, [r3, #12]
 8013f38:	e018      	b.n	8013f6c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	78fa      	ldrb	r2, [r7, #3]
 8013f3e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8013f40:	78fb      	ldrb	r3, [r7, #3]
 8013f42:	2b03      	cmp	r3, #3
 8013f44:	d112      	bne.n	8013f6c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8013f46:	f7ff fb7b 	bl	8013640 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d002      	beq.n	8013f58 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	2202      	movs	r2, #2
 8013f56:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8013f58:	f7ff fb80 	bl	801365c <xTaskResumeAll>
 8013f5c:	e006      	b.n	8013f6c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8013f5e:	6978      	ldr	r0, [r7, #20]
 8013f60:	f7ff fa94 	bl	801348c <eTaskGetState>
 8013f64:	4603      	mov	r3, r0
 8013f66:	461a      	mov	r2, r3
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d009      	beq.n	8013f86 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f76:	4618      	mov	r0, r3
 8013f78:	f000 f860 	bl	801403c <prvTaskCheckFreeStackSpace>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	461a      	mov	r2, r3
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8013f84:	e002      	b.n	8013f8c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	841a      	strh	r2, [r3, #32]
	}
 8013f8c:	bf00      	nop
 8013f8e:	3718      	adds	r7, #24
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}
 8013f94:	20000f44 	.word	0x20000f44

08013f98 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b08a      	sub	sp, #40	; 0x28
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	60f8      	str	r0, [r7, #12]
 8013fa0:	60b9      	str	r1, [r7, #8]
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d03f      	beq.n	8014032 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	623b      	str	r3, [r7, #32]
 8013fb6:	6a3b      	ldr	r3, [r7, #32]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	685a      	ldr	r2, [r3, #4]
 8013fbc:	6a3b      	ldr	r3, [r7, #32]
 8013fbe:	605a      	str	r2, [r3, #4]
 8013fc0:	6a3b      	ldr	r3, [r7, #32]
 8013fc2:	685a      	ldr	r2, [r3, #4]
 8013fc4:	6a3b      	ldr	r3, [r7, #32]
 8013fc6:	3308      	adds	r3, #8
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d104      	bne.n	8013fd6 <prvListTasksWithinSingleList+0x3e>
 8013fcc:	6a3b      	ldr	r3, [r7, #32]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	685a      	ldr	r2, [r3, #4]
 8013fd2:	6a3b      	ldr	r3, [r7, #32]
 8013fd4:	605a      	str	r2, [r3, #4]
 8013fd6:	6a3b      	ldr	r3, [r7, #32]
 8013fd8:	685b      	ldr	r3, [r3, #4]
 8013fda:	68db      	ldr	r3, [r3, #12]
 8013fdc:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	61bb      	str	r3, [r7, #24]
 8013fe2:	69bb      	ldr	r3, [r7, #24]
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	685a      	ldr	r2, [r3, #4]
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	605a      	str	r2, [r3, #4]
 8013fec:	69bb      	ldr	r3, [r7, #24]
 8013fee:	685a      	ldr	r2, [r3, #4]
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	3308      	adds	r3, #8
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d104      	bne.n	8014002 <prvListTasksWithinSingleList+0x6a>
 8013ff8:	69bb      	ldr	r3, [r7, #24]
 8013ffa:	685b      	ldr	r3, [r3, #4]
 8013ffc:	685a      	ldr	r2, [r3, #4]
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	605a      	str	r2, [r3, #4]
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 801400a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801400c:	4613      	mov	r3, r2
 801400e:	00db      	lsls	r3, r3, #3
 8014010:	4413      	add	r3, r2
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	461a      	mov	r2, r3
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	1899      	adds	r1, r3, r2
 801401a:	79fb      	ldrb	r3, [r7, #7]
 801401c:	2201      	movs	r2, #1
 801401e:	6978      	ldr	r0, [r7, #20]
 8014020:	f7ff ff54 	bl	8013ecc <vTaskGetInfo>
				uxTask++;
 8014024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014026:	3301      	adds	r3, #1
 8014028:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 801402a:	697a      	ldr	r2, [r7, #20]
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	429a      	cmp	r2, r3
 8014030:	d1d5      	bne.n	8013fde <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8014032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014034:	4618      	mov	r0, r3
 8014036:	3728      	adds	r7, #40	; 0x28
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 801403c:	b480      	push	{r7}
 801403e:	b085      	sub	sp, #20
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8014044:	2300      	movs	r3, #0
 8014046:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014048:	e005      	b.n	8014056 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	3301      	adds	r3, #1
 801404e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	3301      	adds	r3, #1
 8014054:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	781b      	ldrb	r3, [r3, #0]
 801405a:	2ba5      	cmp	r3, #165	; 0xa5
 801405c:	d0f5      	beq.n	801404a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	089b      	lsrs	r3, r3, #2
 8014062:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	b29b      	uxth	r3, r3
	}
 8014068:	4618      	mov	r0, r3
 801406a:	3714      	adds	r7, #20
 801406c:	46bd      	mov	sp, r7
 801406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014072:	4770      	bx	lr

08014074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	3358      	adds	r3, #88	; 0x58
 8014080:	4618      	mov	r0, r3
 8014082:	f002 fead 	bl	8016de0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801408c:	2b00      	cmp	r3, #0
 801408e:	d108      	bne.n	80140a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014094:	4618      	mov	r0, r3
 8014096:	f001 f9cb 	bl	8015430 <vPortFree>
				vPortFree( pxTCB );
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f001 f9c8 	bl	8015430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80140a0:	e018      	b.n	80140d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d103      	bne.n	80140b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f001 f9bf 	bl	8015430 <vPortFree>
	}
 80140b2:	e00f      	b.n	80140d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80140ba:	2b02      	cmp	r3, #2
 80140bc:	d00a      	beq.n	80140d4 <prvDeleteTCB+0x60>
	__asm volatile
 80140be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c2:	f383 8811 	msr	BASEPRI, r3
 80140c6:	f3bf 8f6f 	isb	sy
 80140ca:	f3bf 8f4f 	dsb	sy
 80140ce:	60fb      	str	r3, [r7, #12]
}
 80140d0:	bf00      	nop
 80140d2:	e7fe      	b.n	80140d2 <prvDeleteTCB+0x5e>
	}
 80140d4:	bf00      	nop
 80140d6:	3710      	adds	r7, #16
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}

080140dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80140dc:	b480      	push	{r7}
 80140de:	b083      	sub	sp, #12
 80140e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140e2:	4b0c      	ldr	r3, [pc, #48]	; (8014114 <prvResetNextTaskUnblockTime+0x38>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d104      	bne.n	80140f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80140ec:	4b0a      	ldr	r3, [pc, #40]	; (8014118 <prvResetNextTaskUnblockTime+0x3c>)
 80140ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80140f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80140f4:	e008      	b.n	8014108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140f6:	4b07      	ldr	r3, [pc, #28]	; (8014114 <prvResetNextTaskUnblockTime+0x38>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	68db      	ldr	r3, [r3, #12]
 80140fc:	68db      	ldr	r3, [r3, #12]
 80140fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	685b      	ldr	r3, [r3, #4]
 8014104:	4a04      	ldr	r2, [pc, #16]	; (8014118 <prvResetNextTaskUnblockTime+0x3c>)
 8014106:	6013      	str	r3, [r2, #0]
}
 8014108:	bf00      	nop
 801410a:	370c      	adds	r7, #12
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr
 8014114:	200013d0 	.word	0x200013d0
 8014118:	20001438 	.word	0x20001438

0801411c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801411c:	b480      	push	{r7}
 801411e:	b083      	sub	sp, #12
 8014120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014122:	4b0b      	ldr	r3, [pc, #44]	; (8014150 <xTaskGetSchedulerState+0x34>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d102      	bne.n	8014130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801412a:	2301      	movs	r3, #1
 801412c:	607b      	str	r3, [r7, #4]
 801412e:	e008      	b.n	8014142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014130:	4b08      	ldr	r3, [pc, #32]	; (8014154 <xTaskGetSchedulerState+0x38>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d102      	bne.n	801413e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014138:	2302      	movs	r3, #2
 801413a:	607b      	str	r3, [r7, #4]
 801413c:	e001      	b.n	8014142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801413e:	2300      	movs	r3, #0
 8014140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014142:	687b      	ldr	r3, [r7, #4]
	}
 8014144:	4618      	mov	r0, r3
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr
 8014150:	20001424 	.word	0x20001424
 8014154:	20001440 	.word	0x20001440

08014158 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014158:	b580      	push	{r7, lr}
 801415a:	b084      	sub	sp, #16
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014164:	2300      	movs	r3, #0
 8014166:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d051      	beq.n	8014212 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014172:	4b2a      	ldr	r3, [pc, #168]	; (801421c <xTaskPriorityInherit+0xc4>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014178:	429a      	cmp	r2, r3
 801417a:	d241      	bcs.n	8014200 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	699b      	ldr	r3, [r3, #24]
 8014180:	2b00      	cmp	r3, #0
 8014182:	db06      	blt.n	8014192 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014184:	4b25      	ldr	r3, [pc, #148]	; (801421c <xTaskPriorityInherit+0xc4>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801418a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	6959      	ldr	r1, [r3, #20]
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801419a:	4613      	mov	r3, r2
 801419c:	009b      	lsls	r3, r3, #2
 801419e:	4413      	add	r3, r2
 80141a0:	009b      	lsls	r3, r3, #2
 80141a2:	4a1f      	ldr	r2, [pc, #124]	; (8014220 <xTaskPriorityInherit+0xc8>)
 80141a4:	4413      	add	r3, r2
 80141a6:	4299      	cmp	r1, r3
 80141a8:	d122      	bne.n	80141f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	3304      	adds	r3, #4
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7fd ff44 	bl	801203c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80141b4:	4b19      	ldr	r3, [pc, #100]	; (801421c <xTaskPriorityInherit+0xc4>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141c2:	4b18      	ldr	r3, [pc, #96]	; (8014224 <xTaskPriorityInherit+0xcc>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d903      	bls.n	80141d2 <xTaskPriorityInherit+0x7a>
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ce:	4a15      	ldr	r2, [pc, #84]	; (8014224 <xTaskPriorityInherit+0xcc>)
 80141d0:	6013      	str	r3, [r2, #0]
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141d6:	4613      	mov	r3, r2
 80141d8:	009b      	lsls	r3, r3, #2
 80141da:	4413      	add	r3, r2
 80141dc:	009b      	lsls	r3, r3, #2
 80141de:	4a10      	ldr	r2, [pc, #64]	; (8014220 <xTaskPriorityInherit+0xc8>)
 80141e0:	441a      	add	r2, r3
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	3304      	adds	r3, #4
 80141e6:	4619      	mov	r1, r3
 80141e8:	4610      	mov	r0, r2
 80141ea:	f7fd feca 	bl	8011f82 <vListInsertEnd>
 80141ee:	e004      	b.n	80141fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80141f0:	4b0a      	ldr	r3, [pc, #40]	; (801421c <xTaskPriorityInherit+0xc4>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80141fa:	2301      	movs	r3, #1
 80141fc:	60fb      	str	r3, [r7, #12]
 80141fe:	e008      	b.n	8014212 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014204:	4b05      	ldr	r3, [pc, #20]	; (801421c <xTaskPriorityInherit+0xc4>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801420a:	429a      	cmp	r2, r3
 801420c:	d201      	bcs.n	8014212 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801420e:	2301      	movs	r3, #1
 8014210:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014212:	68fb      	ldr	r3, [r7, #12]
	}
 8014214:	4618      	mov	r0, r3
 8014216:	3710      	adds	r7, #16
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}
 801421c:	20000f44 	.word	0x20000f44
 8014220:	20000f48 	.word	0x20000f48
 8014224:	20001420 	.word	0x20001420

08014228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014228:	b580      	push	{r7, lr}
 801422a:	b086      	sub	sp, #24
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014234:	2300      	movs	r3, #0
 8014236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d056      	beq.n	80142ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801423e:	4b2e      	ldr	r3, [pc, #184]	; (80142f8 <xTaskPriorityDisinherit+0xd0>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	693a      	ldr	r2, [r7, #16]
 8014244:	429a      	cmp	r2, r3
 8014246:	d00a      	beq.n	801425e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801424c:	f383 8811 	msr	BASEPRI, r3
 8014250:	f3bf 8f6f 	isb	sy
 8014254:	f3bf 8f4f 	dsb	sy
 8014258:	60fb      	str	r3, [r7, #12]
}
 801425a:	bf00      	nop
 801425c:	e7fe      	b.n	801425c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014262:	2b00      	cmp	r3, #0
 8014264:	d10a      	bne.n	801427c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801426a:	f383 8811 	msr	BASEPRI, r3
 801426e:	f3bf 8f6f 	isb	sy
 8014272:	f3bf 8f4f 	dsb	sy
 8014276:	60bb      	str	r3, [r7, #8]
}
 8014278:	bf00      	nop
 801427a:	e7fe      	b.n	801427a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014280:	1e5a      	subs	r2, r3, #1
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801428e:	429a      	cmp	r2, r3
 8014290:	d02c      	beq.n	80142ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014296:	2b00      	cmp	r3, #0
 8014298:	d128      	bne.n	80142ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801429a:	693b      	ldr	r3, [r7, #16]
 801429c:	3304      	adds	r3, #4
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fd fecc 	bl	801203c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80142b4:	693b      	ldr	r3, [r7, #16]
 80142b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142bc:	4b0f      	ldr	r3, [pc, #60]	; (80142fc <xTaskPriorityDisinherit+0xd4>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d903      	bls.n	80142cc <xTaskPriorityDisinherit+0xa4>
 80142c4:	693b      	ldr	r3, [r7, #16]
 80142c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c8:	4a0c      	ldr	r2, [pc, #48]	; (80142fc <xTaskPriorityDisinherit+0xd4>)
 80142ca:	6013      	str	r3, [r2, #0]
 80142cc:	693b      	ldr	r3, [r7, #16]
 80142ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142d0:	4613      	mov	r3, r2
 80142d2:	009b      	lsls	r3, r3, #2
 80142d4:	4413      	add	r3, r2
 80142d6:	009b      	lsls	r3, r3, #2
 80142d8:	4a09      	ldr	r2, [pc, #36]	; (8014300 <xTaskPriorityDisinherit+0xd8>)
 80142da:	441a      	add	r2, r3
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	3304      	adds	r3, #4
 80142e0:	4619      	mov	r1, r3
 80142e2:	4610      	mov	r0, r2
 80142e4:	f7fd fe4d 	bl	8011f82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80142e8:	2301      	movs	r3, #1
 80142ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80142ec:	697b      	ldr	r3, [r7, #20]
	}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3718      	adds	r7, #24
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
 80142f6:	bf00      	nop
 80142f8:	20000f44 	.word	0x20000f44
 80142fc:	20001420 	.word	0x20001420
 8014300:	20000f48 	.word	0x20000f48

08014304 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014304:	b580      	push	{r7, lr}
 8014306:	b088      	sub	sp, #32
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014312:	2301      	movs	r3, #1
 8014314:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d06a      	beq.n	80143f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801431c:	69bb      	ldr	r3, [r7, #24]
 801431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10a      	bne.n	801433a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8014324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014328:	f383 8811 	msr	BASEPRI, r3
 801432c:	f3bf 8f6f 	isb	sy
 8014330:	f3bf 8f4f 	dsb	sy
 8014334:	60fb      	str	r3, [r7, #12]
}
 8014336:	bf00      	nop
 8014338:	e7fe      	b.n	8014338 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801433a:	69bb      	ldr	r3, [r7, #24]
 801433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801433e:	683a      	ldr	r2, [r7, #0]
 8014340:	429a      	cmp	r2, r3
 8014342:	d902      	bls.n	801434a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	61fb      	str	r3, [r7, #28]
 8014348:	e002      	b.n	8014350 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801434a:	69bb      	ldr	r3, [r7, #24]
 801434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801434e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014350:	69bb      	ldr	r3, [r7, #24]
 8014352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014354:	69fa      	ldr	r2, [r7, #28]
 8014356:	429a      	cmp	r2, r3
 8014358:	d04b      	beq.n	80143f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801435a:	69bb      	ldr	r3, [r7, #24]
 801435c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801435e:	697a      	ldr	r2, [r7, #20]
 8014360:	429a      	cmp	r2, r3
 8014362:	d146      	bne.n	80143f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014364:	4b25      	ldr	r3, [pc, #148]	; (80143fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	69ba      	ldr	r2, [r7, #24]
 801436a:	429a      	cmp	r2, r3
 801436c:	d10a      	bne.n	8014384 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014372:	f383 8811 	msr	BASEPRI, r3
 8014376:	f3bf 8f6f 	isb	sy
 801437a:	f3bf 8f4f 	dsb	sy
 801437e:	60bb      	str	r3, [r7, #8]
}
 8014380:	bf00      	nop
 8014382:	e7fe      	b.n	8014382 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014388:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801438a:	69bb      	ldr	r3, [r7, #24]
 801438c:	69fa      	ldr	r2, [r7, #28]
 801438e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014390:	69bb      	ldr	r3, [r7, #24]
 8014392:	699b      	ldr	r3, [r3, #24]
 8014394:	2b00      	cmp	r3, #0
 8014396:	db04      	blt.n	80143a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801439e:	69bb      	ldr	r3, [r7, #24]
 80143a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80143a2:	69bb      	ldr	r3, [r7, #24]
 80143a4:	6959      	ldr	r1, [r3, #20]
 80143a6:	693a      	ldr	r2, [r7, #16]
 80143a8:	4613      	mov	r3, r2
 80143aa:	009b      	lsls	r3, r3, #2
 80143ac:	4413      	add	r3, r2
 80143ae:	009b      	lsls	r3, r3, #2
 80143b0:	4a13      	ldr	r2, [pc, #76]	; (8014400 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80143b2:	4413      	add	r3, r2
 80143b4:	4299      	cmp	r1, r3
 80143b6:	d11c      	bne.n	80143f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80143b8:	69bb      	ldr	r3, [r7, #24]
 80143ba:	3304      	adds	r3, #4
 80143bc:	4618      	mov	r0, r3
 80143be:	f7fd fe3d 	bl	801203c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143c6:	4b0f      	ldr	r3, [pc, #60]	; (8014404 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d903      	bls.n	80143d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d2:	4a0c      	ldr	r2, [pc, #48]	; (8014404 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80143d4:	6013      	str	r3, [r2, #0]
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143da:	4613      	mov	r3, r2
 80143dc:	009b      	lsls	r3, r3, #2
 80143de:	4413      	add	r3, r2
 80143e0:	009b      	lsls	r3, r3, #2
 80143e2:	4a07      	ldr	r2, [pc, #28]	; (8014400 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80143e4:	441a      	add	r2, r3
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	3304      	adds	r3, #4
 80143ea:	4619      	mov	r1, r3
 80143ec:	4610      	mov	r0, r2
 80143ee:	f7fd fdc8 	bl	8011f82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80143f2:	bf00      	nop
 80143f4:	3720      	adds	r7, #32
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	20000f44 	.word	0x20000f44
 8014400:	20000f48 	.word	0x20000f48
 8014404:	20001420 	.word	0x20001420

08014408 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8014412:	6839      	ldr	r1, [r7, #0]
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f002 fdc1 	bl	8016f9c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f7eb fed8 	bl	80001d0 <strlen>
 8014420:	60f8      	str	r0, [r7, #12]
 8014422:	e007      	b.n	8014434 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	4413      	add	r3, r2
 801442a:	2220      	movs	r2, #32
 801442c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	3301      	adds	r3, #1
 8014432:	60fb      	str	r3, [r7, #12]
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	2b0e      	cmp	r3, #14
 8014438:	d9f4      	bls.n	8014424 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	4413      	add	r3, r2
 8014440:	2200      	movs	r2, #0
 8014442:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8014444:	687a      	ldr	r2, [r7, #4]
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	4413      	add	r3, r2
	}
 801444a:	4618      	mov	r0, r3
 801444c:	3710      	adds	r7, #16
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}
	...

08014454 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8014454:	b590      	push	{r4, r7, lr}
 8014456:	b089      	sub	sp, #36	; 0x24
 8014458:	af02      	add	r7, sp, #8
 801445a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2200      	movs	r2, #0
 8014460:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8014462:	4b45      	ldr	r3, [pc, #276]	; (8014578 <vTaskList+0x124>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8014468:	4b43      	ldr	r3, [pc, #268]	; (8014578 <vTaskList+0x124>)
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	4613      	mov	r3, r2
 801446e:	00db      	lsls	r3, r3, #3
 8014470:	4413      	add	r3, r2
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	4618      	mov	r0, r3
 8014476:	f000 ff0f 	bl	8015298 <pvPortMalloc>
 801447a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d076      	beq.n	8014570 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8014482:	2200      	movs	r2, #0
 8014484:	68f9      	ldr	r1, [r7, #12]
 8014486:	68b8      	ldr	r0, [r7, #8]
 8014488:	f7ff f996 	bl	80137b8 <uxTaskGetSystemState>
 801448c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 801448e:	2300      	movs	r3, #0
 8014490:	617b      	str	r3, [r7, #20]
 8014492:	e066      	b.n	8014562 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8014494:	697a      	ldr	r2, [r7, #20]
 8014496:	4613      	mov	r3, r2
 8014498:	00db      	lsls	r3, r3, #3
 801449a:	4413      	add	r3, r2
 801449c:	009b      	lsls	r3, r3, #2
 801449e:	461a      	mov	r2, r3
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	4413      	add	r3, r2
 80144a4:	7b1b      	ldrb	r3, [r3, #12]
 80144a6:	2b04      	cmp	r3, #4
 80144a8:	d81b      	bhi.n	80144e2 <vTaskList+0x8e>
 80144aa:	a201      	add	r2, pc, #4	; (adr r2, 80144b0 <vTaskList+0x5c>)
 80144ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144b0:	080144c5 	.word	0x080144c5
 80144b4:	080144cb 	.word	0x080144cb
 80144b8:	080144d1 	.word	0x080144d1
 80144bc:	080144d7 	.word	0x080144d7
 80144c0:	080144dd 	.word	0x080144dd
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 80144c4:	2358      	movs	r3, #88	; 0x58
 80144c6:	74fb      	strb	r3, [r7, #19]
										break;
 80144c8:	e00e      	b.n	80144e8 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 80144ca:	2352      	movs	r3, #82	; 0x52
 80144cc:	74fb      	strb	r3, [r7, #19]
										break;
 80144ce:	e00b      	b.n	80144e8 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80144d0:	2342      	movs	r3, #66	; 0x42
 80144d2:	74fb      	strb	r3, [r7, #19]
										break;
 80144d4:	e008      	b.n	80144e8 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80144d6:	2353      	movs	r3, #83	; 0x53
 80144d8:	74fb      	strb	r3, [r7, #19]
										break;
 80144da:	e005      	b.n	80144e8 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80144dc:	2344      	movs	r3, #68	; 0x44
 80144de:	74fb      	strb	r3, [r7, #19]
										break;
 80144e0:	e002      	b.n	80144e8 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 80144e2:	2300      	movs	r3, #0
 80144e4:	74fb      	strb	r3, [r7, #19]
										break;
 80144e6:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80144e8:	697a      	ldr	r2, [r7, #20]
 80144ea:	4613      	mov	r3, r2
 80144ec:	00db      	lsls	r3, r3, #3
 80144ee:	4413      	add	r3, r2
 80144f0:	009b      	lsls	r3, r3, #2
 80144f2:	461a      	mov	r2, r3
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	4413      	add	r3, r2
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	4619      	mov	r1, r3
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f7ff ff83 	bl	8014408 <prvWriteNameToBuffer>
 8014502:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8014504:	7cf9      	ldrb	r1, [r7, #19]
 8014506:	697a      	ldr	r2, [r7, #20]
 8014508:	4613      	mov	r3, r2
 801450a:	00db      	lsls	r3, r3, #3
 801450c:	4413      	add	r3, r2
 801450e:	009b      	lsls	r3, r3, #2
 8014510:	461a      	mov	r2, r3
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	4413      	add	r3, r2
 8014516:	6918      	ldr	r0, [r3, #16]
 8014518:	697a      	ldr	r2, [r7, #20]
 801451a:	4613      	mov	r3, r2
 801451c:	00db      	lsls	r3, r3, #3
 801451e:	4413      	add	r3, r2
 8014520:	009b      	lsls	r3, r3, #2
 8014522:	461a      	mov	r2, r3
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	4413      	add	r3, r2
 8014528:	8c1b      	ldrh	r3, [r3, #32]
 801452a:	461c      	mov	r4, r3
 801452c:	697a      	ldr	r2, [r7, #20]
 801452e:	4613      	mov	r3, r2
 8014530:	00db      	lsls	r3, r3, #3
 8014532:	4413      	add	r3, r2
 8014534:	009b      	lsls	r3, r3, #2
 8014536:	461a      	mov	r2, r3
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	4413      	add	r3, r2
 801453c:	689b      	ldr	r3, [r3, #8]
 801453e:	9301      	str	r3, [sp, #4]
 8014540:	9400      	str	r4, [sp, #0]
 8014542:	4603      	mov	r3, r0
 8014544:	460a      	mov	r2, r1
 8014546:	490d      	ldr	r1, [pc, #52]	; (801457c <vTaskList+0x128>)
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f002 fcb5 	bl	8016eb8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f7eb fe3e 	bl	80001d0 <strlen>
 8014554:	4602      	mov	r2, r0
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	4413      	add	r3, r2
 801455a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	3301      	adds	r3, #1
 8014560:	617b      	str	r3, [r7, #20]
 8014562:	697a      	ldr	r2, [r7, #20]
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	429a      	cmp	r2, r3
 8014568:	d394      	bcc.n	8014494 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 801456a:	68b8      	ldr	r0, [r7, #8]
 801456c:	f000 ff60 	bl	8015430 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014570:	bf00      	nop
 8014572:	371c      	adds	r7, #28
 8014574:	46bd      	mov	sp, r7
 8014576:	bd90      	pop	{r4, r7, pc}
 8014578:	20001418 	.word	0x20001418
 801457c:	080196f8 	.word	0x080196f8

08014580 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8014580:	b580      	push	{r7, lr}
 8014582:	b088      	sub	sp, #32
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2200      	movs	r2, #0
 801458c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801458e:	4b3a      	ldr	r3, [pc, #232]	; (8014678 <vTaskGetRunTimeStats+0xf8>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8014594:	4b38      	ldr	r3, [pc, #224]	; (8014678 <vTaskGetRunTimeStats+0xf8>)
 8014596:	681a      	ldr	r2, [r3, #0]
 8014598:	4613      	mov	r3, r2
 801459a:	00db      	lsls	r3, r3, #3
 801459c:	4413      	add	r3, r2
 801459e:	009b      	lsls	r3, r3, #2
 80145a0:	4618      	mov	r0, r3
 80145a2:	f000 fe79 	bl	8015298 <pvPortMalloc>
 80145a6:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 80145a8:	697b      	ldr	r3, [r7, #20]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d05f      	beq.n	801466e <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80145ae:	f107 030c 	add.w	r3, r7, #12
 80145b2:	461a      	mov	r2, r3
 80145b4:	69b9      	ldr	r1, [r7, #24]
 80145b6:	6978      	ldr	r0, [r7, #20]
 80145b8:	f7ff f8fe 	bl	80137b8 <uxTaskGetSystemState>
 80145bc:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	4a2e      	ldr	r2, [pc, #184]	; (801467c <vTaskGetRunTimeStats+0xfc>)
 80145c2:	fba2 2303 	umull	r2, r3, r2, r3
 80145c6:	095b      	lsrs	r3, r3, #5
 80145c8:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d04b      	beq.n	8014668 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 80145d0:	2300      	movs	r3, #0
 80145d2:	61fb      	str	r3, [r7, #28]
 80145d4:	e044      	b.n	8014660 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80145d6:	69fa      	ldr	r2, [r7, #28]
 80145d8:	4613      	mov	r3, r2
 80145da:	00db      	lsls	r3, r3, #3
 80145dc:	4413      	add	r3, r2
 80145de:	009b      	lsls	r3, r3, #2
 80145e0:	461a      	mov	r2, r3
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	4413      	add	r3, r2
 80145e6:	699a      	ldr	r2, [r3, #24]
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80145ee:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80145f0:	69fa      	ldr	r2, [r7, #28]
 80145f2:	4613      	mov	r3, r2
 80145f4:	00db      	lsls	r3, r3, #3
 80145f6:	4413      	add	r3, r2
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	461a      	mov	r2, r3
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	4413      	add	r3, r2
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	4619      	mov	r1, r3
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f7ff feff 	bl	8014408 <prvWriteNameToBuffer>
 801460a:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d00e      	beq.n	8014630 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8014612:	69fa      	ldr	r2, [r7, #28]
 8014614:	4613      	mov	r3, r2
 8014616:	00db      	lsls	r3, r3, #3
 8014618:	4413      	add	r3, r2
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	461a      	mov	r2, r3
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	4413      	add	r3, r2
 8014622:	699a      	ldr	r2, [r3, #24]
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	4916      	ldr	r1, [pc, #88]	; (8014680 <vTaskGetRunTimeStats+0x100>)
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f002 fc45 	bl	8016eb8 <siprintf>
 801462e:	e00d      	b.n	801464c <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8014630:	69fa      	ldr	r2, [r7, #28]
 8014632:	4613      	mov	r3, r2
 8014634:	00db      	lsls	r3, r3, #3
 8014636:	4413      	add	r3, r2
 8014638:	009b      	lsls	r3, r3, #2
 801463a:	461a      	mov	r2, r3
 801463c:	697b      	ldr	r3, [r7, #20]
 801463e:	4413      	add	r3, r2
 8014640:	699b      	ldr	r3, [r3, #24]
 8014642:	461a      	mov	r2, r3
 8014644:	490f      	ldr	r1, [pc, #60]	; (8014684 <vTaskGetRunTimeStats+0x104>)
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f002 fc36 	bl	8016eb8 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f7eb fdbf 	bl	80001d0 <strlen>
 8014652:	4602      	mov	r2, r0
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	4413      	add	r3, r2
 8014658:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 801465a:	69fb      	ldr	r3, [r7, #28]
 801465c:	3301      	adds	r3, #1
 801465e:	61fb      	str	r3, [r7, #28]
 8014660:	69fa      	ldr	r2, [r7, #28]
 8014662:	69bb      	ldr	r3, [r7, #24]
 8014664:	429a      	cmp	r2, r3
 8014666:	d3b6      	bcc.n	80145d6 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8014668:	6978      	ldr	r0, [r7, #20]
 801466a:	f000 fee1 	bl	8015430 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801466e:	bf00      	nop
 8014670:	3720      	adds	r7, #32
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	20001418 	.word	0x20001418
 801467c:	51eb851f 	.word	0x51eb851f
 8014680:	08019708 	.word	0x08019708
 8014684:	08019714 	.word	0x08019714

08014688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014688:	b480      	push	{r7}
 801468a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801468c:	4b07      	ldr	r3, [pc, #28]	; (80146ac <pvTaskIncrementMutexHeldCount+0x24>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d004      	beq.n	801469e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014694:	4b05      	ldr	r3, [pc, #20]	; (80146ac <pvTaskIncrementMutexHeldCount+0x24>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801469a:	3201      	adds	r2, #1
 801469c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801469e:	4b03      	ldr	r3, [pc, #12]	; (80146ac <pvTaskIncrementMutexHeldCount+0x24>)
 80146a0:	681b      	ldr	r3, [r3, #0]
	}
 80146a2:	4618      	mov	r0, r3
 80146a4:	46bd      	mov	sp, r7
 80146a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146aa:	4770      	bx	lr
 80146ac:	20000f44 	.word	0x20000f44

080146b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80146ba:	4b21      	ldr	r3, [pc, #132]	; (8014740 <prvAddCurrentTaskToDelayedList+0x90>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146c0:	4b20      	ldr	r3, [pc, #128]	; (8014744 <prvAddCurrentTaskToDelayedList+0x94>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	3304      	adds	r3, #4
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7fd fcb8 	bl	801203c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146d2:	d10a      	bne.n	80146ea <prvAddCurrentTaskToDelayedList+0x3a>
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d007      	beq.n	80146ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146da:	4b1a      	ldr	r3, [pc, #104]	; (8014744 <prvAddCurrentTaskToDelayedList+0x94>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	3304      	adds	r3, #4
 80146e0:	4619      	mov	r1, r3
 80146e2:	4819      	ldr	r0, [pc, #100]	; (8014748 <prvAddCurrentTaskToDelayedList+0x98>)
 80146e4:	f7fd fc4d 	bl	8011f82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80146e8:	e026      	b.n	8014738 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80146ea:	68fa      	ldr	r2, [r7, #12]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	4413      	add	r3, r2
 80146f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80146f2:	4b14      	ldr	r3, [pc, #80]	; (8014744 <prvAddCurrentTaskToDelayedList+0x94>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	68ba      	ldr	r2, [r7, #8]
 80146f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80146fa:	68ba      	ldr	r2, [r7, #8]
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	429a      	cmp	r2, r3
 8014700:	d209      	bcs.n	8014716 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014702:	4b12      	ldr	r3, [pc, #72]	; (801474c <prvAddCurrentTaskToDelayedList+0x9c>)
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	4b0f      	ldr	r3, [pc, #60]	; (8014744 <prvAddCurrentTaskToDelayedList+0x94>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	3304      	adds	r3, #4
 801470c:	4619      	mov	r1, r3
 801470e:	4610      	mov	r0, r2
 8014710:	f7fd fc5b 	bl	8011fca <vListInsert>
}
 8014714:	e010      	b.n	8014738 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014716:	4b0e      	ldr	r3, [pc, #56]	; (8014750 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	4b0a      	ldr	r3, [pc, #40]	; (8014744 <prvAddCurrentTaskToDelayedList+0x94>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	3304      	adds	r3, #4
 8014720:	4619      	mov	r1, r3
 8014722:	4610      	mov	r0, r2
 8014724:	f7fd fc51 	bl	8011fca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014728:	4b0a      	ldr	r3, [pc, #40]	; (8014754 <prvAddCurrentTaskToDelayedList+0xa4>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	68ba      	ldr	r2, [r7, #8]
 801472e:	429a      	cmp	r2, r3
 8014730:	d202      	bcs.n	8014738 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014732:	4a08      	ldr	r2, [pc, #32]	; (8014754 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	6013      	str	r3, [r2, #0]
}
 8014738:	bf00      	nop
 801473a:	3710      	adds	r7, #16
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}
 8014740:	2000141c 	.word	0x2000141c
 8014744:	20000f44 	.word	0x20000f44
 8014748:	20001404 	.word	0x20001404
 801474c:	200013d4 	.word	0x200013d4
 8014750:	200013d0 	.word	0x200013d0
 8014754:	20001438 	.word	0x20001438

08014758 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b08a      	sub	sp, #40	; 0x28
 801475c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801475e:	2300      	movs	r3, #0
 8014760:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014762:	f000 fb07 	bl	8014d74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014766:	4b1c      	ldr	r3, [pc, #112]	; (80147d8 <xTimerCreateTimerTask+0x80>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d021      	beq.n	80147b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801476e:	2300      	movs	r3, #0
 8014770:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014772:	2300      	movs	r3, #0
 8014774:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014776:	1d3a      	adds	r2, r7, #4
 8014778:	f107 0108 	add.w	r1, r7, #8
 801477c:	f107 030c 	add.w	r3, r7, #12
 8014780:	4618      	mov	r0, r3
 8014782:	f7fd fbb7 	bl	8011ef4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014786:	6879      	ldr	r1, [r7, #4]
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	68fa      	ldr	r2, [r7, #12]
 801478c:	9202      	str	r2, [sp, #8]
 801478e:	9301      	str	r3, [sp, #4]
 8014790:	2302      	movs	r3, #2
 8014792:	9300      	str	r3, [sp, #0]
 8014794:	2300      	movs	r3, #0
 8014796:	460a      	mov	r2, r1
 8014798:	4910      	ldr	r1, [pc, #64]	; (80147dc <xTimerCreateTimerTask+0x84>)
 801479a:	4811      	ldr	r0, [pc, #68]	; (80147e0 <xTimerCreateTimerTask+0x88>)
 801479c:	f7fe fc86 	bl	80130ac <xTaskCreateStatic>
 80147a0:	4603      	mov	r3, r0
 80147a2:	4a10      	ldr	r2, [pc, #64]	; (80147e4 <xTimerCreateTimerTask+0x8c>)
 80147a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80147a6:	4b0f      	ldr	r3, [pc, #60]	; (80147e4 <xTimerCreateTimerTask+0x8c>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d001      	beq.n	80147b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80147ae:	2301      	movs	r3, #1
 80147b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d10a      	bne.n	80147ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80147b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147bc:	f383 8811 	msr	BASEPRI, r3
 80147c0:	f3bf 8f6f 	isb	sy
 80147c4:	f3bf 8f4f 	dsb	sy
 80147c8:	613b      	str	r3, [r7, #16]
}
 80147ca:	bf00      	nop
 80147cc:	e7fe      	b.n	80147cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80147ce:	697b      	ldr	r3, [r7, #20]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3718      	adds	r7, #24
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	2000147c 	.word	0x2000147c
 80147dc:	08019720 	.word	0x08019720
 80147e0:	0801491d 	.word	0x0801491d
 80147e4:	20001480 	.word	0x20001480

080147e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b08a      	sub	sp, #40	; 0x28
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	60f8      	str	r0, [r7, #12]
 80147f0:	60b9      	str	r1, [r7, #8]
 80147f2:	607a      	str	r2, [r7, #4]
 80147f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80147f6:	2300      	movs	r3, #0
 80147f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d10a      	bne.n	8014816 <xTimerGenericCommand+0x2e>
	__asm volatile
 8014800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014804:	f383 8811 	msr	BASEPRI, r3
 8014808:	f3bf 8f6f 	isb	sy
 801480c:	f3bf 8f4f 	dsb	sy
 8014810:	623b      	str	r3, [r7, #32]
}
 8014812:	bf00      	nop
 8014814:	e7fe      	b.n	8014814 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014816:	4b1a      	ldr	r3, [pc, #104]	; (8014880 <xTimerGenericCommand+0x98>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d02a      	beq.n	8014874 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	2b05      	cmp	r3, #5
 801482e:	dc18      	bgt.n	8014862 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014830:	f7ff fc74 	bl	801411c <xTaskGetSchedulerState>
 8014834:	4603      	mov	r3, r0
 8014836:	2b02      	cmp	r3, #2
 8014838:	d109      	bne.n	801484e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801483a:	4b11      	ldr	r3, [pc, #68]	; (8014880 <xTimerGenericCommand+0x98>)
 801483c:	6818      	ldr	r0, [r3, #0]
 801483e:	f107 0110 	add.w	r1, r7, #16
 8014842:	2300      	movs	r3, #0
 8014844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014846:	f7fd fdcb 	bl	80123e0 <xQueueGenericSend>
 801484a:	6278      	str	r0, [r7, #36]	; 0x24
 801484c:	e012      	b.n	8014874 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801484e:	4b0c      	ldr	r3, [pc, #48]	; (8014880 <xTimerGenericCommand+0x98>)
 8014850:	6818      	ldr	r0, [r3, #0]
 8014852:	f107 0110 	add.w	r1, r7, #16
 8014856:	2300      	movs	r3, #0
 8014858:	2200      	movs	r2, #0
 801485a:	f7fd fdc1 	bl	80123e0 <xQueueGenericSend>
 801485e:	6278      	str	r0, [r7, #36]	; 0x24
 8014860:	e008      	b.n	8014874 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014862:	4b07      	ldr	r3, [pc, #28]	; (8014880 <xTimerGenericCommand+0x98>)
 8014864:	6818      	ldr	r0, [r3, #0]
 8014866:	f107 0110 	add.w	r1, r7, #16
 801486a:	2300      	movs	r3, #0
 801486c:	683a      	ldr	r2, [r7, #0]
 801486e:	f7fd feb5 	bl	80125dc <xQueueGenericSendFromISR>
 8014872:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014876:	4618      	mov	r0, r3
 8014878:	3728      	adds	r7, #40	; 0x28
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	2000147c 	.word	0x2000147c

08014884 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b088      	sub	sp, #32
 8014888:	af02      	add	r7, sp, #8
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801488e:	4b22      	ldr	r3, [pc, #136]	; (8014918 <prvProcessExpiredTimer+0x94>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	3304      	adds	r3, #4
 801489c:	4618      	mov	r0, r3
 801489e:	f7fd fbcd 	bl	801203c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148a8:	f003 0304 	and.w	r3, r3, #4
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d022      	beq.n	80148f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	699a      	ldr	r2, [r3, #24]
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	18d1      	adds	r1, r2, r3
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	683a      	ldr	r2, [r7, #0]
 80148bc:	6978      	ldr	r0, [r7, #20]
 80148be:	f000 f8d1 	bl	8014a64 <prvInsertTimerInActiveList>
 80148c2:	4603      	mov	r3, r0
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d01f      	beq.n	8014908 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80148c8:	2300      	movs	r3, #0
 80148ca:	9300      	str	r3, [sp, #0]
 80148cc:	2300      	movs	r3, #0
 80148ce:	687a      	ldr	r2, [r7, #4]
 80148d0:	2100      	movs	r1, #0
 80148d2:	6978      	ldr	r0, [r7, #20]
 80148d4:	f7ff ff88 	bl	80147e8 <xTimerGenericCommand>
 80148d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d113      	bne.n	8014908 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80148e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e4:	f383 8811 	msr	BASEPRI, r3
 80148e8:	f3bf 8f6f 	isb	sy
 80148ec:	f3bf 8f4f 	dsb	sy
 80148f0:	60fb      	str	r3, [r7, #12]
}
 80148f2:	bf00      	nop
 80148f4:	e7fe      	b.n	80148f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148fc:	f023 0301 	bic.w	r3, r3, #1
 8014900:	b2da      	uxtb	r2, r3
 8014902:	697b      	ldr	r3, [r7, #20]
 8014904:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014908:	697b      	ldr	r3, [r7, #20]
 801490a:	6a1b      	ldr	r3, [r3, #32]
 801490c:	6978      	ldr	r0, [r7, #20]
 801490e:	4798      	blx	r3
}
 8014910:	bf00      	nop
 8014912:	3718      	adds	r7, #24
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}
 8014918:	20001474 	.word	0x20001474

0801491c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014924:	f107 0308 	add.w	r3, r7, #8
 8014928:	4618      	mov	r0, r3
 801492a:	f000 f857 	bl	80149dc <prvGetNextExpireTime>
 801492e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	4619      	mov	r1, r3
 8014934:	68f8      	ldr	r0, [r7, #12]
 8014936:	f000 f803 	bl	8014940 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801493a:	f000 f8d5 	bl	8014ae8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801493e:	e7f1      	b.n	8014924 <prvTimerTask+0x8>

08014940 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801494a:	f7fe fe79 	bl	8013640 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801494e:	f107 0308 	add.w	r3, r7, #8
 8014952:	4618      	mov	r0, r3
 8014954:	f000 f866 	bl	8014a24 <prvSampleTimeNow>
 8014958:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d130      	bne.n	80149c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d10a      	bne.n	801497c <prvProcessTimerOrBlockTask+0x3c>
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	429a      	cmp	r2, r3
 801496c:	d806      	bhi.n	801497c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801496e:	f7fe fe75 	bl	801365c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014972:	68f9      	ldr	r1, [r7, #12]
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f7ff ff85 	bl	8014884 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801497a:	e024      	b.n	80149c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d008      	beq.n	8014994 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014982:	4b13      	ldr	r3, [pc, #76]	; (80149d0 <prvProcessTimerOrBlockTask+0x90>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d101      	bne.n	8014990 <prvProcessTimerOrBlockTask+0x50>
 801498c:	2301      	movs	r3, #1
 801498e:	e000      	b.n	8014992 <prvProcessTimerOrBlockTask+0x52>
 8014990:	2300      	movs	r3, #0
 8014992:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014994:	4b0f      	ldr	r3, [pc, #60]	; (80149d4 <prvProcessTimerOrBlockTask+0x94>)
 8014996:	6818      	ldr	r0, [r3, #0]
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	1ad3      	subs	r3, r2, r3
 801499e:	683a      	ldr	r2, [r7, #0]
 80149a0:	4619      	mov	r1, r3
 80149a2:	f7fe fb4f 	bl	8013044 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80149a6:	f7fe fe59 	bl	801365c <xTaskResumeAll>
 80149aa:	4603      	mov	r3, r0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d10a      	bne.n	80149c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80149b0:	4b09      	ldr	r3, [pc, #36]	; (80149d8 <prvProcessTimerOrBlockTask+0x98>)
 80149b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149b6:	601a      	str	r2, [r3, #0]
 80149b8:	f3bf 8f4f 	dsb	sy
 80149bc:	f3bf 8f6f 	isb	sy
}
 80149c0:	e001      	b.n	80149c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80149c2:	f7fe fe4b 	bl	801365c <xTaskResumeAll>
}
 80149c6:	bf00      	nop
 80149c8:	3710      	adds	r7, #16
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
 80149ce:	bf00      	nop
 80149d0:	20001478 	.word	0x20001478
 80149d4:	2000147c 	.word	0x2000147c
 80149d8:	e000ed04 	.word	0xe000ed04

080149dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80149dc:	b480      	push	{r7}
 80149de:	b085      	sub	sp, #20
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80149e4:	4b0e      	ldr	r3, [pc, #56]	; (8014a20 <prvGetNextExpireTime+0x44>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d101      	bne.n	80149f2 <prvGetNextExpireTime+0x16>
 80149ee:	2201      	movs	r2, #1
 80149f0:	e000      	b.n	80149f4 <prvGetNextExpireTime+0x18>
 80149f2:	2200      	movs	r2, #0
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d105      	bne.n	8014a0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014a00:	4b07      	ldr	r3, [pc, #28]	; (8014a20 <prvGetNextExpireTime+0x44>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	68db      	ldr	r3, [r3, #12]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	60fb      	str	r3, [r7, #12]
 8014a0a:	e001      	b.n	8014a10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014a10:	68fb      	ldr	r3, [r7, #12]
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3714      	adds	r7, #20
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop
 8014a20:	20001474 	.word	0x20001474

08014a24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014a2c:	f7fe feb4 	bl	8013798 <xTaskGetTickCount>
 8014a30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014a32:	4b0b      	ldr	r3, [pc, #44]	; (8014a60 <prvSampleTimeNow+0x3c>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	68fa      	ldr	r2, [r7, #12]
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	d205      	bcs.n	8014a48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014a3c:	f000 f936 	bl	8014cac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2201      	movs	r2, #1
 8014a44:	601a      	str	r2, [r3, #0]
 8014a46:	e002      	b.n	8014a4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014a4e:	4a04      	ldr	r2, [pc, #16]	; (8014a60 <prvSampleTimeNow+0x3c>)
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014a54:	68fb      	ldr	r3, [r7, #12]
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3710      	adds	r7, #16
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	20001484 	.word	0x20001484

08014a64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b086      	sub	sp, #24
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	60f8      	str	r0, [r7, #12]
 8014a6c:	60b9      	str	r1, [r7, #8]
 8014a6e:	607a      	str	r2, [r7, #4]
 8014a70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014a72:	2300      	movs	r3, #0
 8014a74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	68ba      	ldr	r2, [r7, #8]
 8014a7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	68fa      	ldr	r2, [r7, #12]
 8014a80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014a82:	68ba      	ldr	r2, [r7, #8]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d812      	bhi.n	8014ab0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	1ad2      	subs	r2, r2, r3
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	699b      	ldr	r3, [r3, #24]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d302      	bcc.n	8014a9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014a98:	2301      	movs	r3, #1
 8014a9a:	617b      	str	r3, [r7, #20]
 8014a9c:	e01b      	b.n	8014ad6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014a9e:	4b10      	ldr	r3, [pc, #64]	; (8014ae0 <prvInsertTimerInActiveList+0x7c>)
 8014aa0:	681a      	ldr	r2, [r3, #0]
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	3304      	adds	r3, #4
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	4610      	mov	r0, r2
 8014aaa:	f7fd fa8e 	bl	8011fca <vListInsert>
 8014aae:	e012      	b.n	8014ad6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014ab0:	687a      	ldr	r2, [r7, #4]
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d206      	bcs.n	8014ac6 <prvInsertTimerInActiveList+0x62>
 8014ab8:	68ba      	ldr	r2, [r7, #8]
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d302      	bcc.n	8014ac6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	617b      	str	r3, [r7, #20]
 8014ac4:	e007      	b.n	8014ad6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014ac6:	4b07      	ldr	r3, [pc, #28]	; (8014ae4 <prvInsertTimerInActiveList+0x80>)
 8014ac8:	681a      	ldr	r2, [r3, #0]
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	3304      	adds	r3, #4
 8014ace:	4619      	mov	r1, r3
 8014ad0:	4610      	mov	r0, r2
 8014ad2:	f7fd fa7a 	bl	8011fca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014ad6:	697b      	ldr	r3, [r7, #20]
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3718      	adds	r7, #24
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	20001478 	.word	0x20001478
 8014ae4:	20001474 	.word	0x20001474

08014ae8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b08e      	sub	sp, #56	; 0x38
 8014aec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014aee:	e0ca      	b.n	8014c86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	da18      	bge.n	8014b28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014af6:	1d3b      	adds	r3, r7, #4
 8014af8:	3304      	adds	r3, #4
 8014afa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d10a      	bne.n	8014b18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b06:	f383 8811 	msr	BASEPRI, r3
 8014b0a:	f3bf 8f6f 	isb	sy
 8014b0e:	f3bf 8f4f 	dsb	sy
 8014b12:	61fb      	str	r3, [r7, #28]
}
 8014b14:	bf00      	nop
 8014b16:	e7fe      	b.n	8014b16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b1e:	6850      	ldr	r0, [r2, #4]
 8014b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b22:	6892      	ldr	r2, [r2, #8]
 8014b24:	4611      	mov	r1, r2
 8014b26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	f2c0 80aa 	blt.w	8014c84 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b36:	695b      	ldr	r3, [r3, #20]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d004      	beq.n	8014b46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b3e:	3304      	adds	r3, #4
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7fd fa7b 	bl	801203c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014b46:	463b      	mov	r3, r7
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f7ff ff6b 	bl	8014a24 <prvSampleTimeNow>
 8014b4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2b09      	cmp	r3, #9
 8014b54:	f200 8097 	bhi.w	8014c86 <prvProcessReceivedCommands+0x19e>
 8014b58:	a201      	add	r2, pc, #4	; (adr r2, 8014b60 <prvProcessReceivedCommands+0x78>)
 8014b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b5e:	bf00      	nop
 8014b60:	08014b89 	.word	0x08014b89
 8014b64:	08014b89 	.word	0x08014b89
 8014b68:	08014b89 	.word	0x08014b89
 8014b6c:	08014bfd 	.word	0x08014bfd
 8014b70:	08014c11 	.word	0x08014c11
 8014b74:	08014c5b 	.word	0x08014c5b
 8014b78:	08014b89 	.word	0x08014b89
 8014b7c:	08014b89 	.word	0x08014b89
 8014b80:	08014bfd 	.word	0x08014bfd
 8014b84:	08014c11 	.word	0x08014c11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b8e:	f043 0301 	orr.w	r3, r3, #1
 8014b92:	b2da      	uxtb	r2, r3
 8014b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014b9a:	68ba      	ldr	r2, [r7, #8]
 8014b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b9e:	699b      	ldr	r3, [r3, #24]
 8014ba0:	18d1      	adds	r1, r2, r3
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ba8:	f7ff ff5c 	bl	8014a64 <prvInsertTimerInActiveList>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d069      	beq.n	8014c86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb4:	6a1b      	ldr	r3, [r3, #32]
 8014bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bc0:	f003 0304 	and.w	r3, r3, #4
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d05e      	beq.n	8014c86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014bc8:	68ba      	ldr	r2, [r7, #8]
 8014bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bcc:	699b      	ldr	r3, [r3, #24]
 8014bce:	441a      	add	r2, r3
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	9300      	str	r3, [sp, #0]
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	2100      	movs	r1, #0
 8014bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bda:	f7ff fe05 	bl	80147e8 <xTimerGenericCommand>
 8014bde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014be0:	6a3b      	ldr	r3, [r7, #32]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d14f      	bne.n	8014c86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bea:	f383 8811 	msr	BASEPRI, r3
 8014bee:	f3bf 8f6f 	isb	sy
 8014bf2:	f3bf 8f4f 	dsb	sy
 8014bf6:	61bb      	str	r3, [r7, #24]
}
 8014bf8:	bf00      	nop
 8014bfa:	e7fe      	b.n	8014bfa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c02:	f023 0301 	bic.w	r3, r3, #1
 8014c06:	b2da      	uxtb	r2, r3
 8014c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014c0e:	e03a      	b.n	8014c86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c16:	f043 0301 	orr.w	r3, r3, #1
 8014c1a:	b2da      	uxtb	r2, r3
 8014c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014c22:	68ba      	ldr	r2, [r7, #8]
 8014c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c2a:	699b      	ldr	r3, [r3, #24]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d10a      	bne.n	8014c46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c34:	f383 8811 	msr	BASEPRI, r3
 8014c38:	f3bf 8f6f 	isb	sy
 8014c3c:	f3bf 8f4f 	dsb	sy
 8014c40:	617b      	str	r3, [r7, #20]
}
 8014c42:	bf00      	nop
 8014c44:	e7fe      	b.n	8014c44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c48:	699a      	ldr	r2, [r3, #24]
 8014c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c4c:	18d1      	adds	r1, r2, r3
 8014c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c54:	f7ff ff06 	bl	8014a64 <prvInsertTimerInActiveList>
					break;
 8014c58:	e015      	b.n	8014c86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c60:	f003 0302 	and.w	r3, r3, #2
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d103      	bne.n	8014c70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c6a:	f000 fbe1 	bl	8015430 <vPortFree>
 8014c6e:	e00a      	b.n	8014c86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c76:	f023 0301 	bic.w	r3, r3, #1
 8014c7a:	b2da      	uxtb	r2, r3
 8014c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014c82:	e000      	b.n	8014c86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014c84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014c86:	4b08      	ldr	r3, [pc, #32]	; (8014ca8 <prvProcessReceivedCommands+0x1c0>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	1d39      	adds	r1, r7, #4
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7fd fdcc 	bl	801282c <xQueueReceive>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	f47f af2a 	bne.w	8014af0 <prvProcessReceivedCommands+0x8>
	}
}
 8014c9c:	bf00      	nop
 8014c9e:	bf00      	nop
 8014ca0:	3730      	adds	r7, #48	; 0x30
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	bf00      	nop
 8014ca8:	2000147c 	.word	0x2000147c

08014cac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b088      	sub	sp, #32
 8014cb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014cb2:	e048      	b.n	8014d46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014cb4:	4b2d      	ldr	r3, [pc, #180]	; (8014d6c <prvSwitchTimerLists+0xc0>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cbe:	4b2b      	ldr	r3, [pc, #172]	; (8014d6c <prvSwitchTimerLists+0xc0>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	68db      	ldr	r3, [r3, #12]
 8014cc4:	68db      	ldr	r3, [r3, #12]
 8014cc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	3304      	adds	r3, #4
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fd f9b5 	bl	801203c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	6a1b      	ldr	r3, [r3, #32]
 8014cd6:	68f8      	ldr	r0, [r7, #12]
 8014cd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ce0:	f003 0304 	and.w	r3, r3, #4
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d02e      	beq.n	8014d46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	699b      	ldr	r3, [r3, #24]
 8014cec:	693a      	ldr	r2, [r7, #16]
 8014cee:	4413      	add	r3, r2
 8014cf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014cf2:	68ba      	ldr	r2, [r7, #8]
 8014cf4:	693b      	ldr	r3, [r7, #16]
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d90e      	bls.n	8014d18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	68ba      	ldr	r2, [r7, #8]
 8014cfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	68fa      	ldr	r2, [r7, #12]
 8014d04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014d06:	4b19      	ldr	r3, [pc, #100]	; (8014d6c <prvSwitchTimerLists+0xc0>)
 8014d08:	681a      	ldr	r2, [r3, #0]
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	3304      	adds	r3, #4
 8014d0e:	4619      	mov	r1, r3
 8014d10:	4610      	mov	r0, r2
 8014d12:	f7fd f95a 	bl	8011fca <vListInsert>
 8014d16:	e016      	b.n	8014d46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014d18:	2300      	movs	r3, #0
 8014d1a:	9300      	str	r3, [sp, #0]
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	693a      	ldr	r2, [r7, #16]
 8014d20:	2100      	movs	r1, #0
 8014d22:	68f8      	ldr	r0, [r7, #12]
 8014d24:	f7ff fd60 	bl	80147e8 <xTimerGenericCommand>
 8014d28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d10a      	bne.n	8014d46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d34:	f383 8811 	msr	BASEPRI, r3
 8014d38:	f3bf 8f6f 	isb	sy
 8014d3c:	f3bf 8f4f 	dsb	sy
 8014d40:	603b      	str	r3, [r7, #0]
}
 8014d42:	bf00      	nop
 8014d44:	e7fe      	b.n	8014d44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014d46:	4b09      	ldr	r3, [pc, #36]	; (8014d6c <prvSwitchTimerLists+0xc0>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d1b1      	bne.n	8014cb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014d50:	4b06      	ldr	r3, [pc, #24]	; (8014d6c <prvSwitchTimerLists+0xc0>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014d56:	4b06      	ldr	r3, [pc, #24]	; (8014d70 <prvSwitchTimerLists+0xc4>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	4a04      	ldr	r2, [pc, #16]	; (8014d6c <prvSwitchTimerLists+0xc0>)
 8014d5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014d5e:	4a04      	ldr	r2, [pc, #16]	; (8014d70 <prvSwitchTimerLists+0xc4>)
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	6013      	str	r3, [r2, #0]
}
 8014d64:	bf00      	nop
 8014d66:	3718      	adds	r7, #24
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	20001474 	.word	0x20001474
 8014d70:	20001478 	.word	0x20001478

08014d74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014d7a:	f000 f96b 	bl	8015054 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014d7e:	4b15      	ldr	r3, [pc, #84]	; (8014dd4 <prvCheckForValidListAndQueue+0x60>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d120      	bne.n	8014dc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014d86:	4814      	ldr	r0, [pc, #80]	; (8014dd8 <prvCheckForValidListAndQueue+0x64>)
 8014d88:	f7fd f8ce 	bl	8011f28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014d8c:	4813      	ldr	r0, [pc, #76]	; (8014ddc <prvCheckForValidListAndQueue+0x68>)
 8014d8e:	f7fd f8cb 	bl	8011f28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014d92:	4b13      	ldr	r3, [pc, #76]	; (8014de0 <prvCheckForValidListAndQueue+0x6c>)
 8014d94:	4a10      	ldr	r2, [pc, #64]	; (8014dd8 <prvCheckForValidListAndQueue+0x64>)
 8014d96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014d98:	4b12      	ldr	r3, [pc, #72]	; (8014de4 <prvCheckForValidListAndQueue+0x70>)
 8014d9a:	4a10      	ldr	r2, [pc, #64]	; (8014ddc <prvCheckForValidListAndQueue+0x68>)
 8014d9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014d9e:	2300      	movs	r3, #0
 8014da0:	9300      	str	r3, [sp, #0]
 8014da2:	4b11      	ldr	r3, [pc, #68]	; (8014de8 <prvCheckForValidListAndQueue+0x74>)
 8014da4:	4a11      	ldr	r2, [pc, #68]	; (8014dec <prvCheckForValidListAndQueue+0x78>)
 8014da6:	2110      	movs	r1, #16
 8014da8:	200a      	movs	r0, #10
 8014daa:	f7fd f9d9 	bl	8012160 <xQueueGenericCreateStatic>
 8014dae:	4603      	mov	r3, r0
 8014db0:	4a08      	ldr	r2, [pc, #32]	; (8014dd4 <prvCheckForValidListAndQueue+0x60>)
 8014db2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014db4:	4b07      	ldr	r3, [pc, #28]	; (8014dd4 <prvCheckForValidListAndQueue+0x60>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d005      	beq.n	8014dc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014dbc:	4b05      	ldr	r3, [pc, #20]	; (8014dd4 <prvCheckForValidListAndQueue+0x60>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	490b      	ldr	r1, [pc, #44]	; (8014df0 <prvCheckForValidListAndQueue+0x7c>)
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7fe f8ea 	bl	8012f9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014dc8:	f000 f974 	bl	80150b4 <vPortExitCritical>
}
 8014dcc:	bf00      	nop
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}
 8014dd2:	bf00      	nop
 8014dd4:	2000147c 	.word	0x2000147c
 8014dd8:	2000144c 	.word	0x2000144c
 8014ddc:	20001460 	.word	0x20001460
 8014de0:	20001474 	.word	0x20001474
 8014de4:	20001478 	.word	0x20001478
 8014de8:	20001528 	.word	0x20001528
 8014dec:	20001488 	.word	0x20001488
 8014df0:	08019728 	.word	0x08019728

08014df4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014df4:	b480      	push	{r7}
 8014df6:	b085      	sub	sp, #20
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	3b04      	subs	r3, #4
 8014e04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	3b04      	subs	r3, #4
 8014e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	f023 0201 	bic.w	r2, r3, #1
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	3b04      	subs	r3, #4
 8014e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014e24:	4a0c      	ldr	r2, [pc, #48]	; (8014e58 <pxPortInitialiseStack+0x64>)
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	3b14      	subs	r3, #20
 8014e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	3b04      	subs	r3, #4
 8014e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	f06f 0202 	mvn.w	r2, #2
 8014e42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	3b20      	subs	r3, #32
 8014e48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3714      	adds	r7, #20
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr
 8014e58:	08014e5d 	.word	0x08014e5d

08014e5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014e5c:	b480      	push	{r7}
 8014e5e:	b085      	sub	sp, #20
 8014e60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014e62:	2300      	movs	r3, #0
 8014e64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014e66:	4b12      	ldr	r3, [pc, #72]	; (8014eb0 <prvTaskExitError+0x54>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e6e:	d00a      	beq.n	8014e86 <prvTaskExitError+0x2a>
	__asm volatile
 8014e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e74:	f383 8811 	msr	BASEPRI, r3
 8014e78:	f3bf 8f6f 	isb	sy
 8014e7c:	f3bf 8f4f 	dsb	sy
 8014e80:	60fb      	str	r3, [r7, #12]
}
 8014e82:	bf00      	nop
 8014e84:	e7fe      	b.n	8014e84 <prvTaskExitError+0x28>
	__asm volatile
 8014e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e8a:	f383 8811 	msr	BASEPRI, r3
 8014e8e:	f3bf 8f6f 	isb	sy
 8014e92:	f3bf 8f4f 	dsb	sy
 8014e96:	60bb      	str	r3, [r7, #8]
}
 8014e98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014e9a:	bf00      	nop
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d0fc      	beq.n	8014e9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ea2:	bf00      	nop
 8014ea4:	bf00      	nop
 8014ea6:	3714      	adds	r7, #20
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eae:	4770      	bx	lr
 8014eb0:	20000138 	.word	0x20000138
	...

08014ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014ec0:	4b07      	ldr	r3, [pc, #28]	; (8014ee0 <pxCurrentTCBConst2>)
 8014ec2:	6819      	ldr	r1, [r3, #0]
 8014ec4:	6808      	ldr	r0, [r1, #0]
 8014ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eca:	f380 8809 	msr	PSP, r0
 8014ece:	f3bf 8f6f 	isb	sy
 8014ed2:	f04f 0000 	mov.w	r0, #0
 8014ed6:	f380 8811 	msr	BASEPRI, r0
 8014eda:	4770      	bx	lr
 8014edc:	f3af 8000 	nop.w

08014ee0 <pxCurrentTCBConst2>:
 8014ee0:	20000f44 	.word	0x20000f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014ee4:	bf00      	nop
 8014ee6:	bf00      	nop

08014ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014ee8:	4808      	ldr	r0, [pc, #32]	; (8014f0c <prvPortStartFirstTask+0x24>)
 8014eea:	6800      	ldr	r0, [r0, #0]
 8014eec:	6800      	ldr	r0, [r0, #0]
 8014eee:	f380 8808 	msr	MSP, r0
 8014ef2:	f04f 0000 	mov.w	r0, #0
 8014ef6:	f380 8814 	msr	CONTROL, r0
 8014efa:	b662      	cpsie	i
 8014efc:	b661      	cpsie	f
 8014efe:	f3bf 8f4f 	dsb	sy
 8014f02:	f3bf 8f6f 	isb	sy
 8014f06:	df00      	svc	0
 8014f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014f0a:	bf00      	nop
 8014f0c:	e000ed08 	.word	0xe000ed08

08014f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b086      	sub	sp, #24
 8014f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014f16:	4b46      	ldr	r3, [pc, #280]	; (8015030 <xPortStartScheduler+0x120>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	4a46      	ldr	r2, [pc, #280]	; (8015034 <xPortStartScheduler+0x124>)
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	d10a      	bne.n	8014f36 <xPortStartScheduler+0x26>
	__asm volatile
 8014f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f24:	f383 8811 	msr	BASEPRI, r3
 8014f28:	f3bf 8f6f 	isb	sy
 8014f2c:	f3bf 8f4f 	dsb	sy
 8014f30:	613b      	str	r3, [r7, #16]
}
 8014f32:	bf00      	nop
 8014f34:	e7fe      	b.n	8014f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014f36:	4b3e      	ldr	r3, [pc, #248]	; (8015030 <xPortStartScheduler+0x120>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	4a3f      	ldr	r2, [pc, #252]	; (8015038 <xPortStartScheduler+0x128>)
 8014f3c:	4293      	cmp	r3, r2
 8014f3e:	d10a      	bne.n	8014f56 <xPortStartScheduler+0x46>
	__asm volatile
 8014f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f44:	f383 8811 	msr	BASEPRI, r3
 8014f48:	f3bf 8f6f 	isb	sy
 8014f4c:	f3bf 8f4f 	dsb	sy
 8014f50:	60fb      	str	r3, [r7, #12]
}
 8014f52:	bf00      	nop
 8014f54:	e7fe      	b.n	8014f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014f56:	4b39      	ldr	r3, [pc, #228]	; (801503c <xPortStartScheduler+0x12c>)
 8014f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	22ff      	movs	r2, #255	; 0xff
 8014f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	b2db      	uxtb	r3, r3
 8014f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014f70:	78fb      	ldrb	r3, [r7, #3]
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014f78:	b2da      	uxtb	r2, r3
 8014f7a:	4b31      	ldr	r3, [pc, #196]	; (8015040 <xPortStartScheduler+0x130>)
 8014f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014f7e:	4b31      	ldr	r3, [pc, #196]	; (8015044 <xPortStartScheduler+0x134>)
 8014f80:	2207      	movs	r2, #7
 8014f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f84:	e009      	b.n	8014f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014f86:	4b2f      	ldr	r3, [pc, #188]	; (8015044 <xPortStartScheduler+0x134>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	3b01      	subs	r3, #1
 8014f8c:	4a2d      	ldr	r2, [pc, #180]	; (8015044 <xPortStartScheduler+0x134>)
 8014f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014f90:	78fb      	ldrb	r3, [r7, #3]
 8014f92:	b2db      	uxtb	r3, r3
 8014f94:	005b      	lsls	r3, r3, #1
 8014f96:	b2db      	uxtb	r3, r3
 8014f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f9a:	78fb      	ldrb	r3, [r7, #3]
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fa2:	2b80      	cmp	r3, #128	; 0x80
 8014fa4:	d0ef      	beq.n	8014f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014fa6:	4b27      	ldr	r3, [pc, #156]	; (8015044 <xPortStartScheduler+0x134>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	f1c3 0307 	rsb	r3, r3, #7
 8014fae:	2b04      	cmp	r3, #4
 8014fb0:	d00a      	beq.n	8014fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8014fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb6:	f383 8811 	msr	BASEPRI, r3
 8014fba:	f3bf 8f6f 	isb	sy
 8014fbe:	f3bf 8f4f 	dsb	sy
 8014fc2:	60bb      	str	r3, [r7, #8]
}
 8014fc4:	bf00      	nop
 8014fc6:	e7fe      	b.n	8014fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014fc8:	4b1e      	ldr	r3, [pc, #120]	; (8015044 <xPortStartScheduler+0x134>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	021b      	lsls	r3, r3, #8
 8014fce:	4a1d      	ldr	r2, [pc, #116]	; (8015044 <xPortStartScheduler+0x134>)
 8014fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014fd2:	4b1c      	ldr	r3, [pc, #112]	; (8015044 <xPortStartScheduler+0x134>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014fda:	4a1a      	ldr	r2, [pc, #104]	; (8015044 <xPortStartScheduler+0x134>)
 8014fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	b2da      	uxtb	r2, r3
 8014fe2:	697b      	ldr	r3, [r7, #20]
 8014fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014fe6:	4b18      	ldr	r3, [pc, #96]	; (8015048 <xPortStartScheduler+0x138>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	4a17      	ldr	r2, [pc, #92]	; (8015048 <xPortStartScheduler+0x138>)
 8014fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014ff2:	4b15      	ldr	r3, [pc, #84]	; (8015048 <xPortStartScheduler+0x138>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	4a14      	ldr	r2, [pc, #80]	; (8015048 <xPortStartScheduler+0x138>)
 8014ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014ffe:	f000 f8dd 	bl	80151bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015002:	4b12      	ldr	r3, [pc, #72]	; (801504c <xPortStartScheduler+0x13c>)
 8015004:	2200      	movs	r2, #0
 8015006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015008:	f000 f8fc 	bl	8015204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801500c:	4b10      	ldr	r3, [pc, #64]	; (8015050 <xPortStartScheduler+0x140>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	4a0f      	ldr	r2, [pc, #60]	; (8015050 <xPortStartScheduler+0x140>)
 8015012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015018:	f7ff ff66 	bl	8014ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801501c:	f7fe fd16 	bl	8013a4c <vTaskSwitchContext>
	prvTaskExitError();
 8015020:	f7ff ff1c 	bl	8014e5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015024:	2300      	movs	r3, #0
}
 8015026:	4618      	mov	r0, r3
 8015028:	3718      	adds	r7, #24
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	e000ed00 	.word	0xe000ed00
 8015034:	410fc271 	.word	0x410fc271
 8015038:	410fc270 	.word	0x410fc270
 801503c:	e000e400 	.word	0xe000e400
 8015040:	20001578 	.word	0x20001578
 8015044:	2000157c 	.word	0x2000157c
 8015048:	e000ed20 	.word	0xe000ed20
 801504c:	20000138 	.word	0x20000138
 8015050:	e000ef34 	.word	0xe000ef34

08015054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015054:	b480      	push	{r7}
 8015056:	b083      	sub	sp, #12
 8015058:	af00      	add	r7, sp, #0
	__asm volatile
 801505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801505e:	f383 8811 	msr	BASEPRI, r3
 8015062:	f3bf 8f6f 	isb	sy
 8015066:	f3bf 8f4f 	dsb	sy
 801506a:	607b      	str	r3, [r7, #4]
}
 801506c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801506e:	4b0f      	ldr	r3, [pc, #60]	; (80150ac <vPortEnterCritical+0x58>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	3301      	adds	r3, #1
 8015074:	4a0d      	ldr	r2, [pc, #52]	; (80150ac <vPortEnterCritical+0x58>)
 8015076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015078:	4b0c      	ldr	r3, [pc, #48]	; (80150ac <vPortEnterCritical+0x58>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b01      	cmp	r3, #1
 801507e:	d10f      	bne.n	80150a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015080:	4b0b      	ldr	r3, [pc, #44]	; (80150b0 <vPortEnterCritical+0x5c>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	b2db      	uxtb	r3, r3
 8015086:	2b00      	cmp	r3, #0
 8015088:	d00a      	beq.n	80150a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801508e:	f383 8811 	msr	BASEPRI, r3
 8015092:	f3bf 8f6f 	isb	sy
 8015096:	f3bf 8f4f 	dsb	sy
 801509a:	603b      	str	r3, [r7, #0]
}
 801509c:	bf00      	nop
 801509e:	e7fe      	b.n	801509e <vPortEnterCritical+0x4a>
	}
}
 80150a0:	bf00      	nop
 80150a2:	370c      	adds	r7, #12
 80150a4:	46bd      	mov	sp, r7
 80150a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150aa:	4770      	bx	lr
 80150ac:	20000138 	.word	0x20000138
 80150b0:	e000ed04 	.word	0xe000ed04

080150b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80150b4:	b480      	push	{r7}
 80150b6:	b083      	sub	sp, #12
 80150b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80150ba:	4b12      	ldr	r3, [pc, #72]	; (8015104 <vPortExitCritical+0x50>)
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d10a      	bne.n	80150d8 <vPortExitCritical+0x24>
	__asm volatile
 80150c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c6:	f383 8811 	msr	BASEPRI, r3
 80150ca:	f3bf 8f6f 	isb	sy
 80150ce:	f3bf 8f4f 	dsb	sy
 80150d2:	607b      	str	r3, [r7, #4]
}
 80150d4:	bf00      	nop
 80150d6:	e7fe      	b.n	80150d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80150d8:	4b0a      	ldr	r3, [pc, #40]	; (8015104 <vPortExitCritical+0x50>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	3b01      	subs	r3, #1
 80150de:	4a09      	ldr	r2, [pc, #36]	; (8015104 <vPortExitCritical+0x50>)
 80150e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80150e2:	4b08      	ldr	r3, [pc, #32]	; (8015104 <vPortExitCritical+0x50>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d105      	bne.n	80150f6 <vPortExitCritical+0x42>
 80150ea:	2300      	movs	r3, #0
 80150ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	f383 8811 	msr	BASEPRI, r3
}
 80150f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80150f6:	bf00      	nop
 80150f8:	370c      	adds	r7, #12
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr
 8015102:	bf00      	nop
 8015104:	20000138 	.word	0x20000138
	...

08015110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015110:	f3ef 8009 	mrs	r0, PSP
 8015114:	f3bf 8f6f 	isb	sy
 8015118:	4b15      	ldr	r3, [pc, #84]	; (8015170 <pxCurrentTCBConst>)
 801511a:	681a      	ldr	r2, [r3, #0]
 801511c:	f01e 0f10 	tst.w	lr, #16
 8015120:	bf08      	it	eq
 8015122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801512a:	6010      	str	r0, [r2, #0]
 801512c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015134:	f380 8811 	msr	BASEPRI, r0
 8015138:	f3bf 8f4f 	dsb	sy
 801513c:	f3bf 8f6f 	isb	sy
 8015140:	f7fe fc84 	bl	8013a4c <vTaskSwitchContext>
 8015144:	f04f 0000 	mov.w	r0, #0
 8015148:	f380 8811 	msr	BASEPRI, r0
 801514c:	bc09      	pop	{r0, r3}
 801514e:	6819      	ldr	r1, [r3, #0]
 8015150:	6808      	ldr	r0, [r1, #0]
 8015152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015156:	f01e 0f10 	tst.w	lr, #16
 801515a:	bf08      	it	eq
 801515c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015160:	f380 8809 	msr	PSP, r0
 8015164:	f3bf 8f6f 	isb	sy
 8015168:	4770      	bx	lr
 801516a:	bf00      	nop
 801516c:	f3af 8000 	nop.w

08015170 <pxCurrentTCBConst>:
 8015170:	20000f44 	.word	0x20000f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015174:	bf00      	nop
 8015176:	bf00      	nop

08015178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
	__asm volatile
 801517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015182:	f383 8811 	msr	BASEPRI, r3
 8015186:	f3bf 8f6f 	isb	sy
 801518a:	f3bf 8f4f 	dsb	sy
 801518e:	607b      	str	r3, [r7, #4]
}
 8015190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015192:	f7fe fba1 	bl	80138d8 <xTaskIncrementTick>
 8015196:	4603      	mov	r3, r0
 8015198:	2b00      	cmp	r3, #0
 801519a:	d003      	beq.n	80151a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801519c:	4b06      	ldr	r3, [pc, #24]	; (80151b8 <xPortSysTickHandler+0x40>)
 801519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151a2:	601a      	str	r2, [r3, #0]
 80151a4:	2300      	movs	r3, #0
 80151a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	f383 8811 	msr	BASEPRI, r3
}
 80151ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80151b0:	bf00      	nop
 80151b2:	3708      	adds	r7, #8
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	e000ed04 	.word	0xe000ed04

080151bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80151bc:	b480      	push	{r7}
 80151be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80151c0:	4b0b      	ldr	r3, [pc, #44]	; (80151f0 <vPortSetupTimerInterrupt+0x34>)
 80151c2:	2200      	movs	r2, #0
 80151c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80151c6:	4b0b      	ldr	r3, [pc, #44]	; (80151f4 <vPortSetupTimerInterrupt+0x38>)
 80151c8:	2200      	movs	r2, #0
 80151ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80151cc:	4b0a      	ldr	r3, [pc, #40]	; (80151f8 <vPortSetupTimerInterrupt+0x3c>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	4a0a      	ldr	r2, [pc, #40]	; (80151fc <vPortSetupTimerInterrupt+0x40>)
 80151d2:	fba2 2303 	umull	r2, r3, r2, r3
 80151d6:	099b      	lsrs	r3, r3, #6
 80151d8:	4a09      	ldr	r2, [pc, #36]	; (8015200 <vPortSetupTimerInterrupt+0x44>)
 80151da:	3b01      	subs	r3, #1
 80151dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80151de:	4b04      	ldr	r3, [pc, #16]	; (80151f0 <vPortSetupTimerInterrupt+0x34>)
 80151e0:	2207      	movs	r2, #7
 80151e2:	601a      	str	r2, [r3, #0]
}
 80151e4:	bf00      	nop
 80151e6:	46bd      	mov	sp, r7
 80151e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ec:	4770      	bx	lr
 80151ee:	bf00      	nop
 80151f0:	e000e010 	.word	0xe000e010
 80151f4:	e000e018 	.word	0xe000e018
 80151f8:	20000004 	.word	0x20000004
 80151fc:	10624dd3 	.word	0x10624dd3
 8015200:	e000e014 	.word	0xe000e014

08015204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015214 <vPortEnableVFP+0x10>
 8015208:	6801      	ldr	r1, [r0, #0]
 801520a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801520e:	6001      	str	r1, [r0, #0]
 8015210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015212:	bf00      	nop
 8015214:	e000ed88 	.word	0xe000ed88

08015218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015218:	b480      	push	{r7}
 801521a:	b085      	sub	sp, #20
 801521c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801521e:	f3ef 8305 	mrs	r3, IPSR
 8015222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	2b0f      	cmp	r3, #15
 8015228:	d914      	bls.n	8015254 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801522a:	4a17      	ldr	r2, [pc, #92]	; (8015288 <vPortValidateInterruptPriority+0x70>)
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	4413      	add	r3, r2
 8015230:	781b      	ldrb	r3, [r3, #0]
 8015232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015234:	4b15      	ldr	r3, [pc, #84]	; (801528c <vPortValidateInterruptPriority+0x74>)
 8015236:	781b      	ldrb	r3, [r3, #0]
 8015238:	7afa      	ldrb	r2, [r7, #11]
 801523a:	429a      	cmp	r2, r3
 801523c:	d20a      	bcs.n	8015254 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015242:	f383 8811 	msr	BASEPRI, r3
 8015246:	f3bf 8f6f 	isb	sy
 801524a:	f3bf 8f4f 	dsb	sy
 801524e:	607b      	str	r3, [r7, #4]
}
 8015250:	bf00      	nop
 8015252:	e7fe      	b.n	8015252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015254:	4b0e      	ldr	r3, [pc, #56]	; (8015290 <vPortValidateInterruptPriority+0x78>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801525c:	4b0d      	ldr	r3, [pc, #52]	; (8015294 <vPortValidateInterruptPriority+0x7c>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	429a      	cmp	r2, r3
 8015262:	d90a      	bls.n	801527a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015268:	f383 8811 	msr	BASEPRI, r3
 801526c:	f3bf 8f6f 	isb	sy
 8015270:	f3bf 8f4f 	dsb	sy
 8015274:	603b      	str	r3, [r7, #0]
}
 8015276:	bf00      	nop
 8015278:	e7fe      	b.n	8015278 <vPortValidateInterruptPriority+0x60>
	}
 801527a:	bf00      	nop
 801527c:	3714      	adds	r7, #20
 801527e:	46bd      	mov	sp, r7
 8015280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015284:	4770      	bx	lr
 8015286:	bf00      	nop
 8015288:	e000e3f0 	.word	0xe000e3f0
 801528c:	20001578 	.word	0x20001578
 8015290:	e000ed0c 	.word	0xe000ed0c
 8015294:	2000157c 	.word	0x2000157c

08015298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b08a      	sub	sp, #40	; 0x28
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80152a0:	2300      	movs	r3, #0
 80152a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80152a4:	f7fe f9cc 	bl	8013640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80152a8:	4b5b      	ldr	r3, [pc, #364]	; (8015418 <pvPortMalloc+0x180>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d101      	bne.n	80152b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80152b0:	f000 f92c 	bl	801550c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80152b4:	4b59      	ldr	r3, [pc, #356]	; (801541c <pvPortMalloc+0x184>)
 80152b6:	681a      	ldr	r2, [r3, #0]
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	4013      	ands	r3, r2
 80152bc:	2b00      	cmp	r3, #0
 80152be:	f040 8093 	bne.w	80153e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d01d      	beq.n	8015304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80152c8:	2208      	movs	r2, #8
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	4413      	add	r3, r2
 80152ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f003 0307 	and.w	r3, r3, #7
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d014      	beq.n	8015304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f023 0307 	bic.w	r3, r3, #7
 80152e0:	3308      	adds	r3, #8
 80152e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f003 0307 	and.w	r3, r3, #7
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d00a      	beq.n	8015304 <pvPortMalloc+0x6c>
	__asm volatile
 80152ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	617b      	str	r3, [r7, #20]
}
 8015300:	bf00      	nop
 8015302:	e7fe      	b.n	8015302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d06e      	beq.n	80153e8 <pvPortMalloc+0x150>
 801530a:	4b45      	ldr	r3, [pc, #276]	; (8015420 <pvPortMalloc+0x188>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	687a      	ldr	r2, [r7, #4]
 8015310:	429a      	cmp	r2, r3
 8015312:	d869      	bhi.n	80153e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015314:	4b43      	ldr	r3, [pc, #268]	; (8015424 <pvPortMalloc+0x18c>)
 8015316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015318:	4b42      	ldr	r3, [pc, #264]	; (8015424 <pvPortMalloc+0x18c>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801531e:	e004      	b.n	801532a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	687a      	ldr	r2, [r7, #4]
 8015330:	429a      	cmp	r2, r3
 8015332:	d903      	bls.n	801533c <pvPortMalloc+0xa4>
 8015334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d1f1      	bne.n	8015320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801533c:	4b36      	ldr	r3, [pc, #216]	; (8015418 <pvPortMalloc+0x180>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015342:	429a      	cmp	r2, r3
 8015344:	d050      	beq.n	80153e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015346:	6a3b      	ldr	r3, [r7, #32]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	2208      	movs	r2, #8
 801534c:	4413      	add	r3, r2
 801534e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015352:	681a      	ldr	r2, [r3, #0]
 8015354:	6a3b      	ldr	r3, [r7, #32]
 8015356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535a:	685a      	ldr	r2, [r3, #4]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	1ad2      	subs	r2, r2, r3
 8015360:	2308      	movs	r3, #8
 8015362:	005b      	lsls	r3, r3, #1
 8015364:	429a      	cmp	r2, r3
 8015366:	d91f      	bls.n	80153a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	4413      	add	r3, r2
 801536e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015370:	69bb      	ldr	r3, [r7, #24]
 8015372:	f003 0307 	and.w	r3, r3, #7
 8015376:	2b00      	cmp	r3, #0
 8015378:	d00a      	beq.n	8015390 <pvPortMalloc+0xf8>
	__asm volatile
 801537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801537e:	f383 8811 	msr	BASEPRI, r3
 8015382:	f3bf 8f6f 	isb	sy
 8015386:	f3bf 8f4f 	dsb	sy
 801538a:	613b      	str	r3, [r7, #16]
}
 801538c:	bf00      	nop
 801538e:	e7fe      	b.n	801538e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015392:	685a      	ldr	r2, [r3, #4]
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	1ad2      	subs	r2, r2, r3
 8015398:	69bb      	ldr	r3, [r7, #24]
 801539a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80153a2:	69b8      	ldr	r0, [r7, #24]
 80153a4:	f000 f914 	bl	80155d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80153a8:	4b1d      	ldr	r3, [pc, #116]	; (8015420 <pvPortMalloc+0x188>)
 80153aa:	681a      	ldr	r2, [r3, #0]
 80153ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ae:	685b      	ldr	r3, [r3, #4]
 80153b0:	1ad3      	subs	r3, r2, r3
 80153b2:	4a1b      	ldr	r2, [pc, #108]	; (8015420 <pvPortMalloc+0x188>)
 80153b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80153b6:	4b1a      	ldr	r3, [pc, #104]	; (8015420 <pvPortMalloc+0x188>)
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	4b1b      	ldr	r3, [pc, #108]	; (8015428 <pvPortMalloc+0x190>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d203      	bcs.n	80153ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80153c2:	4b17      	ldr	r3, [pc, #92]	; (8015420 <pvPortMalloc+0x188>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	4a18      	ldr	r2, [pc, #96]	; (8015428 <pvPortMalloc+0x190>)
 80153c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80153ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153cc:	685a      	ldr	r2, [r3, #4]
 80153ce:	4b13      	ldr	r3, [pc, #76]	; (801541c <pvPortMalloc+0x184>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	431a      	orrs	r2, r3
 80153d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80153d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153da:	2200      	movs	r2, #0
 80153dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80153de:	4b13      	ldr	r3, [pc, #76]	; (801542c <pvPortMalloc+0x194>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	3301      	adds	r3, #1
 80153e4:	4a11      	ldr	r2, [pc, #68]	; (801542c <pvPortMalloc+0x194>)
 80153e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80153e8:	f7fe f938 	bl	801365c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80153ec:	69fb      	ldr	r3, [r7, #28]
 80153ee:	f003 0307 	and.w	r3, r3, #7
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d00a      	beq.n	801540c <pvPortMalloc+0x174>
	__asm volatile
 80153f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153fa:	f383 8811 	msr	BASEPRI, r3
 80153fe:	f3bf 8f6f 	isb	sy
 8015402:	f3bf 8f4f 	dsb	sy
 8015406:	60fb      	str	r3, [r7, #12]
}
 8015408:	bf00      	nop
 801540a:	e7fe      	b.n	801540a <pvPortMalloc+0x172>
	return pvReturn;
 801540c:	69fb      	ldr	r3, [r7, #28]
}
 801540e:	4618      	mov	r0, r3
 8015410:	3728      	adds	r7, #40	; 0x28
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
 8015416:	bf00      	nop
 8015418:	20005bd8 	.word	0x20005bd8
 801541c:	20005bec 	.word	0x20005bec
 8015420:	20005bdc 	.word	0x20005bdc
 8015424:	20005bd0 	.word	0x20005bd0
 8015428:	20005be0 	.word	0x20005be0
 801542c:	20005be4 	.word	0x20005be4

08015430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b086      	sub	sp, #24
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d04d      	beq.n	80154de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015442:	2308      	movs	r3, #8
 8015444:	425b      	negs	r3, r3
 8015446:	697a      	ldr	r2, [r7, #20]
 8015448:	4413      	add	r3, r2
 801544a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801544c:	697b      	ldr	r3, [r7, #20]
 801544e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	685a      	ldr	r2, [r3, #4]
 8015454:	4b24      	ldr	r3, [pc, #144]	; (80154e8 <vPortFree+0xb8>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	4013      	ands	r3, r2
 801545a:	2b00      	cmp	r3, #0
 801545c:	d10a      	bne.n	8015474 <vPortFree+0x44>
	__asm volatile
 801545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015462:	f383 8811 	msr	BASEPRI, r3
 8015466:	f3bf 8f6f 	isb	sy
 801546a:	f3bf 8f4f 	dsb	sy
 801546e:	60fb      	str	r3, [r7, #12]
}
 8015470:	bf00      	nop
 8015472:	e7fe      	b.n	8015472 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015474:	693b      	ldr	r3, [r7, #16]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d00a      	beq.n	8015492 <vPortFree+0x62>
	__asm volatile
 801547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015480:	f383 8811 	msr	BASEPRI, r3
 8015484:	f3bf 8f6f 	isb	sy
 8015488:	f3bf 8f4f 	dsb	sy
 801548c:	60bb      	str	r3, [r7, #8]
}
 801548e:	bf00      	nop
 8015490:	e7fe      	b.n	8015490 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	685a      	ldr	r2, [r3, #4]
 8015496:	4b14      	ldr	r3, [pc, #80]	; (80154e8 <vPortFree+0xb8>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	4013      	ands	r3, r2
 801549c:	2b00      	cmp	r3, #0
 801549e:	d01e      	beq.n	80154de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d11a      	bne.n	80154de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	685a      	ldr	r2, [r3, #4]
 80154ac:	4b0e      	ldr	r3, [pc, #56]	; (80154e8 <vPortFree+0xb8>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	43db      	mvns	r3, r3
 80154b2:	401a      	ands	r2, r3
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80154b8:	f7fe f8c2 	bl	8013640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	685a      	ldr	r2, [r3, #4]
 80154c0:	4b0a      	ldr	r3, [pc, #40]	; (80154ec <vPortFree+0xbc>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4413      	add	r3, r2
 80154c6:	4a09      	ldr	r2, [pc, #36]	; (80154ec <vPortFree+0xbc>)
 80154c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80154ca:	6938      	ldr	r0, [r7, #16]
 80154cc:	f000 f880 	bl	80155d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80154d0:	4b07      	ldr	r3, [pc, #28]	; (80154f0 <vPortFree+0xc0>)
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	3301      	adds	r3, #1
 80154d6:	4a06      	ldr	r2, [pc, #24]	; (80154f0 <vPortFree+0xc0>)
 80154d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80154da:	f7fe f8bf 	bl	801365c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80154de:	bf00      	nop
 80154e0:	3718      	adds	r7, #24
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	20005bec 	.word	0x20005bec
 80154ec:	20005bdc 	.word	0x20005bdc
 80154f0:	20005be8 	.word	0x20005be8

080154f4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80154f4:	b480      	push	{r7}
 80154f6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80154f8:	4b03      	ldr	r3, [pc, #12]	; (8015508 <xPortGetFreeHeapSize+0x14>)
 80154fa:	681b      	ldr	r3, [r3, #0]
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr
 8015506:	bf00      	nop
 8015508:	20005bdc 	.word	0x20005bdc

0801550c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801550c:	b480      	push	{r7}
 801550e:	b085      	sub	sp, #20
 8015510:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015512:	f244 6350 	movw	r3, #18000	; 0x4650
 8015516:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015518:	4b27      	ldr	r3, [pc, #156]	; (80155b8 <prvHeapInit+0xac>)
 801551a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	f003 0307 	and.w	r3, r3, #7
 8015522:	2b00      	cmp	r3, #0
 8015524:	d00c      	beq.n	8015540 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	3307      	adds	r3, #7
 801552a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	f023 0307 	bic.w	r3, r3, #7
 8015532:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015534:	68ba      	ldr	r2, [r7, #8]
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	1ad3      	subs	r3, r2, r3
 801553a:	4a1f      	ldr	r2, [pc, #124]	; (80155b8 <prvHeapInit+0xac>)
 801553c:	4413      	add	r3, r2
 801553e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015544:	4a1d      	ldr	r2, [pc, #116]	; (80155bc <prvHeapInit+0xb0>)
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801554a:	4b1c      	ldr	r3, [pc, #112]	; (80155bc <prvHeapInit+0xb0>)
 801554c:	2200      	movs	r2, #0
 801554e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	68ba      	ldr	r2, [r7, #8]
 8015554:	4413      	add	r3, r2
 8015556:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015558:	2208      	movs	r2, #8
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	1a9b      	subs	r3, r3, r2
 801555e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	f023 0307 	bic.w	r3, r3, #7
 8015566:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	4a15      	ldr	r2, [pc, #84]	; (80155c0 <prvHeapInit+0xb4>)
 801556c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801556e:	4b14      	ldr	r3, [pc, #80]	; (80155c0 <prvHeapInit+0xb4>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	2200      	movs	r2, #0
 8015574:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015576:	4b12      	ldr	r3, [pc, #72]	; (80155c0 <prvHeapInit+0xb4>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	2200      	movs	r2, #0
 801557c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	68fa      	ldr	r2, [r7, #12]
 8015586:	1ad2      	subs	r2, r2, r3
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801558c:	4b0c      	ldr	r3, [pc, #48]	; (80155c0 <prvHeapInit+0xb4>)
 801558e:	681a      	ldr	r2, [r3, #0]
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	4a0a      	ldr	r2, [pc, #40]	; (80155c4 <prvHeapInit+0xb8>)
 801559a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	685b      	ldr	r3, [r3, #4]
 80155a0:	4a09      	ldr	r2, [pc, #36]	; (80155c8 <prvHeapInit+0xbc>)
 80155a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80155a4:	4b09      	ldr	r3, [pc, #36]	; (80155cc <prvHeapInit+0xc0>)
 80155a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80155aa:	601a      	str	r2, [r3, #0]
}
 80155ac:	bf00      	nop
 80155ae:	3714      	adds	r7, #20
 80155b0:	46bd      	mov	sp, r7
 80155b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b6:	4770      	bx	lr
 80155b8:	20001580 	.word	0x20001580
 80155bc:	20005bd0 	.word	0x20005bd0
 80155c0:	20005bd8 	.word	0x20005bd8
 80155c4:	20005be0 	.word	0x20005be0
 80155c8:	20005bdc 	.word	0x20005bdc
 80155cc:	20005bec 	.word	0x20005bec

080155d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80155d0:	b480      	push	{r7}
 80155d2:	b085      	sub	sp, #20
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80155d8:	4b28      	ldr	r3, [pc, #160]	; (801567c <prvInsertBlockIntoFreeList+0xac>)
 80155da:	60fb      	str	r3, [r7, #12]
 80155dc:	e002      	b.n	80155e4 <prvInsertBlockIntoFreeList+0x14>
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	60fb      	str	r3, [r7, #12]
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	687a      	ldr	r2, [r7, #4]
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d8f7      	bhi.n	80155de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	68ba      	ldr	r2, [r7, #8]
 80155f8:	4413      	add	r3, r2
 80155fa:	687a      	ldr	r2, [r7, #4]
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d108      	bne.n	8015612 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	685a      	ldr	r2, [r3, #4]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	685b      	ldr	r3, [r3, #4]
 8015608:	441a      	add	r2, r3
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	685b      	ldr	r3, [r3, #4]
 801561a:	68ba      	ldr	r2, [r7, #8]
 801561c:	441a      	add	r2, r3
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	429a      	cmp	r2, r3
 8015624:	d118      	bne.n	8015658 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	4b15      	ldr	r3, [pc, #84]	; (8015680 <prvInsertBlockIntoFreeList+0xb0>)
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	429a      	cmp	r2, r3
 8015630:	d00d      	beq.n	801564e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	685a      	ldr	r2, [r3, #4]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	685b      	ldr	r3, [r3, #4]
 801563c:	441a      	add	r2, r3
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	681a      	ldr	r2, [r3, #0]
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	601a      	str	r2, [r3, #0]
 801564c:	e008      	b.n	8015660 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801564e:	4b0c      	ldr	r3, [pc, #48]	; (8015680 <prvInsertBlockIntoFreeList+0xb0>)
 8015650:	681a      	ldr	r2, [r3, #0]
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	601a      	str	r2, [r3, #0]
 8015656:	e003      	b.n	8015660 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015660:	68fa      	ldr	r2, [r7, #12]
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	429a      	cmp	r2, r3
 8015666:	d002      	beq.n	801566e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	687a      	ldr	r2, [r7, #4]
 801566c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801566e:	bf00      	nop
 8015670:	3714      	adds	r7, #20
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr
 801567a:	bf00      	nop
 801567c:	20005bd0 	.word	0x20005bd0
 8015680:	20005bd8 	.word	0x20005bd8

08015684 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015688:	2200      	movs	r2, #0
 801568a:	4912      	ldr	r1, [pc, #72]	; (80156d4 <MX_USB_DEVICE_Init+0x50>)
 801568c:	4812      	ldr	r0, [pc, #72]	; (80156d8 <MX_USB_DEVICE_Init+0x54>)
 801568e:	f7f7 fba5 	bl	800cddc <USBD_Init>
 8015692:	4603      	mov	r3, r0
 8015694:	2b00      	cmp	r3, #0
 8015696:	d001      	beq.n	801569c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015698:	f7ef f9d2 	bl	8004a40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801569c:	490f      	ldr	r1, [pc, #60]	; (80156dc <MX_USB_DEVICE_Init+0x58>)
 801569e:	480e      	ldr	r0, [pc, #56]	; (80156d8 <MX_USB_DEVICE_Init+0x54>)
 80156a0:	f7f7 fbcc 	bl	800ce3c <USBD_RegisterClass>
 80156a4:	4603      	mov	r3, r0
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d001      	beq.n	80156ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80156aa:	f7ef f9c9 	bl	8004a40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80156ae:	490c      	ldr	r1, [pc, #48]	; (80156e0 <MX_USB_DEVICE_Init+0x5c>)
 80156b0:	4809      	ldr	r0, [pc, #36]	; (80156d8 <MX_USB_DEVICE_Init+0x54>)
 80156b2:	f7f7 faed 	bl	800cc90 <USBD_CDC_RegisterInterface>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d001      	beq.n	80156c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80156bc:	f7ef f9c0 	bl	8004a40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80156c0:	4805      	ldr	r0, [pc, #20]	; (80156d8 <MX_USB_DEVICE_Init+0x54>)
 80156c2:	f7f7 fbe2 	bl	800ce8a <USBD_Start>
 80156c6:	4603      	mov	r3, r0
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d001      	beq.n	80156d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80156cc:	f7ef f9b8 	bl	8004a40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80156d0:	bf00      	nop
 80156d2:	bd80      	pop	{r7, pc}
 80156d4:	20000150 	.word	0x20000150
 80156d8:	200153d8 	.word	0x200153d8
 80156dc:	20000034 	.word	0x20000034
 80156e0:	2000013c 	.word	0x2000013c

080156e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80156e8:	2200      	movs	r2, #0
 80156ea:	4905      	ldr	r1, [pc, #20]	; (8015700 <CDC_Init_FS+0x1c>)
 80156ec:	4805      	ldr	r0, [pc, #20]	; (8015704 <CDC_Init_FS+0x20>)
 80156ee:	f7f7 fae4 	bl	800ccba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80156f2:	4905      	ldr	r1, [pc, #20]	; (8015708 <CDC_Init_FS+0x24>)
 80156f4:	4803      	ldr	r0, [pc, #12]	; (8015704 <CDC_Init_FS+0x20>)
 80156f6:	f7f7 fafe 	bl	800ccf6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80156fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	bd80      	pop	{r7, pc}
 8015700:	20015ea8 	.word	0x20015ea8
 8015704:	200153d8 	.word	0x200153d8
 8015708:	200156a8 	.word	0x200156a8

0801570c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801570c:	b480      	push	{r7}
 801570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015710:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015712:	4618      	mov	r0, r3
 8015714:	46bd      	mov	sp, r7
 8015716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571a:	4770      	bx	lr

0801571c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801571c:	b480      	push	{r7}
 801571e:	b083      	sub	sp, #12
 8015720:	af00      	add	r7, sp, #0
 8015722:	4603      	mov	r3, r0
 8015724:	6039      	str	r1, [r7, #0]
 8015726:	71fb      	strb	r3, [r7, #7]
 8015728:	4613      	mov	r3, r2
 801572a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801572c:	79fb      	ldrb	r3, [r7, #7]
 801572e:	2b23      	cmp	r3, #35	; 0x23
 8015730:	d84a      	bhi.n	80157c8 <CDC_Control_FS+0xac>
 8015732:	a201      	add	r2, pc, #4	; (adr r2, 8015738 <CDC_Control_FS+0x1c>)
 8015734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015738:	080157c9 	.word	0x080157c9
 801573c:	080157c9 	.word	0x080157c9
 8015740:	080157c9 	.word	0x080157c9
 8015744:	080157c9 	.word	0x080157c9
 8015748:	080157c9 	.word	0x080157c9
 801574c:	080157c9 	.word	0x080157c9
 8015750:	080157c9 	.word	0x080157c9
 8015754:	080157c9 	.word	0x080157c9
 8015758:	080157c9 	.word	0x080157c9
 801575c:	080157c9 	.word	0x080157c9
 8015760:	080157c9 	.word	0x080157c9
 8015764:	080157c9 	.word	0x080157c9
 8015768:	080157c9 	.word	0x080157c9
 801576c:	080157c9 	.word	0x080157c9
 8015770:	080157c9 	.word	0x080157c9
 8015774:	080157c9 	.word	0x080157c9
 8015778:	080157c9 	.word	0x080157c9
 801577c:	080157c9 	.word	0x080157c9
 8015780:	080157c9 	.word	0x080157c9
 8015784:	080157c9 	.word	0x080157c9
 8015788:	080157c9 	.word	0x080157c9
 801578c:	080157c9 	.word	0x080157c9
 8015790:	080157c9 	.word	0x080157c9
 8015794:	080157c9 	.word	0x080157c9
 8015798:	080157c9 	.word	0x080157c9
 801579c:	080157c9 	.word	0x080157c9
 80157a0:	080157c9 	.word	0x080157c9
 80157a4:	080157c9 	.word	0x080157c9
 80157a8:	080157c9 	.word	0x080157c9
 80157ac:	080157c9 	.word	0x080157c9
 80157b0:	080157c9 	.word	0x080157c9
 80157b4:	080157c9 	.word	0x080157c9
 80157b8:	080157c9 	.word	0x080157c9
 80157bc:	080157c9 	.word	0x080157c9
 80157c0:	080157c9 	.word	0x080157c9
 80157c4:	080157c9 	.word	0x080157c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80157c8:	bf00      	nop
  }

  return (USBD_OK);
 80157ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	370c      	adds	r7, #12
 80157d0:	46bd      	mov	sp, r7
 80157d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d6:	4770      	bx	lr

080157d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b082      	sub	sp, #8
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
 80157e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80157e2:	6879      	ldr	r1, [r7, #4]
 80157e4:	4805      	ldr	r0, [pc, #20]	; (80157fc <CDC_Receive_FS+0x24>)
 80157e6:	f7f7 fa86 	bl	800ccf6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80157ea:	4804      	ldr	r0, [pc, #16]	; (80157fc <CDC_Receive_FS+0x24>)
 80157ec:	f7f7 facc 	bl	800cd88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80157f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80157f2:	4618      	mov	r0, r3
 80157f4:	3708      	adds	r7, #8
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}
 80157fa:	bf00      	nop
 80157fc:	200153d8 	.word	0x200153d8

08015800 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b084      	sub	sp, #16
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	460b      	mov	r3, r1
 801580a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801580c:	2300      	movs	r3, #0
 801580e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015810:	4b0d      	ldr	r3, [pc, #52]	; (8015848 <CDC_Transmit_FS+0x48>)
 8015812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015816:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801581e:	2b00      	cmp	r3, #0
 8015820:	d001      	beq.n	8015826 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015822:	2301      	movs	r3, #1
 8015824:	e00b      	b.n	801583e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015826:	887b      	ldrh	r3, [r7, #2]
 8015828:	461a      	mov	r2, r3
 801582a:	6879      	ldr	r1, [r7, #4]
 801582c:	4806      	ldr	r0, [pc, #24]	; (8015848 <CDC_Transmit_FS+0x48>)
 801582e:	f7f7 fa44 	bl	800ccba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015832:	4805      	ldr	r0, [pc, #20]	; (8015848 <CDC_Transmit_FS+0x48>)
 8015834:	f7f7 fa78 	bl	800cd28 <USBD_CDC_TransmitPacket>
 8015838:	4603      	mov	r3, r0
 801583a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801583c:	7bfb      	ldrb	r3, [r7, #15]
}
 801583e:	4618      	mov	r0, r3
 8015840:	3710      	adds	r7, #16
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}
 8015846:	bf00      	nop
 8015848:	200153d8 	.word	0x200153d8

0801584c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801584c:	b480      	push	{r7}
 801584e:	b087      	sub	sp, #28
 8015850:	af00      	add	r7, sp, #0
 8015852:	60f8      	str	r0, [r7, #12]
 8015854:	60b9      	str	r1, [r7, #8]
 8015856:	4613      	mov	r3, r2
 8015858:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801585a:	2300      	movs	r3, #0
 801585c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801585e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015862:	4618      	mov	r0, r3
 8015864:	371c      	adds	r7, #28
 8015866:	46bd      	mov	sp, r7
 8015868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586c:	4770      	bx	lr
	...

08015870 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015870:	b480      	push	{r7}
 8015872:	b083      	sub	sp, #12
 8015874:	af00      	add	r7, sp, #0
 8015876:	4603      	mov	r3, r0
 8015878:	6039      	str	r1, [r7, #0]
 801587a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	2212      	movs	r2, #18
 8015880:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015882:	4b03      	ldr	r3, [pc, #12]	; (8015890 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015884:	4618      	mov	r0, r3
 8015886:	370c      	adds	r7, #12
 8015888:	46bd      	mov	sp, r7
 801588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588e:	4770      	bx	lr
 8015890:	2000016c 	.word	0x2000016c

08015894 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015894:	b480      	push	{r7}
 8015896:	b083      	sub	sp, #12
 8015898:	af00      	add	r7, sp, #0
 801589a:	4603      	mov	r3, r0
 801589c:	6039      	str	r1, [r7, #0]
 801589e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	2204      	movs	r2, #4
 80158a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80158a6:	4b03      	ldr	r3, [pc, #12]	; (80158b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	370c      	adds	r7, #12
 80158ac:	46bd      	mov	sp, r7
 80158ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b2:	4770      	bx	lr
 80158b4:	20000180 	.word	0x20000180

080158b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	4603      	mov	r3, r0
 80158c0:	6039      	str	r1, [r7, #0]
 80158c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80158c4:	79fb      	ldrb	r3, [r7, #7]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d105      	bne.n	80158d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80158ca:	683a      	ldr	r2, [r7, #0]
 80158cc:	4907      	ldr	r1, [pc, #28]	; (80158ec <USBD_FS_ProductStrDescriptor+0x34>)
 80158ce:	4808      	ldr	r0, [pc, #32]	; (80158f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80158d0:	f7f8 fb0d 	bl	800deee <USBD_GetString>
 80158d4:	e004      	b.n	80158e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80158d6:	683a      	ldr	r2, [r7, #0]
 80158d8:	4904      	ldr	r1, [pc, #16]	; (80158ec <USBD_FS_ProductStrDescriptor+0x34>)
 80158da:	4805      	ldr	r0, [pc, #20]	; (80158f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80158dc:	f7f8 fb07 	bl	800deee <USBD_GetString>
  }
  return USBD_StrDesc;
 80158e0:	4b02      	ldr	r3, [pc, #8]	; (80158ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80158e2:	4618      	mov	r0, r3
 80158e4:	3708      	adds	r7, #8
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop
 80158ec:	200166a8 	.word	0x200166a8
 80158f0:	08019730 	.word	0x08019730

080158f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	4603      	mov	r3, r0
 80158fc:	6039      	str	r1, [r7, #0]
 80158fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015900:	683a      	ldr	r2, [r7, #0]
 8015902:	4904      	ldr	r1, [pc, #16]	; (8015914 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015904:	4804      	ldr	r0, [pc, #16]	; (8015918 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015906:	f7f8 faf2 	bl	800deee <USBD_GetString>
  return USBD_StrDesc;
 801590a:	4b02      	ldr	r3, [pc, #8]	; (8015914 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801590c:	4618      	mov	r0, r3
 801590e:	3708      	adds	r7, #8
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}
 8015914:	200166a8 	.word	0x200166a8
 8015918:	08019748 	.word	0x08019748

0801591c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	4603      	mov	r3, r0
 8015924:	6039      	str	r1, [r7, #0]
 8015926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	221a      	movs	r2, #26
 801592c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801592e:	f000 f843 	bl	80159b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015932:	4b02      	ldr	r3, [pc, #8]	; (801593c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015934:	4618      	mov	r0, r3
 8015936:	3708      	adds	r7, #8
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}
 801593c:	20000184 	.word	0x20000184

08015940 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	4603      	mov	r3, r0
 8015948:	6039      	str	r1, [r7, #0]
 801594a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801594c:	79fb      	ldrb	r3, [r7, #7]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d105      	bne.n	801595e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015952:	683a      	ldr	r2, [r7, #0]
 8015954:	4907      	ldr	r1, [pc, #28]	; (8015974 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015956:	4808      	ldr	r0, [pc, #32]	; (8015978 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015958:	f7f8 fac9 	bl	800deee <USBD_GetString>
 801595c:	e004      	b.n	8015968 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801595e:	683a      	ldr	r2, [r7, #0]
 8015960:	4904      	ldr	r1, [pc, #16]	; (8015974 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015962:	4805      	ldr	r0, [pc, #20]	; (8015978 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015964:	f7f8 fac3 	bl	800deee <USBD_GetString>
  }
  return USBD_StrDesc;
 8015968:	4b02      	ldr	r3, [pc, #8]	; (8015974 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801596a:	4618      	mov	r0, r3
 801596c:	3708      	adds	r7, #8
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}
 8015972:	bf00      	nop
 8015974:	200166a8 	.word	0x200166a8
 8015978:	0801975c 	.word	0x0801975c

0801597c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b082      	sub	sp, #8
 8015980:	af00      	add	r7, sp, #0
 8015982:	4603      	mov	r3, r0
 8015984:	6039      	str	r1, [r7, #0]
 8015986:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015988:	79fb      	ldrb	r3, [r7, #7]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d105      	bne.n	801599a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801598e:	683a      	ldr	r2, [r7, #0]
 8015990:	4907      	ldr	r1, [pc, #28]	; (80159b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015992:	4808      	ldr	r0, [pc, #32]	; (80159b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015994:	f7f8 faab 	bl	800deee <USBD_GetString>
 8015998:	e004      	b.n	80159a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801599a:	683a      	ldr	r2, [r7, #0]
 801599c:	4904      	ldr	r1, [pc, #16]	; (80159b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801599e:	4805      	ldr	r0, [pc, #20]	; (80159b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80159a0:	f7f8 faa5 	bl	800deee <USBD_GetString>
  }
  return USBD_StrDesc;
 80159a4:	4b02      	ldr	r3, [pc, #8]	; (80159b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3708      	adds	r7, #8
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}
 80159ae:	bf00      	nop
 80159b0:	200166a8 	.word	0x200166a8
 80159b4:	08019768 	.word	0x08019768

080159b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b084      	sub	sp, #16
 80159bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80159be:	4b0f      	ldr	r3, [pc, #60]	; (80159fc <Get_SerialNum+0x44>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80159c4:	4b0e      	ldr	r3, [pc, #56]	; (8015a00 <Get_SerialNum+0x48>)
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80159ca:	4b0e      	ldr	r3, [pc, #56]	; (8015a04 <Get_SerialNum+0x4c>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80159d0:	68fa      	ldr	r2, [r7, #12]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	4413      	add	r3, r2
 80159d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d009      	beq.n	80159f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80159de:	2208      	movs	r2, #8
 80159e0:	4909      	ldr	r1, [pc, #36]	; (8015a08 <Get_SerialNum+0x50>)
 80159e2:	68f8      	ldr	r0, [r7, #12]
 80159e4:	f000 f814 	bl	8015a10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80159e8:	2204      	movs	r2, #4
 80159ea:	4908      	ldr	r1, [pc, #32]	; (8015a0c <Get_SerialNum+0x54>)
 80159ec:	68b8      	ldr	r0, [r7, #8]
 80159ee:	f000 f80f 	bl	8015a10 <IntToUnicode>
  }
}
 80159f2:	bf00      	nop
 80159f4:	3710      	adds	r7, #16
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	bf00      	nop
 80159fc:	1fff7a10 	.word	0x1fff7a10
 8015a00:	1fff7a14 	.word	0x1fff7a14
 8015a04:	1fff7a18 	.word	0x1fff7a18
 8015a08:	20000186 	.word	0x20000186
 8015a0c:	20000196 	.word	0x20000196

08015a10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015a10:	b480      	push	{r7}
 8015a12:	b087      	sub	sp, #28
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	60f8      	str	r0, [r7, #12]
 8015a18:	60b9      	str	r1, [r7, #8]
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015a22:	2300      	movs	r3, #0
 8015a24:	75fb      	strb	r3, [r7, #23]
 8015a26:	e027      	b.n	8015a78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	0f1b      	lsrs	r3, r3, #28
 8015a2c:	2b09      	cmp	r3, #9
 8015a2e:	d80b      	bhi.n	8015a48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	0f1b      	lsrs	r3, r3, #28
 8015a34:	b2da      	uxtb	r2, r3
 8015a36:	7dfb      	ldrb	r3, [r7, #23]
 8015a38:	005b      	lsls	r3, r3, #1
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	440b      	add	r3, r1
 8015a40:	3230      	adds	r2, #48	; 0x30
 8015a42:	b2d2      	uxtb	r2, r2
 8015a44:	701a      	strb	r2, [r3, #0]
 8015a46:	e00a      	b.n	8015a5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	0f1b      	lsrs	r3, r3, #28
 8015a4c:	b2da      	uxtb	r2, r3
 8015a4e:	7dfb      	ldrb	r3, [r7, #23]
 8015a50:	005b      	lsls	r3, r3, #1
 8015a52:	4619      	mov	r1, r3
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	440b      	add	r3, r1
 8015a58:	3237      	adds	r2, #55	; 0x37
 8015a5a:	b2d2      	uxtb	r2, r2
 8015a5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	011b      	lsls	r3, r3, #4
 8015a62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015a64:	7dfb      	ldrb	r3, [r7, #23]
 8015a66:	005b      	lsls	r3, r3, #1
 8015a68:	3301      	adds	r3, #1
 8015a6a:	68ba      	ldr	r2, [r7, #8]
 8015a6c:	4413      	add	r3, r2
 8015a6e:	2200      	movs	r2, #0
 8015a70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015a72:	7dfb      	ldrb	r3, [r7, #23]
 8015a74:	3301      	adds	r3, #1
 8015a76:	75fb      	strb	r3, [r7, #23]
 8015a78:	7dfa      	ldrb	r2, [r7, #23]
 8015a7a:	79fb      	ldrb	r3, [r7, #7]
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d3d3      	bcc.n	8015a28 <IntToUnicode+0x18>
  }
}
 8015a80:	bf00      	nop
 8015a82:	bf00      	nop
 8015a84:	371c      	adds	r7, #28
 8015a86:	46bd      	mov	sp, r7
 8015a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8c:	4770      	bx	lr
	...

08015a90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b08a      	sub	sp, #40	; 0x28
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015a98:	f107 0314 	add.w	r3, r7, #20
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	601a      	str	r2, [r3, #0]
 8015aa0:	605a      	str	r2, [r3, #4]
 8015aa2:	609a      	str	r2, [r3, #8]
 8015aa4:	60da      	str	r2, [r3, #12]
 8015aa6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015ab0:	d147      	bne.n	8015b42 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	613b      	str	r3, [r7, #16]
 8015ab6:	4b25      	ldr	r3, [pc, #148]	; (8015b4c <HAL_PCD_MspInit+0xbc>)
 8015ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015aba:	4a24      	ldr	r2, [pc, #144]	; (8015b4c <HAL_PCD_MspInit+0xbc>)
 8015abc:	f043 0301 	orr.w	r3, r3, #1
 8015ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8015ac2:	4b22      	ldr	r3, [pc, #136]	; (8015b4c <HAL_PCD_MspInit+0xbc>)
 8015ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ac6:	f003 0301 	and.w	r3, r3, #1
 8015aca:	613b      	str	r3, [r7, #16]
 8015acc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8015ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8015adc:	f107 0314 	add.w	r3, r7, #20
 8015ae0:	4619      	mov	r1, r3
 8015ae2:	481b      	ldr	r0, [pc, #108]	; (8015b50 <HAL_PCD_MspInit+0xc0>)
 8015ae4:	f7f0 f9c2 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8015ae8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8015aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015aee:	2302      	movs	r3, #2
 8015af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015af2:	2300      	movs	r3, #0
 8015af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015af6:	2300      	movs	r3, #0
 8015af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015afa:	230a      	movs	r3, #10
 8015afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015afe:	f107 0314 	add.w	r3, r7, #20
 8015b02:	4619      	mov	r1, r3
 8015b04:	4812      	ldr	r0, [pc, #72]	; (8015b50 <HAL_PCD_MspInit+0xc0>)
 8015b06:	f7f0 f9b1 	bl	8005e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015b0a:	4b10      	ldr	r3, [pc, #64]	; (8015b4c <HAL_PCD_MspInit+0xbc>)
 8015b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b0e:	4a0f      	ldr	r2, [pc, #60]	; (8015b4c <HAL_PCD_MspInit+0xbc>)
 8015b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b14:	6353      	str	r3, [r2, #52]	; 0x34
 8015b16:	2300      	movs	r3, #0
 8015b18:	60fb      	str	r3, [r7, #12]
 8015b1a:	4b0c      	ldr	r3, [pc, #48]	; (8015b4c <HAL_PCD_MspInit+0xbc>)
 8015b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b1e:	4a0b      	ldr	r2, [pc, #44]	; (8015b4c <HAL_PCD_MspInit+0xbc>)
 8015b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015b24:	6453      	str	r3, [r2, #68]	; 0x44
 8015b26:	4b09      	ldr	r3, [pc, #36]	; (8015b4c <HAL_PCD_MspInit+0xbc>)
 8015b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b2e:	60fb      	str	r3, [r7, #12]
 8015b30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015b32:	2200      	movs	r2, #0
 8015b34:	2105      	movs	r1, #5
 8015b36:	2043      	movs	r0, #67	; 0x43
 8015b38:	f7f0 f96e 	bl	8005e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015b3c:	2043      	movs	r0, #67	; 0x43
 8015b3e:	f7f0 f987 	bl	8005e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015b42:	bf00      	nop
 8015b44:	3728      	adds	r7, #40	; 0x28
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}
 8015b4a:	bf00      	nop
 8015b4c:	40023800 	.word	0x40023800
 8015b50:	40020000 	.word	0x40020000

08015b54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b082      	sub	sp, #8
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015b68:	4619      	mov	r1, r3
 8015b6a:	4610      	mov	r0, r2
 8015b6c:	f7f7 f9d8 	bl	800cf20 <USBD_LL_SetupStage>
}
 8015b70:	bf00      	nop
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b082      	sub	sp, #8
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	460b      	mov	r3, r1
 8015b82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015b8a:	78fa      	ldrb	r2, [r7, #3]
 8015b8c:	6879      	ldr	r1, [r7, #4]
 8015b8e:	4613      	mov	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	1a9b      	subs	r3, r3, r2
 8015b94:	009b      	lsls	r3, r3, #2
 8015b96:	440b      	add	r3, r1
 8015b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	78fb      	ldrb	r3, [r7, #3]
 8015ba0:	4619      	mov	r1, r3
 8015ba2:	f7f7 fa12 	bl	800cfca <USBD_LL_DataOutStage>
}
 8015ba6:	bf00      	nop
 8015ba8:	3708      	adds	r7, #8
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}

08015bae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bae:	b580      	push	{r7, lr}
 8015bb0:	b082      	sub	sp, #8
 8015bb2:	af00      	add	r7, sp, #0
 8015bb4:	6078      	str	r0, [r7, #4]
 8015bb6:	460b      	mov	r3, r1
 8015bb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015bc0:	78fa      	ldrb	r2, [r7, #3]
 8015bc2:	6879      	ldr	r1, [r7, #4]
 8015bc4:	4613      	mov	r3, r2
 8015bc6:	00db      	lsls	r3, r3, #3
 8015bc8:	1a9b      	subs	r3, r3, r2
 8015bca:	009b      	lsls	r3, r3, #2
 8015bcc:	440b      	add	r3, r1
 8015bce:	3348      	adds	r3, #72	; 0x48
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	78fb      	ldrb	r3, [r7, #3]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	f7f7 fa5b 	bl	800d090 <USBD_LL_DataInStage>
}
 8015bda:	bf00      	nop
 8015bdc:	3708      	adds	r7, #8
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}

08015be2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015be2:	b580      	push	{r7, lr}
 8015be4:	b082      	sub	sp, #8
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f7f7 fb6f 	bl	800d2d4 <USBD_LL_SOF>
}
 8015bf6:	bf00      	nop
 8015bf8:	3708      	adds	r7, #8
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}

08015bfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bfe:	b580      	push	{r7, lr}
 8015c00:	b084      	sub	sp, #16
 8015c02:	af00      	add	r7, sp, #0
 8015c04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015c06:	2301      	movs	r3, #1
 8015c08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	68db      	ldr	r3, [r3, #12]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d102      	bne.n	8015c18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015c12:	2300      	movs	r3, #0
 8015c14:	73fb      	strb	r3, [r7, #15]
 8015c16:	e008      	b.n	8015c2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	68db      	ldr	r3, [r3, #12]
 8015c1c:	2b02      	cmp	r3, #2
 8015c1e:	d102      	bne.n	8015c26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015c20:	2301      	movs	r3, #1
 8015c22:	73fb      	strb	r3, [r7, #15]
 8015c24:	e001      	b.n	8015c2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015c26:	f7ee ff0b 	bl	8004a40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c30:	7bfa      	ldrb	r2, [r7, #15]
 8015c32:	4611      	mov	r1, r2
 8015c34:	4618      	mov	r0, r3
 8015c36:	f7f7 fb0f 	bl	800d258 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c40:	4618      	mov	r0, r3
 8015c42:	f7f7 fabb 	bl	800d1bc <USBD_LL_Reset>
}
 8015c46:	bf00      	nop
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
	...

08015c50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7f7 fb0a 	bl	800d278 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	6812      	ldr	r2, [r2, #0]
 8015c72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015c76:	f043 0301 	orr.w	r3, r3, #1
 8015c7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	6a1b      	ldr	r3, [r3, #32]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d005      	beq.n	8015c90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c84:	4b04      	ldr	r3, [pc, #16]	; (8015c98 <HAL_PCD_SuspendCallback+0x48>)
 8015c86:	691b      	ldr	r3, [r3, #16]
 8015c88:	4a03      	ldr	r2, [pc, #12]	; (8015c98 <HAL_PCD_SuspendCallback+0x48>)
 8015c8a:	f043 0306 	orr.w	r3, r3, #6
 8015c8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015c90:	bf00      	nop
 8015c92:	3708      	adds	r7, #8
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	e000ed00 	.word	0xe000ed00

08015c9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b082      	sub	sp, #8
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7f7 fafa 	bl	800d2a4 <USBD_LL_Resume>
}
 8015cb0:	bf00      	nop
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}

08015cb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	460b      	mov	r3, r1
 8015cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015cca:	78fa      	ldrb	r2, [r7, #3]
 8015ccc:	4611      	mov	r1, r2
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7f7 fb48 	bl	800d364 <USBD_LL_IsoOUTIncomplete>
}
 8015cd4:	bf00      	nop
 8015cd6:	3708      	adds	r7, #8
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}

08015cdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b082      	sub	sp, #8
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
 8015ce4:	460b      	mov	r3, r1
 8015ce6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015cee:	78fa      	ldrb	r2, [r7, #3]
 8015cf0:	4611      	mov	r1, r2
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7f7 fb10 	bl	800d318 <USBD_LL_IsoINIncomplete>
}
 8015cf8:	bf00      	nop
 8015cfa:	3708      	adds	r7, #8
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7f7 fb4e 	bl	800d3b0 <USBD_LL_DevConnected>
}
 8015d14:	bf00      	nop
 8015d16:	3708      	adds	r7, #8
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f7f7 fb4b 	bl	800d3c6 <USBD_LL_DevDisconnected>
}
 8015d30:	bf00      	nop
 8015d32:	3708      	adds	r7, #8
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b082      	sub	sp, #8
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d13c      	bne.n	8015dc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015d48:	4a20      	ldr	r2, [pc, #128]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	4a1e      	ldr	r2, [pc, #120]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015d58:	4b1c      	ldr	r3, [pc, #112]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015d5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015d60:	4b1a      	ldr	r3, [pc, #104]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d62:	2204      	movs	r2, #4
 8015d64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015d66:	4b19      	ldr	r3, [pc, #100]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d68:	2202      	movs	r2, #2
 8015d6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015d6c:	4b17      	ldr	r3, [pc, #92]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d6e:	2200      	movs	r2, #0
 8015d70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015d72:	4b16      	ldr	r3, [pc, #88]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d74:	2202      	movs	r2, #2
 8015d76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015d78:	4b14      	ldr	r3, [pc, #80]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015d7e:	4b13      	ldr	r3, [pc, #76]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d80:	2200      	movs	r2, #0
 8015d82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015d84:	4b11      	ldr	r3, [pc, #68]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d86:	2200      	movs	r2, #0
 8015d88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015d8a:	4b10      	ldr	r3, [pc, #64]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015d90:	4b0e      	ldr	r3, [pc, #56]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d92:	2200      	movs	r2, #0
 8015d94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015d96:	480d      	ldr	r0, [pc, #52]	; (8015dcc <USBD_LL_Init+0x94>)
 8015d98:	f7f1 fcdb 	bl	8007752 <HAL_PCD_Init>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d001      	beq.n	8015da6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015da2:	f7ee fe4d 	bl	8004a40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015da6:	2180      	movs	r1, #128	; 0x80
 8015da8:	4808      	ldr	r0, [pc, #32]	; (8015dcc <USBD_LL_Init+0x94>)
 8015daa:	f7f2 fe38 	bl	8008a1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015dae:	2240      	movs	r2, #64	; 0x40
 8015db0:	2100      	movs	r1, #0
 8015db2:	4806      	ldr	r0, [pc, #24]	; (8015dcc <USBD_LL_Init+0x94>)
 8015db4:	f7f2 fdec 	bl	8008990 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015db8:	2280      	movs	r2, #128	; 0x80
 8015dba:	2101      	movs	r1, #1
 8015dbc:	4803      	ldr	r0, [pc, #12]	; (8015dcc <USBD_LL_Init+0x94>)
 8015dbe:	f7f2 fde7 	bl	8008990 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015dc2:	2300      	movs	r3, #0
}
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	3708      	adds	r7, #8
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	200168a8 	.word	0x200168a8

08015dd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b084      	sub	sp, #16
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ddc:	2300      	movs	r3, #0
 8015dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7f1 fdd0 	bl	800798c <HAL_PCD_Start>
 8015dec:	4603      	mov	r3, r0
 8015dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015df0:	7bfb      	ldrb	r3, [r7, #15]
 8015df2:	4618      	mov	r0, r3
 8015df4:	f000 f942 	bl	801607c <USBD_Get_USB_Status>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3710      	adds	r7, #16
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}

08015e06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015e06:	b580      	push	{r7, lr}
 8015e08:	b084      	sub	sp, #16
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	6078      	str	r0, [r7, #4]
 8015e0e:	4608      	mov	r0, r1
 8015e10:	4611      	mov	r1, r2
 8015e12:	461a      	mov	r2, r3
 8015e14:	4603      	mov	r3, r0
 8015e16:	70fb      	strb	r3, [r7, #3]
 8015e18:	460b      	mov	r3, r1
 8015e1a:	70bb      	strb	r3, [r7, #2]
 8015e1c:	4613      	mov	r3, r2
 8015e1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e20:	2300      	movs	r3, #0
 8015e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e24:	2300      	movs	r3, #0
 8015e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e2e:	78bb      	ldrb	r3, [r7, #2]
 8015e30:	883a      	ldrh	r2, [r7, #0]
 8015e32:	78f9      	ldrb	r1, [r7, #3]
 8015e34:	f7f2 f9b4 	bl	80081a0 <HAL_PCD_EP_Open>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e3c:	7bfb      	ldrb	r3, [r7, #15]
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f000 f91c 	bl	801607c <USBD_Get_USB_Status>
 8015e44:	4603      	mov	r3, r0
 8015e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3710      	adds	r7, #16
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}

08015e52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e52:	b580      	push	{r7, lr}
 8015e54:	b084      	sub	sp, #16
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
 8015e5a:	460b      	mov	r3, r1
 8015e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e5e:	2300      	movs	r3, #0
 8015e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e62:	2300      	movs	r3, #0
 8015e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e6c:	78fa      	ldrb	r2, [r7, #3]
 8015e6e:	4611      	mov	r1, r2
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7f2 f9fd 	bl	8008270 <HAL_PCD_EP_Close>
 8015e76:	4603      	mov	r3, r0
 8015e78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e7a:	7bfb      	ldrb	r3, [r7, #15]
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f000 f8fd 	bl	801607c <USBD_Get_USB_Status>
 8015e82:	4603      	mov	r3, r0
 8015e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3710      	adds	r7, #16
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bd80      	pop	{r7, pc}

08015e90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b084      	sub	sp, #16
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	460b      	mov	r3, r1
 8015e9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015eaa:	78fa      	ldrb	r2, [r7, #3]
 8015eac:	4611      	mov	r1, r2
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7f2 fad5 	bl	800845e <HAL_PCD_EP_SetStall>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015eb8:	7bfb      	ldrb	r3, [r7, #15]
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f000 f8de 	bl	801607c <USBD_Get_USB_Status>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3710      	adds	r7, #16
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}

08015ece <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ece:	b580      	push	{r7, lr}
 8015ed0:	b084      	sub	sp, #16
 8015ed2:	af00      	add	r7, sp, #0
 8015ed4:	6078      	str	r0, [r7, #4]
 8015ed6:	460b      	mov	r3, r1
 8015ed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015eda:	2300      	movs	r3, #0
 8015edc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ee8:	78fa      	ldrb	r2, [r7, #3]
 8015eea:	4611      	mov	r1, r2
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7f2 fb1a 	bl	8008526 <HAL_PCD_EP_ClrStall>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ef6:	7bfb      	ldrb	r3, [r7, #15]
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f000 f8bf 	bl	801607c <USBD_Get_USB_Status>
 8015efe:	4603      	mov	r3, r0
 8015f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3710      	adds	r7, #16
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}

08015f0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f0c:	b480      	push	{r7}
 8015f0e:	b085      	sub	sp, #20
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
 8015f14:	460b      	mov	r3, r1
 8015f16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	da0b      	bge.n	8015f40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015f28:	78fb      	ldrb	r3, [r7, #3]
 8015f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f2e:	68f9      	ldr	r1, [r7, #12]
 8015f30:	4613      	mov	r3, r2
 8015f32:	00db      	lsls	r3, r3, #3
 8015f34:	1a9b      	subs	r3, r3, r2
 8015f36:	009b      	lsls	r3, r3, #2
 8015f38:	440b      	add	r3, r1
 8015f3a:	333e      	adds	r3, #62	; 0x3e
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	e00b      	b.n	8015f58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015f40:	78fb      	ldrb	r3, [r7, #3]
 8015f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f46:	68f9      	ldr	r1, [r7, #12]
 8015f48:	4613      	mov	r3, r2
 8015f4a:	00db      	lsls	r3, r3, #3
 8015f4c:	1a9b      	subs	r3, r3, r2
 8015f4e:	009b      	lsls	r3, r3, #2
 8015f50:	440b      	add	r3, r1
 8015f52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015f56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3714      	adds	r7, #20
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f62:	4770      	bx	lr

08015f64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	460b      	mov	r3, r1
 8015f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f70:	2300      	movs	r3, #0
 8015f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f74:	2300      	movs	r3, #0
 8015f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f7e:	78fa      	ldrb	r2, [r7, #3]
 8015f80:	4611      	mov	r1, r2
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7f2 f8e7 	bl	8008156 <HAL_PCD_SetAddress>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f8c:	7bfb      	ldrb	r3, [r7, #15]
 8015f8e:	4618      	mov	r0, r3
 8015f90:	f000 f874 	bl	801607c <USBD_Get_USB_Status>
 8015f94:	4603      	mov	r3, r0
 8015f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	3710      	adds	r7, #16
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}

08015fa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015fa2:	b580      	push	{r7, lr}
 8015fa4:	b086      	sub	sp, #24
 8015fa6:	af00      	add	r7, sp, #0
 8015fa8:	60f8      	str	r0, [r7, #12]
 8015faa:	607a      	str	r2, [r7, #4]
 8015fac:	603b      	str	r3, [r7, #0]
 8015fae:	460b      	mov	r3, r1
 8015fb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015fc0:	7af9      	ldrb	r1, [r7, #11]
 8015fc2:	683b      	ldr	r3, [r7, #0]
 8015fc4:	687a      	ldr	r2, [r7, #4]
 8015fc6:	f7f2 fa00 	bl	80083ca <HAL_PCD_EP_Transmit>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fce:	7dfb      	ldrb	r3, [r7, #23]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f000 f853 	bl	801607c <USBD_Get_USB_Status>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015fda:	7dbb      	ldrb	r3, [r7, #22]
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3718      	adds	r7, #24
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}

08015fe4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b086      	sub	sp, #24
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	60f8      	str	r0, [r7, #12]
 8015fec:	607a      	str	r2, [r7, #4]
 8015fee:	603b      	str	r3, [r7, #0]
 8015ff0:	460b      	mov	r3, r1
 8015ff2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016002:	7af9      	ldrb	r1, [r7, #11]
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	f7f2 f97c 	bl	8008304 <HAL_PCD_EP_Receive>
 801600c:	4603      	mov	r3, r0
 801600e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016010:	7dfb      	ldrb	r3, [r7, #23]
 8016012:	4618      	mov	r0, r3
 8016014:	f000 f832 	bl	801607c <USBD_Get_USB_Status>
 8016018:	4603      	mov	r3, r0
 801601a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801601c:	7dbb      	ldrb	r3, [r7, #22]
}
 801601e:	4618      	mov	r0, r3
 8016020:	3718      	adds	r7, #24
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}

08016026 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016026:	b580      	push	{r7, lr}
 8016028:	b082      	sub	sp, #8
 801602a:	af00      	add	r7, sp, #0
 801602c:	6078      	str	r0, [r7, #4]
 801602e:	460b      	mov	r3, r1
 8016030:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016038:	78fa      	ldrb	r2, [r7, #3]
 801603a:	4611      	mov	r1, r2
 801603c:	4618      	mov	r0, r3
 801603e:	f7f2 f9ac 	bl	800839a <HAL_PCD_EP_GetRxCount>
 8016042:	4603      	mov	r3, r0
}
 8016044:	4618      	mov	r0, r3
 8016046:	3708      	adds	r7, #8
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}

0801604c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801604c:	b480      	push	{r7}
 801604e:	b083      	sub	sp, #12
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016054:	4b03      	ldr	r3, [pc, #12]	; (8016064 <USBD_static_malloc+0x18>)
}
 8016056:	4618      	mov	r0, r3
 8016058:	370c      	adds	r7, #12
 801605a:	46bd      	mov	sp, r7
 801605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016060:	4770      	bx	lr
 8016062:	bf00      	nop
 8016064:	20005bf0 	.word	0x20005bf0

08016068 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016068:	b480      	push	{r7}
 801606a:	b083      	sub	sp, #12
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]

}
 8016070:	bf00      	nop
 8016072:	370c      	adds	r7, #12
 8016074:	46bd      	mov	sp, r7
 8016076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607a:	4770      	bx	lr

0801607c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801607c:	b480      	push	{r7}
 801607e:	b085      	sub	sp, #20
 8016080:	af00      	add	r7, sp, #0
 8016082:	4603      	mov	r3, r0
 8016084:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016086:	2300      	movs	r3, #0
 8016088:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801608a:	79fb      	ldrb	r3, [r7, #7]
 801608c:	2b03      	cmp	r3, #3
 801608e:	d817      	bhi.n	80160c0 <USBD_Get_USB_Status+0x44>
 8016090:	a201      	add	r2, pc, #4	; (adr r2, 8016098 <USBD_Get_USB_Status+0x1c>)
 8016092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016096:	bf00      	nop
 8016098:	080160a9 	.word	0x080160a9
 801609c:	080160af 	.word	0x080160af
 80160a0:	080160b5 	.word	0x080160b5
 80160a4:	080160bb 	.word	0x080160bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80160a8:	2300      	movs	r3, #0
 80160aa:	73fb      	strb	r3, [r7, #15]
    break;
 80160ac:	e00b      	b.n	80160c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80160ae:	2303      	movs	r3, #3
 80160b0:	73fb      	strb	r3, [r7, #15]
    break;
 80160b2:	e008      	b.n	80160c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80160b4:	2301      	movs	r3, #1
 80160b6:	73fb      	strb	r3, [r7, #15]
    break;
 80160b8:	e005      	b.n	80160c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80160ba:	2303      	movs	r3, #3
 80160bc:	73fb      	strb	r3, [r7, #15]
    break;
 80160be:	e002      	b.n	80160c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80160c0:	2303      	movs	r3, #3
 80160c2:	73fb      	strb	r3, [r7, #15]
    break;
 80160c4:	bf00      	nop
  }
  return usb_status;
 80160c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80160c8:	4618      	mov	r0, r3
 80160ca:	3714      	adds	r7, #20
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr

080160d4 <__errno>:
 80160d4:	4b01      	ldr	r3, [pc, #4]	; (80160dc <__errno+0x8>)
 80160d6:	6818      	ldr	r0, [r3, #0]
 80160d8:	4770      	bx	lr
 80160da:	bf00      	nop
 80160dc:	200001a0 	.word	0x200001a0

080160e0 <std>:
 80160e0:	2300      	movs	r3, #0
 80160e2:	b510      	push	{r4, lr}
 80160e4:	4604      	mov	r4, r0
 80160e6:	e9c0 3300 	strd	r3, r3, [r0]
 80160ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80160ee:	6083      	str	r3, [r0, #8]
 80160f0:	8181      	strh	r1, [r0, #12]
 80160f2:	6643      	str	r3, [r0, #100]	; 0x64
 80160f4:	81c2      	strh	r2, [r0, #14]
 80160f6:	6183      	str	r3, [r0, #24]
 80160f8:	4619      	mov	r1, r3
 80160fa:	2208      	movs	r2, #8
 80160fc:	305c      	adds	r0, #92	; 0x5c
 80160fe:	f000 f945 	bl	801638c <memset>
 8016102:	4b05      	ldr	r3, [pc, #20]	; (8016118 <std+0x38>)
 8016104:	6263      	str	r3, [r4, #36]	; 0x24
 8016106:	4b05      	ldr	r3, [pc, #20]	; (801611c <std+0x3c>)
 8016108:	62a3      	str	r3, [r4, #40]	; 0x28
 801610a:	4b05      	ldr	r3, [pc, #20]	; (8016120 <std+0x40>)
 801610c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801610e:	4b05      	ldr	r3, [pc, #20]	; (8016124 <std+0x44>)
 8016110:	6224      	str	r4, [r4, #32]
 8016112:	6323      	str	r3, [r4, #48]	; 0x30
 8016114:	bd10      	pop	{r4, pc}
 8016116:	bf00      	nop
 8016118:	08016ef9 	.word	0x08016ef9
 801611c:	08016f1b 	.word	0x08016f1b
 8016120:	08016f53 	.word	0x08016f53
 8016124:	08016f77 	.word	0x08016f77

08016128 <_cleanup_r>:
 8016128:	4901      	ldr	r1, [pc, #4]	; (8016130 <_cleanup_r+0x8>)
 801612a:	f000 b8af 	b.w	801628c <_fwalk_reent>
 801612e:	bf00      	nop
 8016130:	08017e75 	.word	0x08017e75

08016134 <__sfmoreglue>:
 8016134:	b570      	push	{r4, r5, r6, lr}
 8016136:	1e4a      	subs	r2, r1, #1
 8016138:	2568      	movs	r5, #104	; 0x68
 801613a:	4355      	muls	r5, r2
 801613c:	460e      	mov	r6, r1
 801613e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016142:	f000 f97b 	bl	801643c <_malloc_r>
 8016146:	4604      	mov	r4, r0
 8016148:	b140      	cbz	r0, 801615c <__sfmoreglue+0x28>
 801614a:	2100      	movs	r1, #0
 801614c:	e9c0 1600 	strd	r1, r6, [r0]
 8016150:	300c      	adds	r0, #12
 8016152:	60a0      	str	r0, [r4, #8]
 8016154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016158:	f000 f918 	bl	801638c <memset>
 801615c:	4620      	mov	r0, r4
 801615e:	bd70      	pop	{r4, r5, r6, pc}

08016160 <__sfp_lock_acquire>:
 8016160:	4801      	ldr	r0, [pc, #4]	; (8016168 <__sfp_lock_acquire+0x8>)
 8016162:	f000 b8f2 	b.w	801634a <__retarget_lock_acquire_recursive>
 8016166:	bf00      	nop
 8016168:	20016cb8 	.word	0x20016cb8

0801616c <__sfp_lock_release>:
 801616c:	4801      	ldr	r0, [pc, #4]	; (8016174 <__sfp_lock_release+0x8>)
 801616e:	f000 b8ed 	b.w	801634c <__retarget_lock_release_recursive>
 8016172:	bf00      	nop
 8016174:	20016cb8 	.word	0x20016cb8

08016178 <__sinit_lock_acquire>:
 8016178:	4801      	ldr	r0, [pc, #4]	; (8016180 <__sinit_lock_acquire+0x8>)
 801617a:	f000 b8e6 	b.w	801634a <__retarget_lock_acquire_recursive>
 801617e:	bf00      	nop
 8016180:	20016cb3 	.word	0x20016cb3

08016184 <__sinit_lock_release>:
 8016184:	4801      	ldr	r0, [pc, #4]	; (801618c <__sinit_lock_release+0x8>)
 8016186:	f000 b8e1 	b.w	801634c <__retarget_lock_release_recursive>
 801618a:	bf00      	nop
 801618c:	20016cb3 	.word	0x20016cb3

08016190 <__sinit>:
 8016190:	b510      	push	{r4, lr}
 8016192:	4604      	mov	r4, r0
 8016194:	f7ff fff0 	bl	8016178 <__sinit_lock_acquire>
 8016198:	69a3      	ldr	r3, [r4, #24]
 801619a:	b11b      	cbz	r3, 80161a4 <__sinit+0x14>
 801619c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161a0:	f7ff bff0 	b.w	8016184 <__sinit_lock_release>
 80161a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80161a8:	6523      	str	r3, [r4, #80]	; 0x50
 80161aa:	4b13      	ldr	r3, [pc, #76]	; (80161f8 <__sinit+0x68>)
 80161ac:	4a13      	ldr	r2, [pc, #76]	; (80161fc <__sinit+0x6c>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80161b2:	42a3      	cmp	r3, r4
 80161b4:	bf04      	itt	eq
 80161b6:	2301      	moveq	r3, #1
 80161b8:	61a3      	streq	r3, [r4, #24]
 80161ba:	4620      	mov	r0, r4
 80161bc:	f000 f820 	bl	8016200 <__sfp>
 80161c0:	6060      	str	r0, [r4, #4]
 80161c2:	4620      	mov	r0, r4
 80161c4:	f000 f81c 	bl	8016200 <__sfp>
 80161c8:	60a0      	str	r0, [r4, #8]
 80161ca:	4620      	mov	r0, r4
 80161cc:	f000 f818 	bl	8016200 <__sfp>
 80161d0:	2200      	movs	r2, #0
 80161d2:	60e0      	str	r0, [r4, #12]
 80161d4:	2104      	movs	r1, #4
 80161d6:	6860      	ldr	r0, [r4, #4]
 80161d8:	f7ff ff82 	bl	80160e0 <std>
 80161dc:	68a0      	ldr	r0, [r4, #8]
 80161de:	2201      	movs	r2, #1
 80161e0:	2109      	movs	r1, #9
 80161e2:	f7ff ff7d 	bl	80160e0 <std>
 80161e6:	68e0      	ldr	r0, [r4, #12]
 80161e8:	2202      	movs	r2, #2
 80161ea:	2112      	movs	r1, #18
 80161ec:	f7ff ff78 	bl	80160e0 <std>
 80161f0:	2301      	movs	r3, #1
 80161f2:	61a3      	str	r3, [r4, #24]
 80161f4:	e7d2      	b.n	801619c <__sinit+0xc>
 80161f6:	bf00      	nop
 80161f8:	08019fa8 	.word	0x08019fa8
 80161fc:	08016129 	.word	0x08016129

08016200 <__sfp>:
 8016200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016202:	4607      	mov	r7, r0
 8016204:	f7ff ffac 	bl	8016160 <__sfp_lock_acquire>
 8016208:	4b1e      	ldr	r3, [pc, #120]	; (8016284 <__sfp+0x84>)
 801620a:	681e      	ldr	r6, [r3, #0]
 801620c:	69b3      	ldr	r3, [r6, #24]
 801620e:	b913      	cbnz	r3, 8016216 <__sfp+0x16>
 8016210:	4630      	mov	r0, r6
 8016212:	f7ff ffbd 	bl	8016190 <__sinit>
 8016216:	3648      	adds	r6, #72	; 0x48
 8016218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801621c:	3b01      	subs	r3, #1
 801621e:	d503      	bpl.n	8016228 <__sfp+0x28>
 8016220:	6833      	ldr	r3, [r6, #0]
 8016222:	b30b      	cbz	r3, 8016268 <__sfp+0x68>
 8016224:	6836      	ldr	r6, [r6, #0]
 8016226:	e7f7      	b.n	8016218 <__sfp+0x18>
 8016228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801622c:	b9d5      	cbnz	r5, 8016264 <__sfp+0x64>
 801622e:	4b16      	ldr	r3, [pc, #88]	; (8016288 <__sfp+0x88>)
 8016230:	60e3      	str	r3, [r4, #12]
 8016232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016236:	6665      	str	r5, [r4, #100]	; 0x64
 8016238:	f000 f886 	bl	8016348 <__retarget_lock_init_recursive>
 801623c:	f7ff ff96 	bl	801616c <__sfp_lock_release>
 8016240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016248:	6025      	str	r5, [r4, #0]
 801624a:	61a5      	str	r5, [r4, #24]
 801624c:	2208      	movs	r2, #8
 801624e:	4629      	mov	r1, r5
 8016250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016254:	f000 f89a 	bl	801638c <memset>
 8016258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801625c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016260:	4620      	mov	r0, r4
 8016262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016264:	3468      	adds	r4, #104	; 0x68
 8016266:	e7d9      	b.n	801621c <__sfp+0x1c>
 8016268:	2104      	movs	r1, #4
 801626a:	4638      	mov	r0, r7
 801626c:	f7ff ff62 	bl	8016134 <__sfmoreglue>
 8016270:	4604      	mov	r4, r0
 8016272:	6030      	str	r0, [r6, #0]
 8016274:	2800      	cmp	r0, #0
 8016276:	d1d5      	bne.n	8016224 <__sfp+0x24>
 8016278:	f7ff ff78 	bl	801616c <__sfp_lock_release>
 801627c:	230c      	movs	r3, #12
 801627e:	603b      	str	r3, [r7, #0]
 8016280:	e7ee      	b.n	8016260 <__sfp+0x60>
 8016282:	bf00      	nop
 8016284:	08019fa8 	.word	0x08019fa8
 8016288:	ffff0001 	.word	0xffff0001

0801628c <_fwalk_reent>:
 801628c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016290:	4606      	mov	r6, r0
 8016292:	4688      	mov	r8, r1
 8016294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016298:	2700      	movs	r7, #0
 801629a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801629e:	f1b9 0901 	subs.w	r9, r9, #1
 80162a2:	d505      	bpl.n	80162b0 <_fwalk_reent+0x24>
 80162a4:	6824      	ldr	r4, [r4, #0]
 80162a6:	2c00      	cmp	r4, #0
 80162a8:	d1f7      	bne.n	801629a <_fwalk_reent+0xe>
 80162aa:	4638      	mov	r0, r7
 80162ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162b0:	89ab      	ldrh	r3, [r5, #12]
 80162b2:	2b01      	cmp	r3, #1
 80162b4:	d907      	bls.n	80162c6 <_fwalk_reent+0x3a>
 80162b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80162ba:	3301      	adds	r3, #1
 80162bc:	d003      	beq.n	80162c6 <_fwalk_reent+0x3a>
 80162be:	4629      	mov	r1, r5
 80162c0:	4630      	mov	r0, r6
 80162c2:	47c0      	blx	r8
 80162c4:	4307      	orrs	r7, r0
 80162c6:	3568      	adds	r5, #104	; 0x68
 80162c8:	e7e9      	b.n	801629e <_fwalk_reent+0x12>
	...

080162cc <__libc_init_array>:
 80162cc:	b570      	push	{r4, r5, r6, lr}
 80162ce:	4d0d      	ldr	r5, [pc, #52]	; (8016304 <__libc_init_array+0x38>)
 80162d0:	4c0d      	ldr	r4, [pc, #52]	; (8016308 <__libc_init_array+0x3c>)
 80162d2:	1b64      	subs	r4, r4, r5
 80162d4:	10a4      	asrs	r4, r4, #2
 80162d6:	2600      	movs	r6, #0
 80162d8:	42a6      	cmp	r6, r4
 80162da:	d109      	bne.n	80162f0 <__libc_init_array+0x24>
 80162dc:	4d0b      	ldr	r5, [pc, #44]	; (801630c <__libc_init_array+0x40>)
 80162de:	4c0c      	ldr	r4, [pc, #48]	; (8016310 <__libc_init_array+0x44>)
 80162e0:	f002 fea4 	bl	801902c <_init>
 80162e4:	1b64      	subs	r4, r4, r5
 80162e6:	10a4      	asrs	r4, r4, #2
 80162e8:	2600      	movs	r6, #0
 80162ea:	42a6      	cmp	r6, r4
 80162ec:	d105      	bne.n	80162fa <__libc_init_array+0x2e>
 80162ee:	bd70      	pop	{r4, r5, r6, pc}
 80162f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80162f4:	4798      	blx	r3
 80162f6:	3601      	adds	r6, #1
 80162f8:	e7ee      	b.n	80162d8 <__libc_init_array+0xc>
 80162fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80162fe:	4798      	blx	r3
 8016300:	3601      	adds	r6, #1
 8016302:	e7f2      	b.n	80162ea <__libc_init_array+0x1e>
 8016304:	0801a35c 	.word	0x0801a35c
 8016308:	0801a35c 	.word	0x0801a35c
 801630c:	0801a35c 	.word	0x0801a35c
 8016310:	0801a360 	.word	0x0801a360

08016314 <__itoa>:
 8016314:	1e93      	subs	r3, r2, #2
 8016316:	2b22      	cmp	r3, #34	; 0x22
 8016318:	b510      	push	{r4, lr}
 801631a:	460c      	mov	r4, r1
 801631c:	d904      	bls.n	8016328 <__itoa+0x14>
 801631e:	2300      	movs	r3, #0
 8016320:	700b      	strb	r3, [r1, #0]
 8016322:	461c      	mov	r4, r3
 8016324:	4620      	mov	r0, r4
 8016326:	bd10      	pop	{r4, pc}
 8016328:	2a0a      	cmp	r2, #10
 801632a:	d109      	bne.n	8016340 <__itoa+0x2c>
 801632c:	2800      	cmp	r0, #0
 801632e:	da07      	bge.n	8016340 <__itoa+0x2c>
 8016330:	232d      	movs	r3, #45	; 0x2d
 8016332:	700b      	strb	r3, [r1, #0]
 8016334:	4240      	negs	r0, r0
 8016336:	2101      	movs	r1, #1
 8016338:	4421      	add	r1, r4
 801633a:	f000 fe37 	bl	8016fac <__utoa>
 801633e:	e7f1      	b.n	8016324 <__itoa+0x10>
 8016340:	2100      	movs	r1, #0
 8016342:	e7f9      	b.n	8016338 <__itoa+0x24>

08016344 <itoa>:
 8016344:	f7ff bfe6 	b.w	8016314 <__itoa>

08016348 <__retarget_lock_init_recursive>:
 8016348:	4770      	bx	lr

0801634a <__retarget_lock_acquire_recursive>:
 801634a:	4770      	bx	lr

0801634c <__retarget_lock_release_recursive>:
 801634c:	4770      	bx	lr
	...

08016350 <malloc>:
 8016350:	4b02      	ldr	r3, [pc, #8]	; (801635c <malloc+0xc>)
 8016352:	4601      	mov	r1, r0
 8016354:	6818      	ldr	r0, [r3, #0]
 8016356:	f000 b871 	b.w	801643c <_malloc_r>
 801635a:	bf00      	nop
 801635c:	200001a0 	.word	0x200001a0

08016360 <free>:
 8016360:	4b02      	ldr	r3, [pc, #8]	; (801636c <free+0xc>)
 8016362:	4601      	mov	r1, r0
 8016364:	6818      	ldr	r0, [r3, #0]
 8016366:	f000 b819 	b.w	801639c <_free_r>
 801636a:	bf00      	nop
 801636c:	200001a0 	.word	0x200001a0

08016370 <memcpy>:
 8016370:	440a      	add	r2, r1
 8016372:	4291      	cmp	r1, r2
 8016374:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016378:	d100      	bne.n	801637c <memcpy+0xc>
 801637a:	4770      	bx	lr
 801637c:	b510      	push	{r4, lr}
 801637e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016386:	4291      	cmp	r1, r2
 8016388:	d1f9      	bne.n	801637e <memcpy+0xe>
 801638a:	bd10      	pop	{r4, pc}

0801638c <memset>:
 801638c:	4402      	add	r2, r0
 801638e:	4603      	mov	r3, r0
 8016390:	4293      	cmp	r3, r2
 8016392:	d100      	bne.n	8016396 <memset+0xa>
 8016394:	4770      	bx	lr
 8016396:	f803 1b01 	strb.w	r1, [r3], #1
 801639a:	e7f9      	b.n	8016390 <memset+0x4>

0801639c <_free_r>:
 801639c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801639e:	2900      	cmp	r1, #0
 80163a0:	d048      	beq.n	8016434 <_free_r+0x98>
 80163a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163a6:	9001      	str	r0, [sp, #4]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	f1a1 0404 	sub.w	r4, r1, #4
 80163ae:	bfb8      	it	lt
 80163b0:	18e4      	addlt	r4, r4, r3
 80163b2:	f001 fdb1 	bl	8017f18 <__malloc_lock>
 80163b6:	4a20      	ldr	r2, [pc, #128]	; (8016438 <_free_r+0x9c>)
 80163b8:	9801      	ldr	r0, [sp, #4]
 80163ba:	6813      	ldr	r3, [r2, #0]
 80163bc:	4615      	mov	r5, r2
 80163be:	b933      	cbnz	r3, 80163ce <_free_r+0x32>
 80163c0:	6063      	str	r3, [r4, #4]
 80163c2:	6014      	str	r4, [r2, #0]
 80163c4:	b003      	add	sp, #12
 80163c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163ca:	f001 bdab 	b.w	8017f24 <__malloc_unlock>
 80163ce:	42a3      	cmp	r3, r4
 80163d0:	d90b      	bls.n	80163ea <_free_r+0x4e>
 80163d2:	6821      	ldr	r1, [r4, #0]
 80163d4:	1862      	adds	r2, r4, r1
 80163d6:	4293      	cmp	r3, r2
 80163d8:	bf04      	itt	eq
 80163da:	681a      	ldreq	r2, [r3, #0]
 80163dc:	685b      	ldreq	r3, [r3, #4]
 80163de:	6063      	str	r3, [r4, #4]
 80163e0:	bf04      	itt	eq
 80163e2:	1852      	addeq	r2, r2, r1
 80163e4:	6022      	streq	r2, [r4, #0]
 80163e6:	602c      	str	r4, [r5, #0]
 80163e8:	e7ec      	b.n	80163c4 <_free_r+0x28>
 80163ea:	461a      	mov	r2, r3
 80163ec:	685b      	ldr	r3, [r3, #4]
 80163ee:	b10b      	cbz	r3, 80163f4 <_free_r+0x58>
 80163f0:	42a3      	cmp	r3, r4
 80163f2:	d9fa      	bls.n	80163ea <_free_r+0x4e>
 80163f4:	6811      	ldr	r1, [r2, #0]
 80163f6:	1855      	adds	r5, r2, r1
 80163f8:	42a5      	cmp	r5, r4
 80163fa:	d10b      	bne.n	8016414 <_free_r+0x78>
 80163fc:	6824      	ldr	r4, [r4, #0]
 80163fe:	4421      	add	r1, r4
 8016400:	1854      	adds	r4, r2, r1
 8016402:	42a3      	cmp	r3, r4
 8016404:	6011      	str	r1, [r2, #0]
 8016406:	d1dd      	bne.n	80163c4 <_free_r+0x28>
 8016408:	681c      	ldr	r4, [r3, #0]
 801640a:	685b      	ldr	r3, [r3, #4]
 801640c:	6053      	str	r3, [r2, #4]
 801640e:	4421      	add	r1, r4
 8016410:	6011      	str	r1, [r2, #0]
 8016412:	e7d7      	b.n	80163c4 <_free_r+0x28>
 8016414:	d902      	bls.n	801641c <_free_r+0x80>
 8016416:	230c      	movs	r3, #12
 8016418:	6003      	str	r3, [r0, #0]
 801641a:	e7d3      	b.n	80163c4 <_free_r+0x28>
 801641c:	6825      	ldr	r5, [r4, #0]
 801641e:	1961      	adds	r1, r4, r5
 8016420:	428b      	cmp	r3, r1
 8016422:	bf04      	itt	eq
 8016424:	6819      	ldreq	r1, [r3, #0]
 8016426:	685b      	ldreq	r3, [r3, #4]
 8016428:	6063      	str	r3, [r4, #4]
 801642a:	bf04      	itt	eq
 801642c:	1949      	addeq	r1, r1, r5
 801642e:	6021      	streq	r1, [r4, #0]
 8016430:	6054      	str	r4, [r2, #4]
 8016432:	e7c7      	b.n	80163c4 <_free_r+0x28>
 8016434:	b003      	add	sp, #12
 8016436:	bd30      	pop	{r4, r5, pc}
 8016438:	20005e10 	.word	0x20005e10

0801643c <_malloc_r>:
 801643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801643e:	1ccd      	adds	r5, r1, #3
 8016440:	f025 0503 	bic.w	r5, r5, #3
 8016444:	3508      	adds	r5, #8
 8016446:	2d0c      	cmp	r5, #12
 8016448:	bf38      	it	cc
 801644a:	250c      	movcc	r5, #12
 801644c:	2d00      	cmp	r5, #0
 801644e:	4606      	mov	r6, r0
 8016450:	db01      	blt.n	8016456 <_malloc_r+0x1a>
 8016452:	42a9      	cmp	r1, r5
 8016454:	d903      	bls.n	801645e <_malloc_r+0x22>
 8016456:	230c      	movs	r3, #12
 8016458:	6033      	str	r3, [r6, #0]
 801645a:	2000      	movs	r0, #0
 801645c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801645e:	f001 fd5b 	bl	8017f18 <__malloc_lock>
 8016462:	4921      	ldr	r1, [pc, #132]	; (80164e8 <_malloc_r+0xac>)
 8016464:	680a      	ldr	r2, [r1, #0]
 8016466:	4614      	mov	r4, r2
 8016468:	b99c      	cbnz	r4, 8016492 <_malloc_r+0x56>
 801646a:	4f20      	ldr	r7, [pc, #128]	; (80164ec <_malloc_r+0xb0>)
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	b923      	cbnz	r3, 801647a <_malloc_r+0x3e>
 8016470:	4621      	mov	r1, r4
 8016472:	4630      	mov	r0, r6
 8016474:	f000 fd10 	bl	8016e98 <_sbrk_r>
 8016478:	6038      	str	r0, [r7, #0]
 801647a:	4629      	mov	r1, r5
 801647c:	4630      	mov	r0, r6
 801647e:	f000 fd0b 	bl	8016e98 <_sbrk_r>
 8016482:	1c43      	adds	r3, r0, #1
 8016484:	d123      	bne.n	80164ce <_malloc_r+0x92>
 8016486:	230c      	movs	r3, #12
 8016488:	6033      	str	r3, [r6, #0]
 801648a:	4630      	mov	r0, r6
 801648c:	f001 fd4a 	bl	8017f24 <__malloc_unlock>
 8016490:	e7e3      	b.n	801645a <_malloc_r+0x1e>
 8016492:	6823      	ldr	r3, [r4, #0]
 8016494:	1b5b      	subs	r3, r3, r5
 8016496:	d417      	bmi.n	80164c8 <_malloc_r+0x8c>
 8016498:	2b0b      	cmp	r3, #11
 801649a:	d903      	bls.n	80164a4 <_malloc_r+0x68>
 801649c:	6023      	str	r3, [r4, #0]
 801649e:	441c      	add	r4, r3
 80164a0:	6025      	str	r5, [r4, #0]
 80164a2:	e004      	b.n	80164ae <_malloc_r+0x72>
 80164a4:	6863      	ldr	r3, [r4, #4]
 80164a6:	42a2      	cmp	r2, r4
 80164a8:	bf0c      	ite	eq
 80164aa:	600b      	streq	r3, [r1, #0]
 80164ac:	6053      	strne	r3, [r2, #4]
 80164ae:	4630      	mov	r0, r6
 80164b0:	f001 fd38 	bl	8017f24 <__malloc_unlock>
 80164b4:	f104 000b 	add.w	r0, r4, #11
 80164b8:	1d23      	adds	r3, r4, #4
 80164ba:	f020 0007 	bic.w	r0, r0, #7
 80164be:	1ac2      	subs	r2, r0, r3
 80164c0:	d0cc      	beq.n	801645c <_malloc_r+0x20>
 80164c2:	1a1b      	subs	r3, r3, r0
 80164c4:	50a3      	str	r3, [r4, r2]
 80164c6:	e7c9      	b.n	801645c <_malloc_r+0x20>
 80164c8:	4622      	mov	r2, r4
 80164ca:	6864      	ldr	r4, [r4, #4]
 80164cc:	e7cc      	b.n	8016468 <_malloc_r+0x2c>
 80164ce:	1cc4      	adds	r4, r0, #3
 80164d0:	f024 0403 	bic.w	r4, r4, #3
 80164d4:	42a0      	cmp	r0, r4
 80164d6:	d0e3      	beq.n	80164a0 <_malloc_r+0x64>
 80164d8:	1a21      	subs	r1, r4, r0
 80164da:	4630      	mov	r0, r6
 80164dc:	f000 fcdc 	bl	8016e98 <_sbrk_r>
 80164e0:	3001      	adds	r0, #1
 80164e2:	d1dd      	bne.n	80164a0 <_malloc_r+0x64>
 80164e4:	e7cf      	b.n	8016486 <_malloc_r+0x4a>
 80164e6:	bf00      	nop
 80164e8:	20005e10 	.word	0x20005e10
 80164ec:	20005e14 	.word	0x20005e14

080164f0 <__cvt>:
 80164f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80164f4:	ec55 4b10 	vmov	r4, r5, d0
 80164f8:	2d00      	cmp	r5, #0
 80164fa:	460e      	mov	r6, r1
 80164fc:	4619      	mov	r1, r3
 80164fe:	462b      	mov	r3, r5
 8016500:	bfbb      	ittet	lt
 8016502:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016506:	461d      	movlt	r5, r3
 8016508:	2300      	movge	r3, #0
 801650a:	232d      	movlt	r3, #45	; 0x2d
 801650c:	700b      	strb	r3, [r1, #0]
 801650e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016514:	4691      	mov	r9, r2
 8016516:	f023 0820 	bic.w	r8, r3, #32
 801651a:	bfbc      	itt	lt
 801651c:	4622      	movlt	r2, r4
 801651e:	4614      	movlt	r4, r2
 8016520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016524:	d005      	beq.n	8016532 <__cvt+0x42>
 8016526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801652a:	d100      	bne.n	801652e <__cvt+0x3e>
 801652c:	3601      	adds	r6, #1
 801652e:	2102      	movs	r1, #2
 8016530:	e000      	b.n	8016534 <__cvt+0x44>
 8016532:	2103      	movs	r1, #3
 8016534:	ab03      	add	r3, sp, #12
 8016536:	9301      	str	r3, [sp, #4]
 8016538:	ab02      	add	r3, sp, #8
 801653a:	9300      	str	r3, [sp, #0]
 801653c:	ec45 4b10 	vmov	d0, r4, r5
 8016540:	4653      	mov	r3, sl
 8016542:	4632      	mov	r2, r6
 8016544:	f000 fe24 	bl	8017190 <_dtoa_r>
 8016548:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801654c:	4607      	mov	r7, r0
 801654e:	d102      	bne.n	8016556 <__cvt+0x66>
 8016550:	f019 0f01 	tst.w	r9, #1
 8016554:	d022      	beq.n	801659c <__cvt+0xac>
 8016556:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801655a:	eb07 0906 	add.w	r9, r7, r6
 801655e:	d110      	bne.n	8016582 <__cvt+0x92>
 8016560:	783b      	ldrb	r3, [r7, #0]
 8016562:	2b30      	cmp	r3, #48	; 0x30
 8016564:	d10a      	bne.n	801657c <__cvt+0x8c>
 8016566:	2200      	movs	r2, #0
 8016568:	2300      	movs	r3, #0
 801656a:	4620      	mov	r0, r4
 801656c:	4629      	mov	r1, r5
 801656e:	f7ea faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8016572:	b918      	cbnz	r0, 801657c <__cvt+0x8c>
 8016574:	f1c6 0601 	rsb	r6, r6, #1
 8016578:	f8ca 6000 	str.w	r6, [sl]
 801657c:	f8da 3000 	ldr.w	r3, [sl]
 8016580:	4499      	add	r9, r3
 8016582:	2200      	movs	r2, #0
 8016584:	2300      	movs	r3, #0
 8016586:	4620      	mov	r0, r4
 8016588:	4629      	mov	r1, r5
 801658a:	f7ea fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 801658e:	b108      	cbz	r0, 8016594 <__cvt+0xa4>
 8016590:	f8cd 900c 	str.w	r9, [sp, #12]
 8016594:	2230      	movs	r2, #48	; 0x30
 8016596:	9b03      	ldr	r3, [sp, #12]
 8016598:	454b      	cmp	r3, r9
 801659a:	d307      	bcc.n	80165ac <__cvt+0xbc>
 801659c:	9b03      	ldr	r3, [sp, #12]
 801659e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80165a0:	1bdb      	subs	r3, r3, r7
 80165a2:	4638      	mov	r0, r7
 80165a4:	6013      	str	r3, [r2, #0]
 80165a6:	b004      	add	sp, #16
 80165a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ac:	1c59      	adds	r1, r3, #1
 80165ae:	9103      	str	r1, [sp, #12]
 80165b0:	701a      	strb	r2, [r3, #0]
 80165b2:	e7f0      	b.n	8016596 <__cvt+0xa6>

080165b4 <__exponent>:
 80165b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80165b6:	4603      	mov	r3, r0
 80165b8:	2900      	cmp	r1, #0
 80165ba:	bfb8      	it	lt
 80165bc:	4249      	neglt	r1, r1
 80165be:	f803 2b02 	strb.w	r2, [r3], #2
 80165c2:	bfb4      	ite	lt
 80165c4:	222d      	movlt	r2, #45	; 0x2d
 80165c6:	222b      	movge	r2, #43	; 0x2b
 80165c8:	2909      	cmp	r1, #9
 80165ca:	7042      	strb	r2, [r0, #1]
 80165cc:	dd2a      	ble.n	8016624 <__exponent+0x70>
 80165ce:	f10d 0407 	add.w	r4, sp, #7
 80165d2:	46a4      	mov	ip, r4
 80165d4:	270a      	movs	r7, #10
 80165d6:	46a6      	mov	lr, r4
 80165d8:	460a      	mov	r2, r1
 80165da:	fb91 f6f7 	sdiv	r6, r1, r7
 80165de:	fb07 1516 	mls	r5, r7, r6, r1
 80165e2:	3530      	adds	r5, #48	; 0x30
 80165e4:	2a63      	cmp	r2, #99	; 0x63
 80165e6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80165ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80165ee:	4631      	mov	r1, r6
 80165f0:	dcf1      	bgt.n	80165d6 <__exponent+0x22>
 80165f2:	3130      	adds	r1, #48	; 0x30
 80165f4:	f1ae 0502 	sub.w	r5, lr, #2
 80165f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80165fc:	1c44      	adds	r4, r0, #1
 80165fe:	4629      	mov	r1, r5
 8016600:	4561      	cmp	r1, ip
 8016602:	d30a      	bcc.n	801661a <__exponent+0x66>
 8016604:	f10d 0209 	add.w	r2, sp, #9
 8016608:	eba2 020e 	sub.w	r2, r2, lr
 801660c:	4565      	cmp	r5, ip
 801660e:	bf88      	it	hi
 8016610:	2200      	movhi	r2, #0
 8016612:	4413      	add	r3, r2
 8016614:	1a18      	subs	r0, r3, r0
 8016616:	b003      	add	sp, #12
 8016618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801661a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801661e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016622:	e7ed      	b.n	8016600 <__exponent+0x4c>
 8016624:	2330      	movs	r3, #48	; 0x30
 8016626:	3130      	adds	r1, #48	; 0x30
 8016628:	7083      	strb	r3, [r0, #2]
 801662a:	70c1      	strb	r1, [r0, #3]
 801662c:	1d03      	adds	r3, r0, #4
 801662e:	e7f1      	b.n	8016614 <__exponent+0x60>

08016630 <_printf_float>:
 8016630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016634:	ed2d 8b02 	vpush	{d8}
 8016638:	b08d      	sub	sp, #52	; 0x34
 801663a:	460c      	mov	r4, r1
 801663c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016640:	4616      	mov	r6, r2
 8016642:	461f      	mov	r7, r3
 8016644:	4605      	mov	r5, r0
 8016646:	f001 fc51 	bl	8017eec <_localeconv_r>
 801664a:	f8d0 a000 	ldr.w	sl, [r0]
 801664e:	4650      	mov	r0, sl
 8016650:	f7e9 fdbe 	bl	80001d0 <strlen>
 8016654:	2300      	movs	r3, #0
 8016656:	930a      	str	r3, [sp, #40]	; 0x28
 8016658:	6823      	ldr	r3, [r4, #0]
 801665a:	9305      	str	r3, [sp, #20]
 801665c:	f8d8 3000 	ldr.w	r3, [r8]
 8016660:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016664:	3307      	adds	r3, #7
 8016666:	f023 0307 	bic.w	r3, r3, #7
 801666a:	f103 0208 	add.w	r2, r3, #8
 801666e:	f8c8 2000 	str.w	r2, [r8]
 8016672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016676:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801667a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801667e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016682:	9307      	str	r3, [sp, #28]
 8016684:	f8cd 8018 	str.w	r8, [sp, #24]
 8016688:	ee08 0a10 	vmov	s16, r0
 801668c:	4b9f      	ldr	r3, [pc, #636]	; (801690c <_printf_float+0x2dc>)
 801668e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016696:	f7ea fa49 	bl	8000b2c <__aeabi_dcmpun>
 801669a:	bb88      	cbnz	r0, 8016700 <_printf_float+0xd0>
 801669c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166a0:	4b9a      	ldr	r3, [pc, #616]	; (801690c <_printf_float+0x2dc>)
 80166a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80166a6:	f7ea fa23 	bl	8000af0 <__aeabi_dcmple>
 80166aa:	bb48      	cbnz	r0, 8016700 <_printf_float+0xd0>
 80166ac:	2200      	movs	r2, #0
 80166ae:	2300      	movs	r3, #0
 80166b0:	4640      	mov	r0, r8
 80166b2:	4649      	mov	r1, r9
 80166b4:	f7ea fa12 	bl	8000adc <__aeabi_dcmplt>
 80166b8:	b110      	cbz	r0, 80166c0 <_printf_float+0x90>
 80166ba:	232d      	movs	r3, #45	; 0x2d
 80166bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80166c0:	4b93      	ldr	r3, [pc, #588]	; (8016910 <_printf_float+0x2e0>)
 80166c2:	4894      	ldr	r0, [pc, #592]	; (8016914 <_printf_float+0x2e4>)
 80166c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80166c8:	bf94      	ite	ls
 80166ca:	4698      	movls	r8, r3
 80166cc:	4680      	movhi	r8, r0
 80166ce:	2303      	movs	r3, #3
 80166d0:	6123      	str	r3, [r4, #16]
 80166d2:	9b05      	ldr	r3, [sp, #20]
 80166d4:	f023 0204 	bic.w	r2, r3, #4
 80166d8:	6022      	str	r2, [r4, #0]
 80166da:	f04f 0900 	mov.w	r9, #0
 80166de:	9700      	str	r7, [sp, #0]
 80166e0:	4633      	mov	r3, r6
 80166e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80166e4:	4621      	mov	r1, r4
 80166e6:	4628      	mov	r0, r5
 80166e8:	f000 f9d8 	bl	8016a9c <_printf_common>
 80166ec:	3001      	adds	r0, #1
 80166ee:	f040 8090 	bne.w	8016812 <_printf_float+0x1e2>
 80166f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166f6:	b00d      	add	sp, #52	; 0x34
 80166f8:	ecbd 8b02 	vpop	{d8}
 80166fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016700:	4642      	mov	r2, r8
 8016702:	464b      	mov	r3, r9
 8016704:	4640      	mov	r0, r8
 8016706:	4649      	mov	r1, r9
 8016708:	f7ea fa10 	bl	8000b2c <__aeabi_dcmpun>
 801670c:	b140      	cbz	r0, 8016720 <_printf_float+0xf0>
 801670e:	464b      	mov	r3, r9
 8016710:	2b00      	cmp	r3, #0
 8016712:	bfbc      	itt	lt
 8016714:	232d      	movlt	r3, #45	; 0x2d
 8016716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801671a:	487f      	ldr	r0, [pc, #508]	; (8016918 <_printf_float+0x2e8>)
 801671c:	4b7f      	ldr	r3, [pc, #508]	; (801691c <_printf_float+0x2ec>)
 801671e:	e7d1      	b.n	80166c4 <_printf_float+0x94>
 8016720:	6863      	ldr	r3, [r4, #4]
 8016722:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016726:	9206      	str	r2, [sp, #24]
 8016728:	1c5a      	adds	r2, r3, #1
 801672a:	d13f      	bne.n	80167ac <_printf_float+0x17c>
 801672c:	2306      	movs	r3, #6
 801672e:	6063      	str	r3, [r4, #4]
 8016730:	9b05      	ldr	r3, [sp, #20]
 8016732:	6861      	ldr	r1, [r4, #4]
 8016734:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016738:	2300      	movs	r3, #0
 801673a:	9303      	str	r3, [sp, #12]
 801673c:	ab0a      	add	r3, sp, #40	; 0x28
 801673e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016742:	ab09      	add	r3, sp, #36	; 0x24
 8016744:	ec49 8b10 	vmov	d0, r8, r9
 8016748:	9300      	str	r3, [sp, #0]
 801674a:	6022      	str	r2, [r4, #0]
 801674c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016750:	4628      	mov	r0, r5
 8016752:	f7ff fecd 	bl	80164f0 <__cvt>
 8016756:	9b06      	ldr	r3, [sp, #24]
 8016758:	9909      	ldr	r1, [sp, #36]	; 0x24
 801675a:	2b47      	cmp	r3, #71	; 0x47
 801675c:	4680      	mov	r8, r0
 801675e:	d108      	bne.n	8016772 <_printf_float+0x142>
 8016760:	1cc8      	adds	r0, r1, #3
 8016762:	db02      	blt.n	801676a <_printf_float+0x13a>
 8016764:	6863      	ldr	r3, [r4, #4]
 8016766:	4299      	cmp	r1, r3
 8016768:	dd41      	ble.n	80167ee <_printf_float+0x1be>
 801676a:	f1ab 0b02 	sub.w	fp, fp, #2
 801676e:	fa5f fb8b 	uxtb.w	fp, fp
 8016772:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016776:	d820      	bhi.n	80167ba <_printf_float+0x18a>
 8016778:	3901      	subs	r1, #1
 801677a:	465a      	mov	r2, fp
 801677c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016780:	9109      	str	r1, [sp, #36]	; 0x24
 8016782:	f7ff ff17 	bl	80165b4 <__exponent>
 8016786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016788:	1813      	adds	r3, r2, r0
 801678a:	2a01      	cmp	r2, #1
 801678c:	4681      	mov	r9, r0
 801678e:	6123      	str	r3, [r4, #16]
 8016790:	dc02      	bgt.n	8016798 <_printf_float+0x168>
 8016792:	6822      	ldr	r2, [r4, #0]
 8016794:	07d2      	lsls	r2, r2, #31
 8016796:	d501      	bpl.n	801679c <_printf_float+0x16c>
 8016798:	3301      	adds	r3, #1
 801679a:	6123      	str	r3, [r4, #16]
 801679c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d09c      	beq.n	80166de <_printf_float+0xae>
 80167a4:	232d      	movs	r3, #45	; 0x2d
 80167a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80167aa:	e798      	b.n	80166de <_printf_float+0xae>
 80167ac:	9a06      	ldr	r2, [sp, #24]
 80167ae:	2a47      	cmp	r2, #71	; 0x47
 80167b0:	d1be      	bne.n	8016730 <_printf_float+0x100>
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d1bc      	bne.n	8016730 <_printf_float+0x100>
 80167b6:	2301      	movs	r3, #1
 80167b8:	e7b9      	b.n	801672e <_printf_float+0xfe>
 80167ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80167be:	d118      	bne.n	80167f2 <_printf_float+0x1c2>
 80167c0:	2900      	cmp	r1, #0
 80167c2:	6863      	ldr	r3, [r4, #4]
 80167c4:	dd0b      	ble.n	80167de <_printf_float+0x1ae>
 80167c6:	6121      	str	r1, [r4, #16]
 80167c8:	b913      	cbnz	r3, 80167d0 <_printf_float+0x1a0>
 80167ca:	6822      	ldr	r2, [r4, #0]
 80167cc:	07d0      	lsls	r0, r2, #31
 80167ce:	d502      	bpl.n	80167d6 <_printf_float+0x1a6>
 80167d0:	3301      	adds	r3, #1
 80167d2:	440b      	add	r3, r1
 80167d4:	6123      	str	r3, [r4, #16]
 80167d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80167d8:	f04f 0900 	mov.w	r9, #0
 80167dc:	e7de      	b.n	801679c <_printf_float+0x16c>
 80167de:	b913      	cbnz	r3, 80167e6 <_printf_float+0x1b6>
 80167e0:	6822      	ldr	r2, [r4, #0]
 80167e2:	07d2      	lsls	r2, r2, #31
 80167e4:	d501      	bpl.n	80167ea <_printf_float+0x1ba>
 80167e6:	3302      	adds	r3, #2
 80167e8:	e7f4      	b.n	80167d4 <_printf_float+0x1a4>
 80167ea:	2301      	movs	r3, #1
 80167ec:	e7f2      	b.n	80167d4 <_printf_float+0x1a4>
 80167ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80167f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167f4:	4299      	cmp	r1, r3
 80167f6:	db05      	blt.n	8016804 <_printf_float+0x1d4>
 80167f8:	6823      	ldr	r3, [r4, #0]
 80167fa:	6121      	str	r1, [r4, #16]
 80167fc:	07d8      	lsls	r0, r3, #31
 80167fe:	d5ea      	bpl.n	80167d6 <_printf_float+0x1a6>
 8016800:	1c4b      	adds	r3, r1, #1
 8016802:	e7e7      	b.n	80167d4 <_printf_float+0x1a4>
 8016804:	2900      	cmp	r1, #0
 8016806:	bfd4      	ite	le
 8016808:	f1c1 0202 	rsble	r2, r1, #2
 801680c:	2201      	movgt	r2, #1
 801680e:	4413      	add	r3, r2
 8016810:	e7e0      	b.n	80167d4 <_printf_float+0x1a4>
 8016812:	6823      	ldr	r3, [r4, #0]
 8016814:	055a      	lsls	r2, r3, #21
 8016816:	d407      	bmi.n	8016828 <_printf_float+0x1f8>
 8016818:	6923      	ldr	r3, [r4, #16]
 801681a:	4642      	mov	r2, r8
 801681c:	4631      	mov	r1, r6
 801681e:	4628      	mov	r0, r5
 8016820:	47b8      	blx	r7
 8016822:	3001      	adds	r0, #1
 8016824:	d12c      	bne.n	8016880 <_printf_float+0x250>
 8016826:	e764      	b.n	80166f2 <_printf_float+0xc2>
 8016828:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801682c:	f240 80e0 	bls.w	80169f0 <_printf_float+0x3c0>
 8016830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016834:	2200      	movs	r2, #0
 8016836:	2300      	movs	r3, #0
 8016838:	f7ea f946 	bl	8000ac8 <__aeabi_dcmpeq>
 801683c:	2800      	cmp	r0, #0
 801683e:	d034      	beq.n	80168aa <_printf_float+0x27a>
 8016840:	4a37      	ldr	r2, [pc, #220]	; (8016920 <_printf_float+0x2f0>)
 8016842:	2301      	movs	r3, #1
 8016844:	4631      	mov	r1, r6
 8016846:	4628      	mov	r0, r5
 8016848:	47b8      	blx	r7
 801684a:	3001      	adds	r0, #1
 801684c:	f43f af51 	beq.w	80166f2 <_printf_float+0xc2>
 8016850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016854:	429a      	cmp	r2, r3
 8016856:	db02      	blt.n	801685e <_printf_float+0x22e>
 8016858:	6823      	ldr	r3, [r4, #0]
 801685a:	07d8      	lsls	r0, r3, #31
 801685c:	d510      	bpl.n	8016880 <_printf_float+0x250>
 801685e:	ee18 3a10 	vmov	r3, s16
 8016862:	4652      	mov	r2, sl
 8016864:	4631      	mov	r1, r6
 8016866:	4628      	mov	r0, r5
 8016868:	47b8      	blx	r7
 801686a:	3001      	adds	r0, #1
 801686c:	f43f af41 	beq.w	80166f2 <_printf_float+0xc2>
 8016870:	f04f 0800 	mov.w	r8, #0
 8016874:	f104 091a 	add.w	r9, r4, #26
 8016878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801687a:	3b01      	subs	r3, #1
 801687c:	4543      	cmp	r3, r8
 801687e:	dc09      	bgt.n	8016894 <_printf_float+0x264>
 8016880:	6823      	ldr	r3, [r4, #0]
 8016882:	079b      	lsls	r3, r3, #30
 8016884:	f100 8105 	bmi.w	8016a92 <_printf_float+0x462>
 8016888:	68e0      	ldr	r0, [r4, #12]
 801688a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801688c:	4298      	cmp	r0, r3
 801688e:	bfb8      	it	lt
 8016890:	4618      	movlt	r0, r3
 8016892:	e730      	b.n	80166f6 <_printf_float+0xc6>
 8016894:	2301      	movs	r3, #1
 8016896:	464a      	mov	r2, r9
 8016898:	4631      	mov	r1, r6
 801689a:	4628      	mov	r0, r5
 801689c:	47b8      	blx	r7
 801689e:	3001      	adds	r0, #1
 80168a0:	f43f af27 	beq.w	80166f2 <_printf_float+0xc2>
 80168a4:	f108 0801 	add.w	r8, r8, #1
 80168a8:	e7e6      	b.n	8016878 <_printf_float+0x248>
 80168aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	dc39      	bgt.n	8016924 <_printf_float+0x2f4>
 80168b0:	4a1b      	ldr	r2, [pc, #108]	; (8016920 <_printf_float+0x2f0>)
 80168b2:	2301      	movs	r3, #1
 80168b4:	4631      	mov	r1, r6
 80168b6:	4628      	mov	r0, r5
 80168b8:	47b8      	blx	r7
 80168ba:	3001      	adds	r0, #1
 80168bc:	f43f af19 	beq.w	80166f2 <_printf_float+0xc2>
 80168c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80168c4:	4313      	orrs	r3, r2
 80168c6:	d102      	bne.n	80168ce <_printf_float+0x29e>
 80168c8:	6823      	ldr	r3, [r4, #0]
 80168ca:	07d9      	lsls	r1, r3, #31
 80168cc:	d5d8      	bpl.n	8016880 <_printf_float+0x250>
 80168ce:	ee18 3a10 	vmov	r3, s16
 80168d2:	4652      	mov	r2, sl
 80168d4:	4631      	mov	r1, r6
 80168d6:	4628      	mov	r0, r5
 80168d8:	47b8      	blx	r7
 80168da:	3001      	adds	r0, #1
 80168dc:	f43f af09 	beq.w	80166f2 <_printf_float+0xc2>
 80168e0:	f04f 0900 	mov.w	r9, #0
 80168e4:	f104 0a1a 	add.w	sl, r4, #26
 80168e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168ea:	425b      	negs	r3, r3
 80168ec:	454b      	cmp	r3, r9
 80168ee:	dc01      	bgt.n	80168f4 <_printf_float+0x2c4>
 80168f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168f2:	e792      	b.n	801681a <_printf_float+0x1ea>
 80168f4:	2301      	movs	r3, #1
 80168f6:	4652      	mov	r2, sl
 80168f8:	4631      	mov	r1, r6
 80168fa:	4628      	mov	r0, r5
 80168fc:	47b8      	blx	r7
 80168fe:	3001      	adds	r0, #1
 8016900:	f43f aef7 	beq.w	80166f2 <_printf_float+0xc2>
 8016904:	f109 0901 	add.w	r9, r9, #1
 8016908:	e7ee      	b.n	80168e8 <_printf_float+0x2b8>
 801690a:	bf00      	nop
 801690c:	7fefffff 	.word	0x7fefffff
 8016910:	08019fac 	.word	0x08019fac
 8016914:	08019fb0 	.word	0x08019fb0
 8016918:	08019fb8 	.word	0x08019fb8
 801691c:	08019fb4 	.word	0x08019fb4
 8016920:	08019fbc 	.word	0x08019fbc
 8016924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016928:	429a      	cmp	r2, r3
 801692a:	bfa8      	it	ge
 801692c:	461a      	movge	r2, r3
 801692e:	2a00      	cmp	r2, #0
 8016930:	4691      	mov	r9, r2
 8016932:	dc37      	bgt.n	80169a4 <_printf_float+0x374>
 8016934:	f04f 0b00 	mov.w	fp, #0
 8016938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801693c:	f104 021a 	add.w	r2, r4, #26
 8016940:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016942:	9305      	str	r3, [sp, #20]
 8016944:	eba3 0309 	sub.w	r3, r3, r9
 8016948:	455b      	cmp	r3, fp
 801694a:	dc33      	bgt.n	80169b4 <_printf_float+0x384>
 801694c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016950:	429a      	cmp	r2, r3
 8016952:	db3b      	blt.n	80169cc <_printf_float+0x39c>
 8016954:	6823      	ldr	r3, [r4, #0]
 8016956:	07da      	lsls	r2, r3, #31
 8016958:	d438      	bmi.n	80169cc <_printf_float+0x39c>
 801695a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801695c:	9b05      	ldr	r3, [sp, #20]
 801695e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016960:	1ad3      	subs	r3, r2, r3
 8016962:	eba2 0901 	sub.w	r9, r2, r1
 8016966:	4599      	cmp	r9, r3
 8016968:	bfa8      	it	ge
 801696a:	4699      	movge	r9, r3
 801696c:	f1b9 0f00 	cmp.w	r9, #0
 8016970:	dc35      	bgt.n	80169de <_printf_float+0x3ae>
 8016972:	f04f 0800 	mov.w	r8, #0
 8016976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801697a:	f104 0a1a 	add.w	sl, r4, #26
 801697e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016982:	1a9b      	subs	r3, r3, r2
 8016984:	eba3 0309 	sub.w	r3, r3, r9
 8016988:	4543      	cmp	r3, r8
 801698a:	f77f af79 	ble.w	8016880 <_printf_float+0x250>
 801698e:	2301      	movs	r3, #1
 8016990:	4652      	mov	r2, sl
 8016992:	4631      	mov	r1, r6
 8016994:	4628      	mov	r0, r5
 8016996:	47b8      	blx	r7
 8016998:	3001      	adds	r0, #1
 801699a:	f43f aeaa 	beq.w	80166f2 <_printf_float+0xc2>
 801699e:	f108 0801 	add.w	r8, r8, #1
 80169a2:	e7ec      	b.n	801697e <_printf_float+0x34e>
 80169a4:	4613      	mov	r3, r2
 80169a6:	4631      	mov	r1, r6
 80169a8:	4642      	mov	r2, r8
 80169aa:	4628      	mov	r0, r5
 80169ac:	47b8      	blx	r7
 80169ae:	3001      	adds	r0, #1
 80169b0:	d1c0      	bne.n	8016934 <_printf_float+0x304>
 80169b2:	e69e      	b.n	80166f2 <_printf_float+0xc2>
 80169b4:	2301      	movs	r3, #1
 80169b6:	4631      	mov	r1, r6
 80169b8:	4628      	mov	r0, r5
 80169ba:	9205      	str	r2, [sp, #20]
 80169bc:	47b8      	blx	r7
 80169be:	3001      	adds	r0, #1
 80169c0:	f43f ae97 	beq.w	80166f2 <_printf_float+0xc2>
 80169c4:	9a05      	ldr	r2, [sp, #20]
 80169c6:	f10b 0b01 	add.w	fp, fp, #1
 80169ca:	e7b9      	b.n	8016940 <_printf_float+0x310>
 80169cc:	ee18 3a10 	vmov	r3, s16
 80169d0:	4652      	mov	r2, sl
 80169d2:	4631      	mov	r1, r6
 80169d4:	4628      	mov	r0, r5
 80169d6:	47b8      	blx	r7
 80169d8:	3001      	adds	r0, #1
 80169da:	d1be      	bne.n	801695a <_printf_float+0x32a>
 80169dc:	e689      	b.n	80166f2 <_printf_float+0xc2>
 80169de:	9a05      	ldr	r2, [sp, #20]
 80169e0:	464b      	mov	r3, r9
 80169e2:	4442      	add	r2, r8
 80169e4:	4631      	mov	r1, r6
 80169e6:	4628      	mov	r0, r5
 80169e8:	47b8      	blx	r7
 80169ea:	3001      	adds	r0, #1
 80169ec:	d1c1      	bne.n	8016972 <_printf_float+0x342>
 80169ee:	e680      	b.n	80166f2 <_printf_float+0xc2>
 80169f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169f2:	2a01      	cmp	r2, #1
 80169f4:	dc01      	bgt.n	80169fa <_printf_float+0x3ca>
 80169f6:	07db      	lsls	r3, r3, #31
 80169f8:	d538      	bpl.n	8016a6c <_printf_float+0x43c>
 80169fa:	2301      	movs	r3, #1
 80169fc:	4642      	mov	r2, r8
 80169fe:	4631      	mov	r1, r6
 8016a00:	4628      	mov	r0, r5
 8016a02:	47b8      	blx	r7
 8016a04:	3001      	adds	r0, #1
 8016a06:	f43f ae74 	beq.w	80166f2 <_printf_float+0xc2>
 8016a0a:	ee18 3a10 	vmov	r3, s16
 8016a0e:	4652      	mov	r2, sl
 8016a10:	4631      	mov	r1, r6
 8016a12:	4628      	mov	r0, r5
 8016a14:	47b8      	blx	r7
 8016a16:	3001      	adds	r0, #1
 8016a18:	f43f ae6b 	beq.w	80166f2 <_printf_float+0xc2>
 8016a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016a20:	2200      	movs	r2, #0
 8016a22:	2300      	movs	r3, #0
 8016a24:	f7ea f850 	bl	8000ac8 <__aeabi_dcmpeq>
 8016a28:	b9d8      	cbnz	r0, 8016a62 <_printf_float+0x432>
 8016a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a2c:	f108 0201 	add.w	r2, r8, #1
 8016a30:	3b01      	subs	r3, #1
 8016a32:	4631      	mov	r1, r6
 8016a34:	4628      	mov	r0, r5
 8016a36:	47b8      	blx	r7
 8016a38:	3001      	adds	r0, #1
 8016a3a:	d10e      	bne.n	8016a5a <_printf_float+0x42a>
 8016a3c:	e659      	b.n	80166f2 <_printf_float+0xc2>
 8016a3e:	2301      	movs	r3, #1
 8016a40:	4652      	mov	r2, sl
 8016a42:	4631      	mov	r1, r6
 8016a44:	4628      	mov	r0, r5
 8016a46:	47b8      	blx	r7
 8016a48:	3001      	adds	r0, #1
 8016a4a:	f43f ae52 	beq.w	80166f2 <_printf_float+0xc2>
 8016a4e:	f108 0801 	add.w	r8, r8, #1
 8016a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a54:	3b01      	subs	r3, #1
 8016a56:	4543      	cmp	r3, r8
 8016a58:	dcf1      	bgt.n	8016a3e <_printf_float+0x40e>
 8016a5a:	464b      	mov	r3, r9
 8016a5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016a60:	e6dc      	b.n	801681c <_printf_float+0x1ec>
 8016a62:	f04f 0800 	mov.w	r8, #0
 8016a66:	f104 0a1a 	add.w	sl, r4, #26
 8016a6a:	e7f2      	b.n	8016a52 <_printf_float+0x422>
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	4642      	mov	r2, r8
 8016a70:	e7df      	b.n	8016a32 <_printf_float+0x402>
 8016a72:	2301      	movs	r3, #1
 8016a74:	464a      	mov	r2, r9
 8016a76:	4631      	mov	r1, r6
 8016a78:	4628      	mov	r0, r5
 8016a7a:	47b8      	blx	r7
 8016a7c:	3001      	adds	r0, #1
 8016a7e:	f43f ae38 	beq.w	80166f2 <_printf_float+0xc2>
 8016a82:	f108 0801 	add.w	r8, r8, #1
 8016a86:	68e3      	ldr	r3, [r4, #12]
 8016a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a8a:	1a5b      	subs	r3, r3, r1
 8016a8c:	4543      	cmp	r3, r8
 8016a8e:	dcf0      	bgt.n	8016a72 <_printf_float+0x442>
 8016a90:	e6fa      	b.n	8016888 <_printf_float+0x258>
 8016a92:	f04f 0800 	mov.w	r8, #0
 8016a96:	f104 0919 	add.w	r9, r4, #25
 8016a9a:	e7f4      	b.n	8016a86 <_printf_float+0x456>

08016a9c <_printf_common>:
 8016a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016aa0:	4616      	mov	r6, r2
 8016aa2:	4699      	mov	r9, r3
 8016aa4:	688a      	ldr	r2, [r1, #8]
 8016aa6:	690b      	ldr	r3, [r1, #16]
 8016aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016aac:	4293      	cmp	r3, r2
 8016aae:	bfb8      	it	lt
 8016ab0:	4613      	movlt	r3, r2
 8016ab2:	6033      	str	r3, [r6, #0]
 8016ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016ab8:	4607      	mov	r7, r0
 8016aba:	460c      	mov	r4, r1
 8016abc:	b10a      	cbz	r2, 8016ac2 <_printf_common+0x26>
 8016abe:	3301      	adds	r3, #1
 8016ac0:	6033      	str	r3, [r6, #0]
 8016ac2:	6823      	ldr	r3, [r4, #0]
 8016ac4:	0699      	lsls	r1, r3, #26
 8016ac6:	bf42      	ittt	mi
 8016ac8:	6833      	ldrmi	r3, [r6, #0]
 8016aca:	3302      	addmi	r3, #2
 8016acc:	6033      	strmi	r3, [r6, #0]
 8016ace:	6825      	ldr	r5, [r4, #0]
 8016ad0:	f015 0506 	ands.w	r5, r5, #6
 8016ad4:	d106      	bne.n	8016ae4 <_printf_common+0x48>
 8016ad6:	f104 0a19 	add.w	sl, r4, #25
 8016ada:	68e3      	ldr	r3, [r4, #12]
 8016adc:	6832      	ldr	r2, [r6, #0]
 8016ade:	1a9b      	subs	r3, r3, r2
 8016ae0:	42ab      	cmp	r3, r5
 8016ae2:	dc26      	bgt.n	8016b32 <_printf_common+0x96>
 8016ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016ae8:	1e13      	subs	r3, r2, #0
 8016aea:	6822      	ldr	r2, [r4, #0]
 8016aec:	bf18      	it	ne
 8016aee:	2301      	movne	r3, #1
 8016af0:	0692      	lsls	r2, r2, #26
 8016af2:	d42b      	bmi.n	8016b4c <_printf_common+0xb0>
 8016af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016af8:	4649      	mov	r1, r9
 8016afa:	4638      	mov	r0, r7
 8016afc:	47c0      	blx	r8
 8016afe:	3001      	adds	r0, #1
 8016b00:	d01e      	beq.n	8016b40 <_printf_common+0xa4>
 8016b02:	6823      	ldr	r3, [r4, #0]
 8016b04:	68e5      	ldr	r5, [r4, #12]
 8016b06:	6832      	ldr	r2, [r6, #0]
 8016b08:	f003 0306 	and.w	r3, r3, #6
 8016b0c:	2b04      	cmp	r3, #4
 8016b0e:	bf08      	it	eq
 8016b10:	1aad      	subeq	r5, r5, r2
 8016b12:	68a3      	ldr	r3, [r4, #8]
 8016b14:	6922      	ldr	r2, [r4, #16]
 8016b16:	bf0c      	ite	eq
 8016b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016b1c:	2500      	movne	r5, #0
 8016b1e:	4293      	cmp	r3, r2
 8016b20:	bfc4      	itt	gt
 8016b22:	1a9b      	subgt	r3, r3, r2
 8016b24:	18ed      	addgt	r5, r5, r3
 8016b26:	2600      	movs	r6, #0
 8016b28:	341a      	adds	r4, #26
 8016b2a:	42b5      	cmp	r5, r6
 8016b2c:	d11a      	bne.n	8016b64 <_printf_common+0xc8>
 8016b2e:	2000      	movs	r0, #0
 8016b30:	e008      	b.n	8016b44 <_printf_common+0xa8>
 8016b32:	2301      	movs	r3, #1
 8016b34:	4652      	mov	r2, sl
 8016b36:	4649      	mov	r1, r9
 8016b38:	4638      	mov	r0, r7
 8016b3a:	47c0      	blx	r8
 8016b3c:	3001      	adds	r0, #1
 8016b3e:	d103      	bne.n	8016b48 <_printf_common+0xac>
 8016b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b48:	3501      	adds	r5, #1
 8016b4a:	e7c6      	b.n	8016ada <_printf_common+0x3e>
 8016b4c:	18e1      	adds	r1, r4, r3
 8016b4e:	1c5a      	adds	r2, r3, #1
 8016b50:	2030      	movs	r0, #48	; 0x30
 8016b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016b56:	4422      	add	r2, r4
 8016b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016b60:	3302      	adds	r3, #2
 8016b62:	e7c7      	b.n	8016af4 <_printf_common+0x58>
 8016b64:	2301      	movs	r3, #1
 8016b66:	4622      	mov	r2, r4
 8016b68:	4649      	mov	r1, r9
 8016b6a:	4638      	mov	r0, r7
 8016b6c:	47c0      	blx	r8
 8016b6e:	3001      	adds	r0, #1
 8016b70:	d0e6      	beq.n	8016b40 <_printf_common+0xa4>
 8016b72:	3601      	adds	r6, #1
 8016b74:	e7d9      	b.n	8016b2a <_printf_common+0x8e>
	...

08016b78 <_printf_i>:
 8016b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016b7c:	460c      	mov	r4, r1
 8016b7e:	4691      	mov	r9, r2
 8016b80:	7e27      	ldrb	r7, [r4, #24]
 8016b82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b84:	2f78      	cmp	r7, #120	; 0x78
 8016b86:	4680      	mov	r8, r0
 8016b88:	469a      	mov	sl, r3
 8016b8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016b8e:	d807      	bhi.n	8016ba0 <_printf_i+0x28>
 8016b90:	2f62      	cmp	r7, #98	; 0x62
 8016b92:	d80a      	bhi.n	8016baa <_printf_i+0x32>
 8016b94:	2f00      	cmp	r7, #0
 8016b96:	f000 80d8 	beq.w	8016d4a <_printf_i+0x1d2>
 8016b9a:	2f58      	cmp	r7, #88	; 0x58
 8016b9c:	f000 80a3 	beq.w	8016ce6 <_printf_i+0x16e>
 8016ba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016ba8:	e03a      	b.n	8016c20 <_printf_i+0xa8>
 8016baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016bae:	2b15      	cmp	r3, #21
 8016bb0:	d8f6      	bhi.n	8016ba0 <_printf_i+0x28>
 8016bb2:	a001      	add	r0, pc, #4	; (adr r0, 8016bb8 <_printf_i+0x40>)
 8016bb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016bb8:	08016c11 	.word	0x08016c11
 8016bbc:	08016c25 	.word	0x08016c25
 8016bc0:	08016ba1 	.word	0x08016ba1
 8016bc4:	08016ba1 	.word	0x08016ba1
 8016bc8:	08016ba1 	.word	0x08016ba1
 8016bcc:	08016ba1 	.word	0x08016ba1
 8016bd0:	08016c25 	.word	0x08016c25
 8016bd4:	08016ba1 	.word	0x08016ba1
 8016bd8:	08016ba1 	.word	0x08016ba1
 8016bdc:	08016ba1 	.word	0x08016ba1
 8016be0:	08016ba1 	.word	0x08016ba1
 8016be4:	08016d31 	.word	0x08016d31
 8016be8:	08016c55 	.word	0x08016c55
 8016bec:	08016d13 	.word	0x08016d13
 8016bf0:	08016ba1 	.word	0x08016ba1
 8016bf4:	08016ba1 	.word	0x08016ba1
 8016bf8:	08016d53 	.word	0x08016d53
 8016bfc:	08016ba1 	.word	0x08016ba1
 8016c00:	08016c55 	.word	0x08016c55
 8016c04:	08016ba1 	.word	0x08016ba1
 8016c08:	08016ba1 	.word	0x08016ba1
 8016c0c:	08016d1b 	.word	0x08016d1b
 8016c10:	680b      	ldr	r3, [r1, #0]
 8016c12:	1d1a      	adds	r2, r3, #4
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	600a      	str	r2, [r1, #0]
 8016c18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016c20:	2301      	movs	r3, #1
 8016c22:	e0a3      	b.n	8016d6c <_printf_i+0x1f4>
 8016c24:	6825      	ldr	r5, [r4, #0]
 8016c26:	6808      	ldr	r0, [r1, #0]
 8016c28:	062e      	lsls	r6, r5, #24
 8016c2a:	f100 0304 	add.w	r3, r0, #4
 8016c2e:	d50a      	bpl.n	8016c46 <_printf_i+0xce>
 8016c30:	6805      	ldr	r5, [r0, #0]
 8016c32:	600b      	str	r3, [r1, #0]
 8016c34:	2d00      	cmp	r5, #0
 8016c36:	da03      	bge.n	8016c40 <_printf_i+0xc8>
 8016c38:	232d      	movs	r3, #45	; 0x2d
 8016c3a:	426d      	negs	r5, r5
 8016c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c40:	485e      	ldr	r0, [pc, #376]	; (8016dbc <_printf_i+0x244>)
 8016c42:	230a      	movs	r3, #10
 8016c44:	e019      	b.n	8016c7a <_printf_i+0x102>
 8016c46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016c4a:	6805      	ldr	r5, [r0, #0]
 8016c4c:	600b      	str	r3, [r1, #0]
 8016c4e:	bf18      	it	ne
 8016c50:	b22d      	sxthne	r5, r5
 8016c52:	e7ef      	b.n	8016c34 <_printf_i+0xbc>
 8016c54:	680b      	ldr	r3, [r1, #0]
 8016c56:	6825      	ldr	r5, [r4, #0]
 8016c58:	1d18      	adds	r0, r3, #4
 8016c5a:	6008      	str	r0, [r1, #0]
 8016c5c:	0628      	lsls	r0, r5, #24
 8016c5e:	d501      	bpl.n	8016c64 <_printf_i+0xec>
 8016c60:	681d      	ldr	r5, [r3, #0]
 8016c62:	e002      	b.n	8016c6a <_printf_i+0xf2>
 8016c64:	0669      	lsls	r1, r5, #25
 8016c66:	d5fb      	bpl.n	8016c60 <_printf_i+0xe8>
 8016c68:	881d      	ldrh	r5, [r3, #0]
 8016c6a:	4854      	ldr	r0, [pc, #336]	; (8016dbc <_printf_i+0x244>)
 8016c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8016c6e:	bf0c      	ite	eq
 8016c70:	2308      	moveq	r3, #8
 8016c72:	230a      	movne	r3, #10
 8016c74:	2100      	movs	r1, #0
 8016c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016c7a:	6866      	ldr	r6, [r4, #4]
 8016c7c:	60a6      	str	r6, [r4, #8]
 8016c7e:	2e00      	cmp	r6, #0
 8016c80:	bfa2      	ittt	ge
 8016c82:	6821      	ldrge	r1, [r4, #0]
 8016c84:	f021 0104 	bicge.w	r1, r1, #4
 8016c88:	6021      	strge	r1, [r4, #0]
 8016c8a:	b90d      	cbnz	r5, 8016c90 <_printf_i+0x118>
 8016c8c:	2e00      	cmp	r6, #0
 8016c8e:	d04d      	beq.n	8016d2c <_printf_i+0x1b4>
 8016c90:	4616      	mov	r6, r2
 8016c92:	fbb5 f1f3 	udiv	r1, r5, r3
 8016c96:	fb03 5711 	mls	r7, r3, r1, r5
 8016c9a:	5dc7      	ldrb	r7, [r0, r7]
 8016c9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016ca0:	462f      	mov	r7, r5
 8016ca2:	42bb      	cmp	r3, r7
 8016ca4:	460d      	mov	r5, r1
 8016ca6:	d9f4      	bls.n	8016c92 <_printf_i+0x11a>
 8016ca8:	2b08      	cmp	r3, #8
 8016caa:	d10b      	bne.n	8016cc4 <_printf_i+0x14c>
 8016cac:	6823      	ldr	r3, [r4, #0]
 8016cae:	07df      	lsls	r7, r3, #31
 8016cb0:	d508      	bpl.n	8016cc4 <_printf_i+0x14c>
 8016cb2:	6923      	ldr	r3, [r4, #16]
 8016cb4:	6861      	ldr	r1, [r4, #4]
 8016cb6:	4299      	cmp	r1, r3
 8016cb8:	bfde      	ittt	le
 8016cba:	2330      	movle	r3, #48	; 0x30
 8016cbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016cc0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8016cc4:	1b92      	subs	r2, r2, r6
 8016cc6:	6122      	str	r2, [r4, #16]
 8016cc8:	f8cd a000 	str.w	sl, [sp]
 8016ccc:	464b      	mov	r3, r9
 8016cce:	aa03      	add	r2, sp, #12
 8016cd0:	4621      	mov	r1, r4
 8016cd2:	4640      	mov	r0, r8
 8016cd4:	f7ff fee2 	bl	8016a9c <_printf_common>
 8016cd8:	3001      	adds	r0, #1
 8016cda:	d14c      	bne.n	8016d76 <_printf_i+0x1fe>
 8016cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ce0:	b004      	add	sp, #16
 8016ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ce6:	4835      	ldr	r0, [pc, #212]	; (8016dbc <_printf_i+0x244>)
 8016ce8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016cec:	6823      	ldr	r3, [r4, #0]
 8016cee:	680e      	ldr	r6, [r1, #0]
 8016cf0:	061f      	lsls	r7, r3, #24
 8016cf2:	f856 5b04 	ldr.w	r5, [r6], #4
 8016cf6:	600e      	str	r6, [r1, #0]
 8016cf8:	d514      	bpl.n	8016d24 <_printf_i+0x1ac>
 8016cfa:	07d9      	lsls	r1, r3, #31
 8016cfc:	bf44      	itt	mi
 8016cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8016d02:	6023      	strmi	r3, [r4, #0]
 8016d04:	b91d      	cbnz	r5, 8016d0e <_printf_i+0x196>
 8016d06:	6823      	ldr	r3, [r4, #0]
 8016d08:	f023 0320 	bic.w	r3, r3, #32
 8016d0c:	6023      	str	r3, [r4, #0]
 8016d0e:	2310      	movs	r3, #16
 8016d10:	e7b0      	b.n	8016c74 <_printf_i+0xfc>
 8016d12:	6823      	ldr	r3, [r4, #0]
 8016d14:	f043 0320 	orr.w	r3, r3, #32
 8016d18:	6023      	str	r3, [r4, #0]
 8016d1a:	2378      	movs	r3, #120	; 0x78
 8016d1c:	4828      	ldr	r0, [pc, #160]	; (8016dc0 <_printf_i+0x248>)
 8016d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016d22:	e7e3      	b.n	8016cec <_printf_i+0x174>
 8016d24:	065e      	lsls	r6, r3, #25
 8016d26:	bf48      	it	mi
 8016d28:	b2ad      	uxthmi	r5, r5
 8016d2a:	e7e6      	b.n	8016cfa <_printf_i+0x182>
 8016d2c:	4616      	mov	r6, r2
 8016d2e:	e7bb      	b.n	8016ca8 <_printf_i+0x130>
 8016d30:	680b      	ldr	r3, [r1, #0]
 8016d32:	6826      	ldr	r6, [r4, #0]
 8016d34:	6960      	ldr	r0, [r4, #20]
 8016d36:	1d1d      	adds	r5, r3, #4
 8016d38:	600d      	str	r5, [r1, #0]
 8016d3a:	0635      	lsls	r5, r6, #24
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	d501      	bpl.n	8016d44 <_printf_i+0x1cc>
 8016d40:	6018      	str	r0, [r3, #0]
 8016d42:	e002      	b.n	8016d4a <_printf_i+0x1d2>
 8016d44:	0671      	lsls	r1, r6, #25
 8016d46:	d5fb      	bpl.n	8016d40 <_printf_i+0x1c8>
 8016d48:	8018      	strh	r0, [r3, #0]
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	6123      	str	r3, [r4, #16]
 8016d4e:	4616      	mov	r6, r2
 8016d50:	e7ba      	b.n	8016cc8 <_printf_i+0x150>
 8016d52:	680b      	ldr	r3, [r1, #0]
 8016d54:	1d1a      	adds	r2, r3, #4
 8016d56:	600a      	str	r2, [r1, #0]
 8016d58:	681e      	ldr	r6, [r3, #0]
 8016d5a:	6862      	ldr	r2, [r4, #4]
 8016d5c:	2100      	movs	r1, #0
 8016d5e:	4630      	mov	r0, r6
 8016d60:	f7e9 fa3e 	bl	80001e0 <memchr>
 8016d64:	b108      	cbz	r0, 8016d6a <_printf_i+0x1f2>
 8016d66:	1b80      	subs	r0, r0, r6
 8016d68:	6060      	str	r0, [r4, #4]
 8016d6a:	6863      	ldr	r3, [r4, #4]
 8016d6c:	6123      	str	r3, [r4, #16]
 8016d6e:	2300      	movs	r3, #0
 8016d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d74:	e7a8      	b.n	8016cc8 <_printf_i+0x150>
 8016d76:	6923      	ldr	r3, [r4, #16]
 8016d78:	4632      	mov	r2, r6
 8016d7a:	4649      	mov	r1, r9
 8016d7c:	4640      	mov	r0, r8
 8016d7e:	47d0      	blx	sl
 8016d80:	3001      	adds	r0, #1
 8016d82:	d0ab      	beq.n	8016cdc <_printf_i+0x164>
 8016d84:	6823      	ldr	r3, [r4, #0]
 8016d86:	079b      	lsls	r3, r3, #30
 8016d88:	d413      	bmi.n	8016db2 <_printf_i+0x23a>
 8016d8a:	68e0      	ldr	r0, [r4, #12]
 8016d8c:	9b03      	ldr	r3, [sp, #12]
 8016d8e:	4298      	cmp	r0, r3
 8016d90:	bfb8      	it	lt
 8016d92:	4618      	movlt	r0, r3
 8016d94:	e7a4      	b.n	8016ce0 <_printf_i+0x168>
 8016d96:	2301      	movs	r3, #1
 8016d98:	4632      	mov	r2, r6
 8016d9a:	4649      	mov	r1, r9
 8016d9c:	4640      	mov	r0, r8
 8016d9e:	47d0      	blx	sl
 8016da0:	3001      	adds	r0, #1
 8016da2:	d09b      	beq.n	8016cdc <_printf_i+0x164>
 8016da4:	3501      	adds	r5, #1
 8016da6:	68e3      	ldr	r3, [r4, #12]
 8016da8:	9903      	ldr	r1, [sp, #12]
 8016daa:	1a5b      	subs	r3, r3, r1
 8016dac:	42ab      	cmp	r3, r5
 8016dae:	dcf2      	bgt.n	8016d96 <_printf_i+0x21e>
 8016db0:	e7eb      	b.n	8016d8a <_printf_i+0x212>
 8016db2:	2500      	movs	r5, #0
 8016db4:	f104 0619 	add.w	r6, r4, #25
 8016db8:	e7f5      	b.n	8016da6 <_printf_i+0x22e>
 8016dba:	bf00      	nop
 8016dbc:	08019fbe 	.word	0x08019fbe
 8016dc0:	08019fcf 	.word	0x08019fcf

08016dc4 <cleanup_glue>:
 8016dc4:	b538      	push	{r3, r4, r5, lr}
 8016dc6:	460c      	mov	r4, r1
 8016dc8:	6809      	ldr	r1, [r1, #0]
 8016dca:	4605      	mov	r5, r0
 8016dcc:	b109      	cbz	r1, 8016dd2 <cleanup_glue+0xe>
 8016dce:	f7ff fff9 	bl	8016dc4 <cleanup_glue>
 8016dd2:	4621      	mov	r1, r4
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016dda:	f7ff badf 	b.w	801639c <_free_r>
	...

08016de0 <_reclaim_reent>:
 8016de0:	4b2c      	ldr	r3, [pc, #176]	; (8016e94 <_reclaim_reent+0xb4>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	4283      	cmp	r3, r0
 8016de6:	b570      	push	{r4, r5, r6, lr}
 8016de8:	4604      	mov	r4, r0
 8016dea:	d051      	beq.n	8016e90 <_reclaim_reent+0xb0>
 8016dec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016dee:	b143      	cbz	r3, 8016e02 <_reclaim_reent+0x22>
 8016df0:	68db      	ldr	r3, [r3, #12]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d14a      	bne.n	8016e8c <_reclaim_reent+0xac>
 8016df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016df8:	6819      	ldr	r1, [r3, #0]
 8016dfa:	b111      	cbz	r1, 8016e02 <_reclaim_reent+0x22>
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	f7ff facd 	bl	801639c <_free_r>
 8016e02:	6961      	ldr	r1, [r4, #20]
 8016e04:	b111      	cbz	r1, 8016e0c <_reclaim_reent+0x2c>
 8016e06:	4620      	mov	r0, r4
 8016e08:	f7ff fac8 	bl	801639c <_free_r>
 8016e0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016e0e:	b111      	cbz	r1, 8016e16 <_reclaim_reent+0x36>
 8016e10:	4620      	mov	r0, r4
 8016e12:	f7ff fac3 	bl	801639c <_free_r>
 8016e16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016e18:	b111      	cbz	r1, 8016e20 <_reclaim_reent+0x40>
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	f7ff fabe 	bl	801639c <_free_r>
 8016e20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016e22:	b111      	cbz	r1, 8016e2a <_reclaim_reent+0x4a>
 8016e24:	4620      	mov	r0, r4
 8016e26:	f7ff fab9 	bl	801639c <_free_r>
 8016e2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016e2c:	b111      	cbz	r1, 8016e34 <_reclaim_reent+0x54>
 8016e2e:	4620      	mov	r0, r4
 8016e30:	f7ff fab4 	bl	801639c <_free_r>
 8016e34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016e36:	b111      	cbz	r1, 8016e3e <_reclaim_reent+0x5e>
 8016e38:	4620      	mov	r0, r4
 8016e3a:	f7ff faaf 	bl	801639c <_free_r>
 8016e3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016e40:	b111      	cbz	r1, 8016e48 <_reclaim_reent+0x68>
 8016e42:	4620      	mov	r0, r4
 8016e44:	f7ff faaa 	bl	801639c <_free_r>
 8016e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e4a:	b111      	cbz	r1, 8016e52 <_reclaim_reent+0x72>
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	f7ff faa5 	bl	801639c <_free_r>
 8016e52:	69a3      	ldr	r3, [r4, #24]
 8016e54:	b1e3      	cbz	r3, 8016e90 <_reclaim_reent+0xb0>
 8016e56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016e58:	4620      	mov	r0, r4
 8016e5a:	4798      	blx	r3
 8016e5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016e5e:	b1b9      	cbz	r1, 8016e90 <_reclaim_reent+0xb0>
 8016e60:	4620      	mov	r0, r4
 8016e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e66:	f7ff bfad 	b.w	8016dc4 <cleanup_glue>
 8016e6a:	5949      	ldr	r1, [r1, r5]
 8016e6c:	b941      	cbnz	r1, 8016e80 <_reclaim_reent+0xa0>
 8016e6e:	3504      	adds	r5, #4
 8016e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e72:	2d80      	cmp	r5, #128	; 0x80
 8016e74:	68d9      	ldr	r1, [r3, #12]
 8016e76:	d1f8      	bne.n	8016e6a <_reclaim_reent+0x8a>
 8016e78:	4620      	mov	r0, r4
 8016e7a:	f7ff fa8f 	bl	801639c <_free_r>
 8016e7e:	e7ba      	b.n	8016df6 <_reclaim_reent+0x16>
 8016e80:	680e      	ldr	r6, [r1, #0]
 8016e82:	4620      	mov	r0, r4
 8016e84:	f7ff fa8a 	bl	801639c <_free_r>
 8016e88:	4631      	mov	r1, r6
 8016e8a:	e7ef      	b.n	8016e6c <_reclaim_reent+0x8c>
 8016e8c:	2500      	movs	r5, #0
 8016e8e:	e7ef      	b.n	8016e70 <_reclaim_reent+0x90>
 8016e90:	bd70      	pop	{r4, r5, r6, pc}
 8016e92:	bf00      	nop
 8016e94:	200001a0 	.word	0x200001a0

08016e98 <_sbrk_r>:
 8016e98:	b538      	push	{r3, r4, r5, lr}
 8016e9a:	4d06      	ldr	r5, [pc, #24]	; (8016eb4 <_sbrk_r+0x1c>)
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	4604      	mov	r4, r0
 8016ea0:	4608      	mov	r0, r1
 8016ea2:	602b      	str	r3, [r5, #0]
 8016ea4:	f7ee f8e6 	bl	8005074 <_sbrk>
 8016ea8:	1c43      	adds	r3, r0, #1
 8016eaa:	d102      	bne.n	8016eb2 <_sbrk_r+0x1a>
 8016eac:	682b      	ldr	r3, [r5, #0]
 8016eae:	b103      	cbz	r3, 8016eb2 <_sbrk_r+0x1a>
 8016eb0:	6023      	str	r3, [r4, #0]
 8016eb2:	bd38      	pop	{r3, r4, r5, pc}
 8016eb4:	20016cbc 	.word	0x20016cbc

08016eb8 <siprintf>:
 8016eb8:	b40e      	push	{r1, r2, r3}
 8016eba:	b500      	push	{lr}
 8016ebc:	b09c      	sub	sp, #112	; 0x70
 8016ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8016ec0:	9002      	str	r0, [sp, #8]
 8016ec2:	9006      	str	r0, [sp, #24]
 8016ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ec8:	4809      	ldr	r0, [pc, #36]	; (8016ef0 <siprintf+0x38>)
 8016eca:	9107      	str	r1, [sp, #28]
 8016ecc:	9104      	str	r1, [sp, #16]
 8016ece:	4909      	ldr	r1, [pc, #36]	; (8016ef4 <siprintf+0x3c>)
 8016ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ed4:	9105      	str	r1, [sp, #20]
 8016ed6:	6800      	ldr	r0, [r0, #0]
 8016ed8:	9301      	str	r3, [sp, #4]
 8016eda:	a902      	add	r1, sp, #8
 8016edc:	f001 fc10 	bl	8018700 <_svfiprintf_r>
 8016ee0:	9b02      	ldr	r3, [sp, #8]
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	701a      	strb	r2, [r3, #0]
 8016ee6:	b01c      	add	sp, #112	; 0x70
 8016ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016eec:	b003      	add	sp, #12
 8016eee:	4770      	bx	lr
 8016ef0:	200001a0 	.word	0x200001a0
 8016ef4:	ffff0208 	.word	0xffff0208

08016ef8 <__sread>:
 8016ef8:	b510      	push	{r4, lr}
 8016efa:	460c      	mov	r4, r1
 8016efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f00:	f001 fcfe 	bl	8018900 <_read_r>
 8016f04:	2800      	cmp	r0, #0
 8016f06:	bfab      	itete	ge
 8016f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8016f0c:	181b      	addge	r3, r3, r0
 8016f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016f12:	bfac      	ite	ge
 8016f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8016f16:	81a3      	strhlt	r3, [r4, #12]
 8016f18:	bd10      	pop	{r4, pc}

08016f1a <__swrite>:
 8016f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f1e:	461f      	mov	r7, r3
 8016f20:	898b      	ldrh	r3, [r1, #12]
 8016f22:	05db      	lsls	r3, r3, #23
 8016f24:	4605      	mov	r5, r0
 8016f26:	460c      	mov	r4, r1
 8016f28:	4616      	mov	r6, r2
 8016f2a:	d505      	bpl.n	8016f38 <__swrite+0x1e>
 8016f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f30:	2302      	movs	r3, #2
 8016f32:	2200      	movs	r2, #0
 8016f34:	f000 ffde 	bl	8017ef4 <_lseek_r>
 8016f38:	89a3      	ldrh	r3, [r4, #12]
 8016f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f42:	81a3      	strh	r3, [r4, #12]
 8016f44:	4632      	mov	r2, r6
 8016f46:	463b      	mov	r3, r7
 8016f48:	4628      	mov	r0, r5
 8016f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f4e:	f000 b86f 	b.w	8017030 <_write_r>

08016f52 <__sseek>:
 8016f52:	b510      	push	{r4, lr}
 8016f54:	460c      	mov	r4, r1
 8016f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f5a:	f000 ffcb 	bl	8017ef4 <_lseek_r>
 8016f5e:	1c43      	adds	r3, r0, #1
 8016f60:	89a3      	ldrh	r3, [r4, #12]
 8016f62:	bf15      	itete	ne
 8016f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f6e:	81a3      	strheq	r3, [r4, #12]
 8016f70:	bf18      	it	ne
 8016f72:	81a3      	strhne	r3, [r4, #12]
 8016f74:	bd10      	pop	{r4, pc}

08016f76 <__sclose>:
 8016f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f7a:	f000 b86b 	b.w	8017054 <_close_r>

08016f7e <strcat>:
 8016f7e:	b510      	push	{r4, lr}
 8016f80:	4602      	mov	r2, r0
 8016f82:	7814      	ldrb	r4, [r2, #0]
 8016f84:	4613      	mov	r3, r2
 8016f86:	3201      	adds	r2, #1
 8016f88:	2c00      	cmp	r4, #0
 8016f8a:	d1fa      	bne.n	8016f82 <strcat+0x4>
 8016f8c:	3b01      	subs	r3, #1
 8016f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016f96:	2a00      	cmp	r2, #0
 8016f98:	d1f9      	bne.n	8016f8e <strcat+0x10>
 8016f9a:	bd10      	pop	{r4, pc}

08016f9c <strcpy>:
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016fa2:	f803 2b01 	strb.w	r2, [r3], #1
 8016fa6:	2a00      	cmp	r2, #0
 8016fa8:	d1f9      	bne.n	8016f9e <strcpy+0x2>
 8016faa:	4770      	bx	lr

08016fac <__utoa>:
 8016fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fae:	4c1f      	ldr	r4, [pc, #124]	; (801702c <__utoa+0x80>)
 8016fb0:	b08b      	sub	sp, #44	; 0x2c
 8016fb2:	4605      	mov	r5, r0
 8016fb4:	460b      	mov	r3, r1
 8016fb6:	466e      	mov	r6, sp
 8016fb8:	f104 0c20 	add.w	ip, r4, #32
 8016fbc:	6820      	ldr	r0, [r4, #0]
 8016fbe:	6861      	ldr	r1, [r4, #4]
 8016fc0:	4637      	mov	r7, r6
 8016fc2:	c703      	stmia	r7!, {r0, r1}
 8016fc4:	3408      	adds	r4, #8
 8016fc6:	4564      	cmp	r4, ip
 8016fc8:	463e      	mov	r6, r7
 8016fca:	d1f7      	bne.n	8016fbc <__utoa+0x10>
 8016fcc:	7921      	ldrb	r1, [r4, #4]
 8016fce:	7139      	strb	r1, [r7, #4]
 8016fd0:	1e91      	subs	r1, r2, #2
 8016fd2:	6820      	ldr	r0, [r4, #0]
 8016fd4:	6038      	str	r0, [r7, #0]
 8016fd6:	2922      	cmp	r1, #34	; 0x22
 8016fd8:	f04f 0100 	mov.w	r1, #0
 8016fdc:	d904      	bls.n	8016fe8 <__utoa+0x3c>
 8016fde:	7019      	strb	r1, [r3, #0]
 8016fe0:	460b      	mov	r3, r1
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	b00b      	add	sp, #44	; 0x2c
 8016fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fe8:	1e58      	subs	r0, r3, #1
 8016fea:	4684      	mov	ip, r0
 8016fec:	fbb5 f7f2 	udiv	r7, r5, r2
 8016ff0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8016ff4:	fb02 5617 	mls	r6, r2, r7, r5
 8016ff8:	4476      	add	r6, lr
 8016ffa:	460c      	mov	r4, r1
 8016ffc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8017000:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8017004:	462e      	mov	r6, r5
 8017006:	42b2      	cmp	r2, r6
 8017008:	f101 0101 	add.w	r1, r1, #1
 801700c:	463d      	mov	r5, r7
 801700e:	d9ed      	bls.n	8016fec <__utoa+0x40>
 8017010:	2200      	movs	r2, #0
 8017012:	545a      	strb	r2, [r3, r1]
 8017014:	1919      	adds	r1, r3, r4
 8017016:	1aa5      	subs	r5, r4, r2
 8017018:	42aa      	cmp	r2, r5
 801701a:	dae2      	bge.n	8016fe2 <__utoa+0x36>
 801701c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8017020:	780e      	ldrb	r6, [r1, #0]
 8017022:	7006      	strb	r6, [r0, #0]
 8017024:	3201      	adds	r2, #1
 8017026:	f801 5901 	strb.w	r5, [r1], #-1
 801702a:	e7f4      	b.n	8017016 <__utoa+0x6a>
 801702c:	08019fe0 	.word	0x08019fe0

08017030 <_write_r>:
 8017030:	b538      	push	{r3, r4, r5, lr}
 8017032:	4d07      	ldr	r5, [pc, #28]	; (8017050 <_write_r+0x20>)
 8017034:	4604      	mov	r4, r0
 8017036:	4608      	mov	r0, r1
 8017038:	4611      	mov	r1, r2
 801703a:	2200      	movs	r2, #0
 801703c:	602a      	str	r2, [r5, #0]
 801703e:	461a      	mov	r2, r3
 8017040:	f7ed ffc7 	bl	8004fd2 <_write>
 8017044:	1c43      	adds	r3, r0, #1
 8017046:	d102      	bne.n	801704e <_write_r+0x1e>
 8017048:	682b      	ldr	r3, [r5, #0]
 801704a:	b103      	cbz	r3, 801704e <_write_r+0x1e>
 801704c:	6023      	str	r3, [r4, #0]
 801704e:	bd38      	pop	{r3, r4, r5, pc}
 8017050:	20016cbc 	.word	0x20016cbc

08017054 <_close_r>:
 8017054:	b538      	push	{r3, r4, r5, lr}
 8017056:	4d06      	ldr	r5, [pc, #24]	; (8017070 <_close_r+0x1c>)
 8017058:	2300      	movs	r3, #0
 801705a:	4604      	mov	r4, r0
 801705c:	4608      	mov	r0, r1
 801705e:	602b      	str	r3, [r5, #0]
 8017060:	f7ed ffd3 	bl	800500a <_close>
 8017064:	1c43      	adds	r3, r0, #1
 8017066:	d102      	bne.n	801706e <_close_r+0x1a>
 8017068:	682b      	ldr	r3, [r5, #0]
 801706a:	b103      	cbz	r3, 801706e <_close_r+0x1a>
 801706c:	6023      	str	r3, [r4, #0]
 801706e:	bd38      	pop	{r3, r4, r5, pc}
 8017070:	20016cbc 	.word	0x20016cbc

08017074 <quorem>:
 8017074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017078:	6903      	ldr	r3, [r0, #16]
 801707a:	690c      	ldr	r4, [r1, #16]
 801707c:	42a3      	cmp	r3, r4
 801707e:	4607      	mov	r7, r0
 8017080:	f2c0 8081 	blt.w	8017186 <quorem+0x112>
 8017084:	3c01      	subs	r4, #1
 8017086:	f101 0814 	add.w	r8, r1, #20
 801708a:	f100 0514 	add.w	r5, r0, #20
 801708e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017092:	9301      	str	r3, [sp, #4]
 8017094:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801709c:	3301      	adds	r3, #1
 801709e:	429a      	cmp	r2, r3
 80170a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80170a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80170a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80170ac:	d331      	bcc.n	8017112 <quorem+0x9e>
 80170ae:	f04f 0e00 	mov.w	lr, #0
 80170b2:	4640      	mov	r0, r8
 80170b4:	46ac      	mov	ip, r5
 80170b6:	46f2      	mov	sl, lr
 80170b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80170bc:	b293      	uxth	r3, r2
 80170be:	fb06 e303 	mla	r3, r6, r3, lr
 80170c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80170c6:	b29b      	uxth	r3, r3
 80170c8:	ebaa 0303 	sub.w	r3, sl, r3
 80170cc:	0c12      	lsrs	r2, r2, #16
 80170ce:	f8dc a000 	ldr.w	sl, [ip]
 80170d2:	fb06 e202 	mla	r2, r6, r2, lr
 80170d6:	fa13 f38a 	uxtah	r3, r3, sl
 80170da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80170de:	fa1f fa82 	uxth.w	sl, r2
 80170e2:	f8dc 2000 	ldr.w	r2, [ip]
 80170e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80170ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80170ee:	b29b      	uxth	r3, r3
 80170f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80170f4:	4581      	cmp	r9, r0
 80170f6:	f84c 3b04 	str.w	r3, [ip], #4
 80170fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80170fe:	d2db      	bcs.n	80170b8 <quorem+0x44>
 8017100:	f855 300b 	ldr.w	r3, [r5, fp]
 8017104:	b92b      	cbnz	r3, 8017112 <quorem+0x9e>
 8017106:	9b01      	ldr	r3, [sp, #4]
 8017108:	3b04      	subs	r3, #4
 801710a:	429d      	cmp	r5, r3
 801710c:	461a      	mov	r2, r3
 801710e:	d32e      	bcc.n	801716e <quorem+0xfa>
 8017110:	613c      	str	r4, [r7, #16]
 8017112:	4638      	mov	r0, r7
 8017114:	f001 f98a 	bl	801842c <__mcmp>
 8017118:	2800      	cmp	r0, #0
 801711a:	db24      	blt.n	8017166 <quorem+0xf2>
 801711c:	3601      	adds	r6, #1
 801711e:	4628      	mov	r0, r5
 8017120:	f04f 0c00 	mov.w	ip, #0
 8017124:	f858 2b04 	ldr.w	r2, [r8], #4
 8017128:	f8d0 e000 	ldr.w	lr, [r0]
 801712c:	b293      	uxth	r3, r2
 801712e:	ebac 0303 	sub.w	r3, ip, r3
 8017132:	0c12      	lsrs	r2, r2, #16
 8017134:	fa13 f38e 	uxtah	r3, r3, lr
 8017138:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801713c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017140:	b29b      	uxth	r3, r3
 8017142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017146:	45c1      	cmp	r9, r8
 8017148:	f840 3b04 	str.w	r3, [r0], #4
 801714c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017150:	d2e8      	bcs.n	8017124 <quorem+0xb0>
 8017152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801715a:	b922      	cbnz	r2, 8017166 <quorem+0xf2>
 801715c:	3b04      	subs	r3, #4
 801715e:	429d      	cmp	r5, r3
 8017160:	461a      	mov	r2, r3
 8017162:	d30a      	bcc.n	801717a <quorem+0x106>
 8017164:	613c      	str	r4, [r7, #16]
 8017166:	4630      	mov	r0, r6
 8017168:	b003      	add	sp, #12
 801716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801716e:	6812      	ldr	r2, [r2, #0]
 8017170:	3b04      	subs	r3, #4
 8017172:	2a00      	cmp	r2, #0
 8017174:	d1cc      	bne.n	8017110 <quorem+0x9c>
 8017176:	3c01      	subs	r4, #1
 8017178:	e7c7      	b.n	801710a <quorem+0x96>
 801717a:	6812      	ldr	r2, [r2, #0]
 801717c:	3b04      	subs	r3, #4
 801717e:	2a00      	cmp	r2, #0
 8017180:	d1f0      	bne.n	8017164 <quorem+0xf0>
 8017182:	3c01      	subs	r4, #1
 8017184:	e7eb      	b.n	801715e <quorem+0xea>
 8017186:	2000      	movs	r0, #0
 8017188:	e7ee      	b.n	8017168 <quorem+0xf4>
 801718a:	0000      	movs	r0, r0
 801718c:	0000      	movs	r0, r0
	...

08017190 <_dtoa_r>:
 8017190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017194:	ed2d 8b02 	vpush	{d8}
 8017198:	ec57 6b10 	vmov	r6, r7, d0
 801719c:	b095      	sub	sp, #84	; 0x54
 801719e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80171a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80171a4:	9105      	str	r1, [sp, #20]
 80171a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80171aa:	4604      	mov	r4, r0
 80171ac:	9209      	str	r2, [sp, #36]	; 0x24
 80171ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80171b0:	b975      	cbnz	r5, 80171d0 <_dtoa_r+0x40>
 80171b2:	2010      	movs	r0, #16
 80171b4:	f7ff f8cc 	bl	8016350 <malloc>
 80171b8:	4602      	mov	r2, r0
 80171ba:	6260      	str	r0, [r4, #36]	; 0x24
 80171bc:	b920      	cbnz	r0, 80171c8 <_dtoa_r+0x38>
 80171be:	4bb2      	ldr	r3, [pc, #712]	; (8017488 <_dtoa_r+0x2f8>)
 80171c0:	21ea      	movs	r1, #234	; 0xea
 80171c2:	48b2      	ldr	r0, [pc, #712]	; (801748c <_dtoa_r+0x2fc>)
 80171c4:	f001 fbae 	bl	8018924 <__assert_func>
 80171c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80171cc:	6005      	str	r5, [r0, #0]
 80171ce:	60c5      	str	r5, [r0, #12]
 80171d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171d2:	6819      	ldr	r1, [r3, #0]
 80171d4:	b151      	cbz	r1, 80171ec <_dtoa_r+0x5c>
 80171d6:	685a      	ldr	r2, [r3, #4]
 80171d8:	604a      	str	r2, [r1, #4]
 80171da:	2301      	movs	r3, #1
 80171dc:	4093      	lsls	r3, r2
 80171de:	608b      	str	r3, [r1, #8]
 80171e0:	4620      	mov	r0, r4
 80171e2:	f000 fee5 	bl	8017fb0 <_Bfree>
 80171e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171e8:	2200      	movs	r2, #0
 80171ea:	601a      	str	r2, [r3, #0]
 80171ec:	1e3b      	subs	r3, r7, #0
 80171ee:	bfb9      	ittee	lt
 80171f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80171f4:	9303      	strlt	r3, [sp, #12]
 80171f6:	2300      	movge	r3, #0
 80171f8:	f8c8 3000 	strge.w	r3, [r8]
 80171fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017200:	4ba3      	ldr	r3, [pc, #652]	; (8017490 <_dtoa_r+0x300>)
 8017202:	bfbc      	itt	lt
 8017204:	2201      	movlt	r2, #1
 8017206:	f8c8 2000 	strlt.w	r2, [r8]
 801720a:	ea33 0309 	bics.w	r3, r3, r9
 801720e:	d11b      	bne.n	8017248 <_dtoa_r+0xb8>
 8017210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017212:	f242 730f 	movw	r3, #9999	; 0x270f
 8017216:	6013      	str	r3, [r2, #0]
 8017218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801721c:	4333      	orrs	r3, r6
 801721e:	f000 857a 	beq.w	8017d16 <_dtoa_r+0xb86>
 8017222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017224:	b963      	cbnz	r3, 8017240 <_dtoa_r+0xb0>
 8017226:	4b9b      	ldr	r3, [pc, #620]	; (8017494 <_dtoa_r+0x304>)
 8017228:	e024      	b.n	8017274 <_dtoa_r+0xe4>
 801722a:	4b9b      	ldr	r3, [pc, #620]	; (8017498 <_dtoa_r+0x308>)
 801722c:	9300      	str	r3, [sp, #0]
 801722e:	3308      	adds	r3, #8
 8017230:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017232:	6013      	str	r3, [r2, #0]
 8017234:	9800      	ldr	r0, [sp, #0]
 8017236:	b015      	add	sp, #84	; 0x54
 8017238:	ecbd 8b02 	vpop	{d8}
 801723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017240:	4b94      	ldr	r3, [pc, #592]	; (8017494 <_dtoa_r+0x304>)
 8017242:	9300      	str	r3, [sp, #0]
 8017244:	3303      	adds	r3, #3
 8017246:	e7f3      	b.n	8017230 <_dtoa_r+0xa0>
 8017248:	ed9d 7b02 	vldr	d7, [sp, #8]
 801724c:	2200      	movs	r2, #0
 801724e:	ec51 0b17 	vmov	r0, r1, d7
 8017252:	2300      	movs	r3, #0
 8017254:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017258:	f7e9 fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 801725c:	4680      	mov	r8, r0
 801725e:	b158      	cbz	r0, 8017278 <_dtoa_r+0xe8>
 8017260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017262:	2301      	movs	r3, #1
 8017264:	6013      	str	r3, [r2, #0]
 8017266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017268:	2b00      	cmp	r3, #0
 801726a:	f000 8551 	beq.w	8017d10 <_dtoa_r+0xb80>
 801726e:	488b      	ldr	r0, [pc, #556]	; (801749c <_dtoa_r+0x30c>)
 8017270:	6018      	str	r0, [r3, #0]
 8017272:	1e43      	subs	r3, r0, #1
 8017274:	9300      	str	r3, [sp, #0]
 8017276:	e7dd      	b.n	8017234 <_dtoa_r+0xa4>
 8017278:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801727c:	aa12      	add	r2, sp, #72	; 0x48
 801727e:	a913      	add	r1, sp, #76	; 0x4c
 8017280:	4620      	mov	r0, r4
 8017282:	f001 f977 	bl	8018574 <__d2b>
 8017286:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801728a:	4683      	mov	fp, r0
 801728c:	2d00      	cmp	r5, #0
 801728e:	d07c      	beq.n	801738a <_dtoa_r+0x1fa>
 8017290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017292:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801729a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801729e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80172a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80172a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80172aa:	4b7d      	ldr	r3, [pc, #500]	; (80174a0 <_dtoa_r+0x310>)
 80172ac:	2200      	movs	r2, #0
 80172ae:	4630      	mov	r0, r6
 80172b0:	4639      	mov	r1, r7
 80172b2:	f7e8 ffe9 	bl	8000288 <__aeabi_dsub>
 80172b6:	a36e      	add	r3, pc, #440	; (adr r3, 8017470 <_dtoa_r+0x2e0>)
 80172b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172bc:	f7e9 f99c 	bl	80005f8 <__aeabi_dmul>
 80172c0:	a36d      	add	r3, pc, #436	; (adr r3, 8017478 <_dtoa_r+0x2e8>)
 80172c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172c6:	f7e8 ffe1 	bl	800028c <__adddf3>
 80172ca:	4606      	mov	r6, r0
 80172cc:	4628      	mov	r0, r5
 80172ce:	460f      	mov	r7, r1
 80172d0:	f7e9 f928 	bl	8000524 <__aeabi_i2d>
 80172d4:	a36a      	add	r3, pc, #424	; (adr r3, 8017480 <_dtoa_r+0x2f0>)
 80172d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172da:	f7e9 f98d 	bl	80005f8 <__aeabi_dmul>
 80172de:	4602      	mov	r2, r0
 80172e0:	460b      	mov	r3, r1
 80172e2:	4630      	mov	r0, r6
 80172e4:	4639      	mov	r1, r7
 80172e6:	f7e8 ffd1 	bl	800028c <__adddf3>
 80172ea:	4606      	mov	r6, r0
 80172ec:	460f      	mov	r7, r1
 80172ee:	f7e9 fc33 	bl	8000b58 <__aeabi_d2iz>
 80172f2:	2200      	movs	r2, #0
 80172f4:	4682      	mov	sl, r0
 80172f6:	2300      	movs	r3, #0
 80172f8:	4630      	mov	r0, r6
 80172fa:	4639      	mov	r1, r7
 80172fc:	f7e9 fbee 	bl	8000adc <__aeabi_dcmplt>
 8017300:	b148      	cbz	r0, 8017316 <_dtoa_r+0x186>
 8017302:	4650      	mov	r0, sl
 8017304:	f7e9 f90e 	bl	8000524 <__aeabi_i2d>
 8017308:	4632      	mov	r2, r6
 801730a:	463b      	mov	r3, r7
 801730c:	f7e9 fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8017310:	b908      	cbnz	r0, 8017316 <_dtoa_r+0x186>
 8017312:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8017316:	f1ba 0f16 	cmp.w	sl, #22
 801731a:	d854      	bhi.n	80173c6 <_dtoa_r+0x236>
 801731c:	4b61      	ldr	r3, [pc, #388]	; (80174a4 <_dtoa_r+0x314>)
 801731e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801732a:	f7e9 fbd7 	bl	8000adc <__aeabi_dcmplt>
 801732e:	2800      	cmp	r0, #0
 8017330:	d04b      	beq.n	80173ca <_dtoa_r+0x23a>
 8017332:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8017336:	2300      	movs	r3, #0
 8017338:	930e      	str	r3, [sp, #56]	; 0x38
 801733a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801733c:	1b5d      	subs	r5, r3, r5
 801733e:	1e6b      	subs	r3, r5, #1
 8017340:	9304      	str	r3, [sp, #16]
 8017342:	bf43      	ittte	mi
 8017344:	2300      	movmi	r3, #0
 8017346:	f1c5 0801 	rsbmi	r8, r5, #1
 801734a:	9304      	strmi	r3, [sp, #16]
 801734c:	f04f 0800 	movpl.w	r8, #0
 8017350:	f1ba 0f00 	cmp.w	sl, #0
 8017354:	db3b      	blt.n	80173ce <_dtoa_r+0x23e>
 8017356:	9b04      	ldr	r3, [sp, #16]
 8017358:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801735c:	4453      	add	r3, sl
 801735e:	9304      	str	r3, [sp, #16]
 8017360:	2300      	movs	r3, #0
 8017362:	9306      	str	r3, [sp, #24]
 8017364:	9b05      	ldr	r3, [sp, #20]
 8017366:	2b09      	cmp	r3, #9
 8017368:	d869      	bhi.n	801743e <_dtoa_r+0x2ae>
 801736a:	2b05      	cmp	r3, #5
 801736c:	bfc4      	itt	gt
 801736e:	3b04      	subgt	r3, #4
 8017370:	9305      	strgt	r3, [sp, #20]
 8017372:	9b05      	ldr	r3, [sp, #20]
 8017374:	f1a3 0302 	sub.w	r3, r3, #2
 8017378:	bfcc      	ite	gt
 801737a:	2500      	movgt	r5, #0
 801737c:	2501      	movle	r5, #1
 801737e:	2b03      	cmp	r3, #3
 8017380:	d869      	bhi.n	8017456 <_dtoa_r+0x2c6>
 8017382:	e8df f003 	tbb	[pc, r3]
 8017386:	4e2c      	.short	0x4e2c
 8017388:	5a4c      	.short	0x5a4c
 801738a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801738e:	441d      	add	r5, r3
 8017390:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017394:	2b20      	cmp	r3, #32
 8017396:	bfc1      	itttt	gt
 8017398:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801739c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80173a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80173a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80173a8:	bfda      	itte	le
 80173aa:	f1c3 0320 	rsble	r3, r3, #32
 80173ae:	fa06 f003 	lslle.w	r0, r6, r3
 80173b2:	4318      	orrgt	r0, r3
 80173b4:	f7e9 f8a6 	bl	8000504 <__aeabi_ui2d>
 80173b8:	2301      	movs	r3, #1
 80173ba:	4606      	mov	r6, r0
 80173bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80173c0:	3d01      	subs	r5, #1
 80173c2:	9310      	str	r3, [sp, #64]	; 0x40
 80173c4:	e771      	b.n	80172aa <_dtoa_r+0x11a>
 80173c6:	2301      	movs	r3, #1
 80173c8:	e7b6      	b.n	8017338 <_dtoa_r+0x1a8>
 80173ca:	900e      	str	r0, [sp, #56]	; 0x38
 80173cc:	e7b5      	b.n	801733a <_dtoa_r+0x1aa>
 80173ce:	f1ca 0300 	rsb	r3, sl, #0
 80173d2:	9306      	str	r3, [sp, #24]
 80173d4:	2300      	movs	r3, #0
 80173d6:	eba8 080a 	sub.w	r8, r8, sl
 80173da:	930d      	str	r3, [sp, #52]	; 0x34
 80173dc:	e7c2      	b.n	8017364 <_dtoa_r+0x1d4>
 80173de:	2300      	movs	r3, #0
 80173e0:	9308      	str	r3, [sp, #32]
 80173e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	dc39      	bgt.n	801745c <_dtoa_r+0x2cc>
 80173e8:	f04f 0901 	mov.w	r9, #1
 80173ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80173f0:	464b      	mov	r3, r9
 80173f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80173f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80173f8:	2200      	movs	r2, #0
 80173fa:	6042      	str	r2, [r0, #4]
 80173fc:	2204      	movs	r2, #4
 80173fe:	f102 0614 	add.w	r6, r2, #20
 8017402:	429e      	cmp	r6, r3
 8017404:	6841      	ldr	r1, [r0, #4]
 8017406:	d92f      	bls.n	8017468 <_dtoa_r+0x2d8>
 8017408:	4620      	mov	r0, r4
 801740a:	f000 fd91 	bl	8017f30 <_Balloc>
 801740e:	9000      	str	r0, [sp, #0]
 8017410:	2800      	cmp	r0, #0
 8017412:	d14b      	bne.n	80174ac <_dtoa_r+0x31c>
 8017414:	4b24      	ldr	r3, [pc, #144]	; (80174a8 <_dtoa_r+0x318>)
 8017416:	4602      	mov	r2, r0
 8017418:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801741c:	e6d1      	b.n	80171c2 <_dtoa_r+0x32>
 801741e:	2301      	movs	r3, #1
 8017420:	e7de      	b.n	80173e0 <_dtoa_r+0x250>
 8017422:	2300      	movs	r3, #0
 8017424:	9308      	str	r3, [sp, #32]
 8017426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017428:	eb0a 0903 	add.w	r9, sl, r3
 801742c:	f109 0301 	add.w	r3, r9, #1
 8017430:	2b01      	cmp	r3, #1
 8017432:	9301      	str	r3, [sp, #4]
 8017434:	bfb8      	it	lt
 8017436:	2301      	movlt	r3, #1
 8017438:	e7dd      	b.n	80173f6 <_dtoa_r+0x266>
 801743a:	2301      	movs	r3, #1
 801743c:	e7f2      	b.n	8017424 <_dtoa_r+0x294>
 801743e:	2501      	movs	r5, #1
 8017440:	2300      	movs	r3, #0
 8017442:	9305      	str	r3, [sp, #20]
 8017444:	9508      	str	r5, [sp, #32]
 8017446:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801744a:	2200      	movs	r2, #0
 801744c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017450:	2312      	movs	r3, #18
 8017452:	9209      	str	r2, [sp, #36]	; 0x24
 8017454:	e7cf      	b.n	80173f6 <_dtoa_r+0x266>
 8017456:	2301      	movs	r3, #1
 8017458:	9308      	str	r3, [sp, #32]
 801745a:	e7f4      	b.n	8017446 <_dtoa_r+0x2b6>
 801745c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017460:	f8cd 9004 	str.w	r9, [sp, #4]
 8017464:	464b      	mov	r3, r9
 8017466:	e7c6      	b.n	80173f6 <_dtoa_r+0x266>
 8017468:	3101      	adds	r1, #1
 801746a:	6041      	str	r1, [r0, #4]
 801746c:	0052      	lsls	r2, r2, #1
 801746e:	e7c6      	b.n	80173fe <_dtoa_r+0x26e>
 8017470:	636f4361 	.word	0x636f4361
 8017474:	3fd287a7 	.word	0x3fd287a7
 8017478:	8b60c8b3 	.word	0x8b60c8b3
 801747c:	3fc68a28 	.word	0x3fc68a28
 8017480:	509f79fb 	.word	0x509f79fb
 8017484:	3fd34413 	.word	0x3fd34413
 8017488:	0801a012 	.word	0x0801a012
 801748c:	0801a029 	.word	0x0801a029
 8017490:	7ff00000 	.word	0x7ff00000
 8017494:	0801a00e 	.word	0x0801a00e
 8017498:	0801a005 	.word	0x0801a005
 801749c:	08019fbd 	.word	0x08019fbd
 80174a0:	3ff80000 	.word	0x3ff80000
 80174a4:	0801a128 	.word	0x0801a128
 80174a8:	0801a088 	.word	0x0801a088
 80174ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80174ae:	9a00      	ldr	r2, [sp, #0]
 80174b0:	601a      	str	r2, [r3, #0]
 80174b2:	9b01      	ldr	r3, [sp, #4]
 80174b4:	2b0e      	cmp	r3, #14
 80174b6:	f200 80ad 	bhi.w	8017614 <_dtoa_r+0x484>
 80174ba:	2d00      	cmp	r5, #0
 80174bc:	f000 80aa 	beq.w	8017614 <_dtoa_r+0x484>
 80174c0:	f1ba 0f00 	cmp.w	sl, #0
 80174c4:	dd36      	ble.n	8017534 <_dtoa_r+0x3a4>
 80174c6:	4ac3      	ldr	r2, [pc, #780]	; (80177d4 <_dtoa_r+0x644>)
 80174c8:	f00a 030f 	and.w	r3, sl, #15
 80174cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80174d0:	ed93 7b00 	vldr	d7, [r3]
 80174d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80174d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80174dc:	eeb0 8a47 	vmov.f32	s16, s14
 80174e0:	eef0 8a67 	vmov.f32	s17, s15
 80174e4:	d016      	beq.n	8017514 <_dtoa_r+0x384>
 80174e6:	4bbc      	ldr	r3, [pc, #752]	; (80177d8 <_dtoa_r+0x648>)
 80174e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80174ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80174f0:	f7e9 f9ac 	bl	800084c <__aeabi_ddiv>
 80174f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80174f8:	f007 070f 	and.w	r7, r7, #15
 80174fc:	2503      	movs	r5, #3
 80174fe:	4eb6      	ldr	r6, [pc, #728]	; (80177d8 <_dtoa_r+0x648>)
 8017500:	b957      	cbnz	r7, 8017518 <_dtoa_r+0x388>
 8017502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017506:	ec53 2b18 	vmov	r2, r3, d8
 801750a:	f7e9 f99f 	bl	800084c <__aeabi_ddiv>
 801750e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017512:	e029      	b.n	8017568 <_dtoa_r+0x3d8>
 8017514:	2502      	movs	r5, #2
 8017516:	e7f2      	b.n	80174fe <_dtoa_r+0x36e>
 8017518:	07f9      	lsls	r1, r7, #31
 801751a:	d508      	bpl.n	801752e <_dtoa_r+0x39e>
 801751c:	ec51 0b18 	vmov	r0, r1, d8
 8017520:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017524:	f7e9 f868 	bl	80005f8 <__aeabi_dmul>
 8017528:	ec41 0b18 	vmov	d8, r0, r1
 801752c:	3501      	adds	r5, #1
 801752e:	107f      	asrs	r7, r7, #1
 8017530:	3608      	adds	r6, #8
 8017532:	e7e5      	b.n	8017500 <_dtoa_r+0x370>
 8017534:	f000 80a6 	beq.w	8017684 <_dtoa_r+0x4f4>
 8017538:	f1ca 0600 	rsb	r6, sl, #0
 801753c:	4ba5      	ldr	r3, [pc, #660]	; (80177d4 <_dtoa_r+0x644>)
 801753e:	4fa6      	ldr	r7, [pc, #664]	; (80177d8 <_dtoa_r+0x648>)
 8017540:	f006 020f 	and.w	r2, r6, #15
 8017544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801754c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017550:	f7e9 f852 	bl	80005f8 <__aeabi_dmul>
 8017554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017558:	1136      	asrs	r6, r6, #4
 801755a:	2300      	movs	r3, #0
 801755c:	2502      	movs	r5, #2
 801755e:	2e00      	cmp	r6, #0
 8017560:	f040 8085 	bne.w	801766e <_dtoa_r+0x4de>
 8017564:	2b00      	cmp	r3, #0
 8017566:	d1d2      	bne.n	801750e <_dtoa_r+0x37e>
 8017568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801756a:	2b00      	cmp	r3, #0
 801756c:	f000 808c 	beq.w	8017688 <_dtoa_r+0x4f8>
 8017570:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017574:	4b99      	ldr	r3, [pc, #612]	; (80177dc <_dtoa_r+0x64c>)
 8017576:	2200      	movs	r2, #0
 8017578:	4630      	mov	r0, r6
 801757a:	4639      	mov	r1, r7
 801757c:	f7e9 faae 	bl	8000adc <__aeabi_dcmplt>
 8017580:	2800      	cmp	r0, #0
 8017582:	f000 8081 	beq.w	8017688 <_dtoa_r+0x4f8>
 8017586:	9b01      	ldr	r3, [sp, #4]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d07d      	beq.n	8017688 <_dtoa_r+0x4f8>
 801758c:	f1b9 0f00 	cmp.w	r9, #0
 8017590:	dd3c      	ble.n	801760c <_dtoa_r+0x47c>
 8017592:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8017596:	9307      	str	r3, [sp, #28]
 8017598:	2200      	movs	r2, #0
 801759a:	4b91      	ldr	r3, [pc, #580]	; (80177e0 <_dtoa_r+0x650>)
 801759c:	4630      	mov	r0, r6
 801759e:	4639      	mov	r1, r7
 80175a0:	f7e9 f82a 	bl	80005f8 <__aeabi_dmul>
 80175a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175a8:	3501      	adds	r5, #1
 80175aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80175ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80175b2:	4628      	mov	r0, r5
 80175b4:	f7e8 ffb6 	bl	8000524 <__aeabi_i2d>
 80175b8:	4632      	mov	r2, r6
 80175ba:	463b      	mov	r3, r7
 80175bc:	f7e9 f81c 	bl	80005f8 <__aeabi_dmul>
 80175c0:	4b88      	ldr	r3, [pc, #544]	; (80177e4 <_dtoa_r+0x654>)
 80175c2:	2200      	movs	r2, #0
 80175c4:	f7e8 fe62 	bl	800028c <__adddf3>
 80175c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80175cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175d0:	9303      	str	r3, [sp, #12]
 80175d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d15c      	bne.n	8017692 <_dtoa_r+0x502>
 80175d8:	4b83      	ldr	r3, [pc, #524]	; (80177e8 <_dtoa_r+0x658>)
 80175da:	2200      	movs	r2, #0
 80175dc:	4630      	mov	r0, r6
 80175de:	4639      	mov	r1, r7
 80175e0:	f7e8 fe52 	bl	8000288 <__aeabi_dsub>
 80175e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80175e8:	4606      	mov	r6, r0
 80175ea:	460f      	mov	r7, r1
 80175ec:	f7e9 fa94 	bl	8000b18 <__aeabi_dcmpgt>
 80175f0:	2800      	cmp	r0, #0
 80175f2:	f040 8296 	bne.w	8017b22 <_dtoa_r+0x992>
 80175f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80175fa:	4630      	mov	r0, r6
 80175fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017600:	4639      	mov	r1, r7
 8017602:	f7e9 fa6b 	bl	8000adc <__aeabi_dcmplt>
 8017606:	2800      	cmp	r0, #0
 8017608:	f040 8288 	bne.w	8017b1c <_dtoa_r+0x98c>
 801760c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017610:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017616:	2b00      	cmp	r3, #0
 8017618:	f2c0 8158 	blt.w	80178cc <_dtoa_r+0x73c>
 801761c:	f1ba 0f0e 	cmp.w	sl, #14
 8017620:	f300 8154 	bgt.w	80178cc <_dtoa_r+0x73c>
 8017624:	4b6b      	ldr	r3, [pc, #428]	; (80177d4 <_dtoa_r+0x644>)
 8017626:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801762a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017630:	2b00      	cmp	r3, #0
 8017632:	f280 80e3 	bge.w	80177fc <_dtoa_r+0x66c>
 8017636:	9b01      	ldr	r3, [sp, #4]
 8017638:	2b00      	cmp	r3, #0
 801763a:	f300 80df 	bgt.w	80177fc <_dtoa_r+0x66c>
 801763e:	f040 826d 	bne.w	8017b1c <_dtoa_r+0x98c>
 8017642:	4b69      	ldr	r3, [pc, #420]	; (80177e8 <_dtoa_r+0x658>)
 8017644:	2200      	movs	r2, #0
 8017646:	4640      	mov	r0, r8
 8017648:	4649      	mov	r1, r9
 801764a:	f7e8 ffd5 	bl	80005f8 <__aeabi_dmul>
 801764e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017652:	f7e9 fa57 	bl	8000b04 <__aeabi_dcmpge>
 8017656:	9e01      	ldr	r6, [sp, #4]
 8017658:	4637      	mov	r7, r6
 801765a:	2800      	cmp	r0, #0
 801765c:	f040 8243 	bne.w	8017ae6 <_dtoa_r+0x956>
 8017660:	9d00      	ldr	r5, [sp, #0]
 8017662:	2331      	movs	r3, #49	; 0x31
 8017664:	f805 3b01 	strb.w	r3, [r5], #1
 8017668:	f10a 0a01 	add.w	sl, sl, #1
 801766c:	e23f      	b.n	8017aee <_dtoa_r+0x95e>
 801766e:	07f2      	lsls	r2, r6, #31
 8017670:	d505      	bpl.n	801767e <_dtoa_r+0x4ee>
 8017672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017676:	f7e8 ffbf 	bl	80005f8 <__aeabi_dmul>
 801767a:	3501      	adds	r5, #1
 801767c:	2301      	movs	r3, #1
 801767e:	1076      	asrs	r6, r6, #1
 8017680:	3708      	adds	r7, #8
 8017682:	e76c      	b.n	801755e <_dtoa_r+0x3ce>
 8017684:	2502      	movs	r5, #2
 8017686:	e76f      	b.n	8017568 <_dtoa_r+0x3d8>
 8017688:	9b01      	ldr	r3, [sp, #4]
 801768a:	f8cd a01c 	str.w	sl, [sp, #28]
 801768e:	930c      	str	r3, [sp, #48]	; 0x30
 8017690:	e78d      	b.n	80175ae <_dtoa_r+0x41e>
 8017692:	9900      	ldr	r1, [sp, #0]
 8017694:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017698:	4b4e      	ldr	r3, [pc, #312]	; (80177d4 <_dtoa_r+0x644>)
 801769a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801769e:	4401      	add	r1, r0
 80176a0:	9102      	str	r1, [sp, #8]
 80176a2:	9908      	ldr	r1, [sp, #32]
 80176a4:	eeb0 8a47 	vmov.f32	s16, s14
 80176a8:	eef0 8a67 	vmov.f32	s17, s15
 80176ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80176b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80176b4:	2900      	cmp	r1, #0
 80176b6:	d045      	beq.n	8017744 <_dtoa_r+0x5b4>
 80176b8:	494c      	ldr	r1, [pc, #304]	; (80177ec <_dtoa_r+0x65c>)
 80176ba:	2000      	movs	r0, #0
 80176bc:	f7e9 f8c6 	bl	800084c <__aeabi_ddiv>
 80176c0:	ec53 2b18 	vmov	r2, r3, d8
 80176c4:	f7e8 fde0 	bl	8000288 <__aeabi_dsub>
 80176c8:	9d00      	ldr	r5, [sp, #0]
 80176ca:	ec41 0b18 	vmov	d8, r0, r1
 80176ce:	4639      	mov	r1, r7
 80176d0:	4630      	mov	r0, r6
 80176d2:	f7e9 fa41 	bl	8000b58 <__aeabi_d2iz>
 80176d6:	900c      	str	r0, [sp, #48]	; 0x30
 80176d8:	f7e8 ff24 	bl	8000524 <__aeabi_i2d>
 80176dc:	4602      	mov	r2, r0
 80176de:	460b      	mov	r3, r1
 80176e0:	4630      	mov	r0, r6
 80176e2:	4639      	mov	r1, r7
 80176e4:	f7e8 fdd0 	bl	8000288 <__aeabi_dsub>
 80176e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176ea:	3330      	adds	r3, #48	; 0x30
 80176ec:	f805 3b01 	strb.w	r3, [r5], #1
 80176f0:	ec53 2b18 	vmov	r2, r3, d8
 80176f4:	4606      	mov	r6, r0
 80176f6:	460f      	mov	r7, r1
 80176f8:	f7e9 f9f0 	bl	8000adc <__aeabi_dcmplt>
 80176fc:	2800      	cmp	r0, #0
 80176fe:	d165      	bne.n	80177cc <_dtoa_r+0x63c>
 8017700:	4632      	mov	r2, r6
 8017702:	463b      	mov	r3, r7
 8017704:	4935      	ldr	r1, [pc, #212]	; (80177dc <_dtoa_r+0x64c>)
 8017706:	2000      	movs	r0, #0
 8017708:	f7e8 fdbe 	bl	8000288 <__aeabi_dsub>
 801770c:	ec53 2b18 	vmov	r2, r3, d8
 8017710:	f7e9 f9e4 	bl	8000adc <__aeabi_dcmplt>
 8017714:	2800      	cmp	r0, #0
 8017716:	f040 80b9 	bne.w	801788c <_dtoa_r+0x6fc>
 801771a:	9b02      	ldr	r3, [sp, #8]
 801771c:	429d      	cmp	r5, r3
 801771e:	f43f af75 	beq.w	801760c <_dtoa_r+0x47c>
 8017722:	4b2f      	ldr	r3, [pc, #188]	; (80177e0 <_dtoa_r+0x650>)
 8017724:	ec51 0b18 	vmov	r0, r1, d8
 8017728:	2200      	movs	r2, #0
 801772a:	f7e8 ff65 	bl	80005f8 <__aeabi_dmul>
 801772e:	4b2c      	ldr	r3, [pc, #176]	; (80177e0 <_dtoa_r+0x650>)
 8017730:	ec41 0b18 	vmov	d8, r0, r1
 8017734:	2200      	movs	r2, #0
 8017736:	4630      	mov	r0, r6
 8017738:	4639      	mov	r1, r7
 801773a:	f7e8 ff5d 	bl	80005f8 <__aeabi_dmul>
 801773e:	4606      	mov	r6, r0
 8017740:	460f      	mov	r7, r1
 8017742:	e7c4      	b.n	80176ce <_dtoa_r+0x53e>
 8017744:	ec51 0b17 	vmov	r0, r1, d7
 8017748:	f7e8 ff56 	bl	80005f8 <__aeabi_dmul>
 801774c:	9b02      	ldr	r3, [sp, #8]
 801774e:	9d00      	ldr	r5, [sp, #0]
 8017750:	930c      	str	r3, [sp, #48]	; 0x30
 8017752:	ec41 0b18 	vmov	d8, r0, r1
 8017756:	4639      	mov	r1, r7
 8017758:	4630      	mov	r0, r6
 801775a:	f7e9 f9fd 	bl	8000b58 <__aeabi_d2iz>
 801775e:	9011      	str	r0, [sp, #68]	; 0x44
 8017760:	f7e8 fee0 	bl	8000524 <__aeabi_i2d>
 8017764:	4602      	mov	r2, r0
 8017766:	460b      	mov	r3, r1
 8017768:	4630      	mov	r0, r6
 801776a:	4639      	mov	r1, r7
 801776c:	f7e8 fd8c 	bl	8000288 <__aeabi_dsub>
 8017770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017772:	3330      	adds	r3, #48	; 0x30
 8017774:	f805 3b01 	strb.w	r3, [r5], #1
 8017778:	9b02      	ldr	r3, [sp, #8]
 801777a:	429d      	cmp	r5, r3
 801777c:	4606      	mov	r6, r0
 801777e:	460f      	mov	r7, r1
 8017780:	f04f 0200 	mov.w	r2, #0
 8017784:	d134      	bne.n	80177f0 <_dtoa_r+0x660>
 8017786:	4b19      	ldr	r3, [pc, #100]	; (80177ec <_dtoa_r+0x65c>)
 8017788:	ec51 0b18 	vmov	r0, r1, d8
 801778c:	f7e8 fd7e 	bl	800028c <__adddf3>
 8017790:	4602      	mov	r2, r0
 8017792:	460b      	mov	r3, r1
 8017794:	4630      	mov	r0, r6
 8017796:	4639      	mov	r1, r7
 8017798:	f7e9 f9be 	bl	8000b18 <__aeabi_dcmpgt>
 801779c:	2800      	cmp	r0, #0
 801779e:	d175      	bne.n	801788c <_dtoa_r+0x6fc>
 80177a0:	ec53 2b18 	vmov	r2, r3, d8
 80177a4:	4911      	ldr	r1, [pc, #68]	; (80177ec <_dtoa_r+0x65c>)
 80177a6:	2000      	movs	r0, #0
 80177a8:	f7e8 fd6e 	bl	8000288 <__aeabi_dsub>
 80177ac:	4602      	mov	r2, r0
 80177ae:	460b      	mov	r3, r1
 80177b0:	4630      	mov	r0, r6
 80177b2:	4639      	mov	r1, r7
 80177b4:	f7e9 f992 	bl	8000adc <__aeabi_dcmplt>
 80177b8:	2800      	cmp	r0, #0
 80177ba:	f43f af27 	beq.w	801760c <_dtoa_r+0x47c>
 80177be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80177c0:	1e6b      	subs	r3, r5, #1
 80177c2:	930c      	str	r3, [sp, #48]	; 0x30
 80177c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80177c8:	2b30      	cmp	r3, #48	; 0x30
 80177ca:	d0f8      	beq.n	80177be <_dtoa_r+0x62e>
 80177cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80177d0:	e04a      	b.n	8017868 <_dtoa_r+0x6d8>
 80177d2:	bf00      	nop
 80177d4:	0801a128 	.word	0x0801a128
 80177d8:	0801a100 	.word	0x0801a100
 80177dc:	3ff00000 	.word	0x3ff00000
 80177e0:	40240000 	.word	0x40240000
 80177e4:	401c0000 	.word	0x401c0000
 80177e8:	40140000 	.word	0x40140000
 80177ec:	3fe00000 	.word	0x3fe00000
 80177f0:	4baf      	ldr	r3, [pc, #700]	; (8017ab0 <_dtoa_r+0x920>)
 80177f2:	f7e8 ff01 	bl	80005f8 <__aeabi_dmul>
 80177f6:	4606      	mov	r6, r0
 80177f8:	460f      	mov	r7, r1
 80177fa:	e7ac      	b.n	8017756 <_dtoa_r+0x5c6>
 80177fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017800:	9d00      	ldr	r5, [sp, #0]
 8017802:	4642      	mov	r2, r8
 8017804:	464b      	mov	r3, r9
 8017806:	4630      	mov	r0, r6
 8017808:	4639      	mov	r1, r7
 801780a:	f7e9 f81f 	bl	800084c <__aeabi_ddiv>
 801780e:	f7e9 f9a3 	bl	8000b58 <__aeabi_d2iz>
 8017812:	9002      	str	r0, [sp, #8]
 8017814:	f7e8 fe86 	bl	8000524 <__aeabi_i2d>
 8017818:	4642      	mov	r2, r8
 801781a:	464b      	mov	r3, r9
 801781c:	f7e8 feec 	bl	80005f8 <__aeabi_dmul>
 8017820:	4602      	mov	r2, r0
 8017822:	460b      	mov	r3, r1
 8017824:	4630      	mov	r0, r6
 8017826:	4639      	mov	r1, r7
 8017828:	f7e8 fd2e 	bl	8000288 <__aeabi_dsub>
 801782c:	9e02      	ldr	r6, [sp, #8]
 801782e:	9f01      	ldr	r7, [sp, #4]
 8017830:	3630      	adds	r6, #48	; 0x30
 8017832:	f805 6b01 	strb.w	r6, [r5], #1
 8017836:	9e00      	ldr	r6, [sp, #0]
 8017838:	1bae      	subs	r6, r5, r6
 801783a:	42b7      	cmp	r7, r6
 801783c:	4602      	mov	r2, r0
 801783e:	460b      	mov	r3, r1
 8017840:	d137      	bne.n	80178b2 <_dtoa_r+0x722>
 8017842:	f7e8 fd23 	bl	800028c <__adddf3>
 8017846:	4642      	mov	r2, r8
 8017848:	464b      	mov	r3, r9
 801784a:	4606      	mov	r6, r0
 801784c:	460f      	mov	r7, r1
 801784e:	f7e9 f963 	bl	8000b18 <__aeabi_dcmpgt>
 8017852:	b9c8      	cbnz	r0, 8017888 <_dtoa_r+0x6f8>
 8017854:	4642      	mov	r2, r8
 8017856:	464b      	mov	r3, r9
 8017858:	4630      	mov	r0, r6
 801785a:	4639      	mov	r1, r7
 801785c:	f7e9 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8017860:	b110      	cbz	r0, 8017868 <_dtoa_r+0x6d8>
 8017862:	9b02      	ldr	r3, [sp, #8]
 8017864:	07d9      	lsls	r1, r3, #31
 8017866:	d40f      	bmi.n	8017888 <_dtoa_r+0x6f8>
 8017868:	4620      	mov	r0, r4
 801786a:	4659      	mov	r1, fp
 801786c:	f000 fba0 	bl	8017fb0 <_Bfree>
 8017870:	2300      	movs	r3, #0
 8017872:	702b      	strb	r3, [r5, #0]
 8017874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017876:	f10a 0001 	add.w	r0, sl, #1
 801787a:	6018      	str	r0, [r3, #0]
 801787c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801787e:	2b00      	cmp	r3, #0
 8017880:	f43f acd8 	beq.w	8017234 <_dtoa_r+0xa4>
 8017884:	601d      	str	r5, [r3, #0]
 8017886:	e4d5      	b.n	8017234 <_dtoa_r+0xa4>
 8017888:	f8cd a01c 	str.w	sl, [sp, #28]
 801788c:	462b      	mov	r3, r5
 801788e:	461d      	mov	r5, r3
 8017890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017894:	2a39      	cmp	r2, #57	; 0x39
 8017896:	d108      	bne.n	80178aa <_dtoa_r+0x71a>
 8017898:	9a00      	ldr	r2, [sp, #0]
 801789a:	429a      	cmp	r2, r3
 801789c:	d1f7      	bne.n	801788e <_dtoa_r+0x6fe>
 801789e:	9a07      	ldr	r2, [sp, #28]
 80178a0:	9900      	ldr	r1, [sp, #0]
 80178a2:	3201      	adds	r2, #1
 80178a4:	9207      	str	r2, [sp, #28]
 80178a6:	2230      	movs	r2, #48	; 0x30
 80178a8:	700a      	strb	r2, [r1, #0]
 80178aa:	781a      	ldrb	r2, [r3, #0]
 80178ac:	3201      	adds	r2, #1
 80178ae:	701a      	strb	r2, [r3, #0]
 80178b0:	e78c      	b.n	80177cc <_dtoa_r+0x63c>
 80178b2:	4b7f      	ldr	r3, [pc, #508]	; (8017ab0 <_dtoa_r+0x920>)
 80178b4:	2200      	movs	r2, #0
 80178b6:	f7e8 fe9f 	bl	80005f8 <__aeabi_dmul>
 80178ba:	2200      	movs	r2, #0
 80178bc:	2300      	movs	r3, #0
 80178be:	4606      	mov	r6, r0
 80178c0:	460f      	mov	r7, r1
 80178c2:	f7e9 f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80178c6:	2800      	cmp	r0, #0
 80178c8:	d09b      	beq.n	8017802 <_dtoa_r+0x672>
 80178ca:	e7cd      	b.n	8017868 <_dtoa_r+0x6d8>
 80178cc:	9a08      	ldr	r2, [sp, #32]
 80178ce:	2a00      	cmp	r2, #0
 80178d0:	f000 80c4 	beq.w	8017a5c <_dtoa_r+0x8cc>
 80178d4:	9a05      	ldr	r2, [sp, #20]
 80178d6:	2a01      	cmp	r2, #1
 80178d8:	f300 80a8 	bgt.w	8017a2c <_dtoa_r+0x89c>
 80178dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80178de:	2a00      	cmp	r2, #0
 80178e0:	f000 80a0 	beq.w	8017a24 <_dtoa_r+0x894>
 80178e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80178e8:	9e06      	ldr	r6, [sp, #24]
 80178ea:	4645      	mov	r5, r8
 80178ec:	9a04      	ldr	r2, [sp, #16]
 80178ee:	2101      	movs	r1, #1
 80178f0:	441a      	add	r2, r3
 80178f2:	4620      	mov	r0, r4
 80178f4:	4498      	add	r8, r3
 80178f6:	9204      	str	r2, [sp, #16]
 80178f8:	f000 fc16 	bl	8018128 <__i2b>
 80178fc:	4607      	mov	r7, r0
 80178fe:	2d00      	cmp	r5, #0
 8017900:	dd0b      	ble.n	801791a <_dtoa_r+0x78a>
 8017902:	9b04      	ldr	r3, [sp, #16]
 8017904:	2b00      	cmp	r3, #0
 8017906:	dd08      	ble.n	801791a <_dtoa_r+0x78a>
 8017908:	42ab      	cmp	r3, r5
 801790a:	9a04      	ldr	r2, [sp, #16]
 801790c:	bfa8      	it	ge
 801790e:	462b      	movge	r3, r5
 8017910:	eba8 0803 	sub.w	r8, r8, r3
 8017914:	1aed      	subs	r5, r5, r3
 8017916:	1ad3      	subs	r3, r2, r3
 8017918:	9304      	str	r3, [sp, #16]
 801791a:	9b06      	ldr	r3, [sp, #24]
 801791c:	b1fb      	cbz	r3, 801795e <_dtoa_r+0x7ce>
 801791e:	9b08      	ldr	r3, [sp, #32]
 8017920:	2b00      	cmp	r3, #0
 8017922:	f000 809f 	beq.w	8017a64 <_dtoa_r+0x8d4>
 8017926:	2e00      	cmp	r6, #0
 8017928:	dd11      	ble.n	801794e <_dtoa_r+0x7be>
 801792a:	4639      	mov	r1, r7
 801792c:	4632      	mov	r2, r6
 801792e:	4620      	mov	r0, r4
 8017930:	f000 fcb6 	bl	80182a0 <__pow5mult>
 8017934:	465a      	mov	r2, fp
 8017936:	4601      	mov	r1, r0
 8017938:	4607      	mov	r7, r0
 801793a:	4620      	mov	r0, r4
 801793c:	f000 fc0a 	bl	8018154 <__multiply>
 8017940:	4659      	mov	r1, fp
 8017942:	9007      	str	r0, [sp, #28]
 8017944:	4620      	mov	r0, r4
 8017946:	f000 fb33 	bl	8017fb0 <_Bfree>
 801794a:	9b07      	ldr	r3, [sp, #28]
 801794c:	469b      	mov	fp, r3
 801794e:	9b06      	ldr	r3, [sp, #24]
 8017950:	1b9a      	subs	r2, r3, r6
 8017952:	d004      	beq.n	801795e <_dtoa_r+0x7ce>
 8017954:	4659      	mov	r1, fp
 8017956:	4620      	mov	r0, r4
 8017958:	f000 fca2 	bl	80182a0 <__pow5mult>
 801795c:	4683      	mov	fp, r0
 801795e:	2101      	movs	r1, #1
 8017960:	4620      	mov	r0, r4
 8017962:	f000 fbe1 	bl	8018128 <__i2b>
 8017966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017968:	2b00      	cmp	r3, #0
 801796a:	4606      	mov	r6, r0
 801796c:	dd7c      	ble.n	8017a68 <_dtoa_r+0x8d8>
 801796e:	461a      	mov	r2, r3
 8017970:	4601      	mov	r1, r0
 8017972:	4620      	mov	r0, r4
 8017974:	f000 fc94 	bl	80182a0 <__pow5mult>
 8017978:	9b05      	ldr	r3, [sp, #20]
 801797a:	2b01      	cmp	r3, #1
 801797c:	4606      	mov	r6, r0
 801797e:	dd76      	ble.n	8017a6e <_dtoa_r+0x8de>
 8017980:	2300      	movs	r3, #0
 8017982:	9306      	str	r3, [sp, #24]
 8017984:	6933      	ldr	r3, [r6, #16]
 8017986:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801798a:	6918      	ldr	r0, [r3, #16]
 801798c:	f000 fb7c 	bl	8018088 <__hi0bits>
 8017990:	f1c0 0020 	rsb	r0, r0, #32
 8017994:	9b04      	ldr	r3, [sp, #16]
 8017996:	4418      	add	r0, r3
 8017998:	f010 001f 	ands.w	r0, r0, #31
 801799c:	f000 8086 	beq.w	8017aac <_dtoa_r+0x91c>
 80179a0:	f1c0 0320 	rsb	r3, r0, #32
 80179a4:	2b04      	cmp	r3, #4
 80179a6:	dd7f      	ble.n	8017aa8 <_dtoa_r+0x918>
 80179a8:	f1c0 001c 	rsb	r0, r0, #28
 80179ac:	9b04      	ldr	r3, [sp, #16]
 80179ae:	4403      	add	r3, r0
 80179b0:	4480      	add	r8, r0
 80179b2:	4405      	add	r5, r0
 80179b4:	9304      	str	r3, [sp, #16]
 80179b6:	f1b8 0f00 	cmp.w	r8, #0
 80179ba:	dd05      	ble.n	80179c8 <_dtoa_r+0x838>
 80179bc:	4659      	mov	r1, fp
 80179be:	4642      	mov	r2, r8
 80179c0:	4620      	mov	r0, r4
 80179c2:	f000 fcc7 	bl	8018354 <__lshift>
 80179c6:	4683      	mov	fp, r0
 80179c8:	9b04      	ldr	r3, [sp, #16]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	dd05      	ble.n	80179da <_dtoa_r+0x84a>
 80179ce:	4631      	mov	r1, r6
 80179d0:	461a      	mov	r2, r3
 80179d2:	4620      	mov	r0, r4
 80179d4:	f000 fcbe 	bl	8018354 <__lshift>
 80179d8:	4606      	mov	r6, r0
 80179da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d069      	beq.n	8017ab4 <_dtoa_r+0x924>
 80179e0:	4631      	mov	r1, r6
 80179e2:	4658      	mov	r0, fp
 80179e4:	f000 fd22 	bl	801842c <__mcmp>
 80179e8:	2800      	cmp	r0, #0
 80179ea:	da63      	bge.n	8017ab4 <_dtoa_r+0x924>
 80179ec:	2300      	movs	r3, #0
 80179ee:	4659      	mov	r1, fp
 80179f0:	220a      	movs	r2, #10
 80179f2:	4620      	mov	r0, r4
 80179f4:	f000 fafe 	bl	8017ff4 <__multadd>
 80179f8:	9b08      	ldr	r3, [sp, #32]
 80179fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80179fe:	4683      	mov	fp, r0
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	f000 818f 	beq.w	8017d24 <_dtoa_r+0xb94>
 8017a06:	4639      	mov	r1, r7
 8017a08:	2300      	movs	r3, #0
 8017a0a:	220a      	movs	r2, #10
 8017a0c:	4620      	mov	r0, r4
 8017a0e:	f000 faf1 	bl	8017ff4 <__multadd>
 8017a12:	f1b9 0f00 	cmp.w	r9, #0
 8017a16:	4607      	mov	r7, r0
 8017a18:	f300 808e 	bgt.w	8017b38 <_dtoa_r+0x9a8>
 8017a1c:	9b05      	ldr	r3, [sp, #20]
 8017a1e:	2b02      	cmp	r3, #2
 8017a20:	dc50      	bgt.n	8017ac4 <_dtoa_r+0x934>
 8017a22:	e089      	b.n	8017b38 <_dtoa_r+0x9a8>
 8017a24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017a26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017a2a:	e75d      	b.n	80178e8 <_dtoa_r+0x758>
 8017a2c:	9b01      	ldr	r3, [sp, #4]
 8017a2e:	1e5e      	subs	r6, r3, #1
 8017a30:	9b06      	ldr	r3, [sp, #24]
 8017a32:	42b3      	cmp	r3, r6
 8017a34:	bfbf      	itttt	lt
 8017a36:	9b06      	ldrlt	r3, [sp, #24]
 8017a38:	9606      	strlt	r6, [sp, #24]
 8017a3a:	1af2      	sublt	r2, r6, r3
 8017a3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8017a3e:	bfb6      	itet	lt
 8017a40:	189b      	addlt	r3, r3, r2
 8017a42:	1b9e      	subge	r6, r3, r6
 8017a44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8017a46:	9b01      	ldr	r3, [sp, #4]
 8017a48:	bfb8      	it	lt
 8017a4a:	2600      	movlt	r6, #0
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	bfb5      	itete	lt
 8017a50:	eba8 0503 	sublt.w	r5, r8, r3
 8017a54:	9b01      	ldrge	r3, [sp, #4]
 8017a56:	2300      	movlt	r3, #0
 8017a58:	4645      	movge	r5, r8
 8017a5a:	e747      	b.n	80178ec <_dtoa_r+0x75c>
 8017a5c:	9e06      	ldr	r6, [sp, #24]
 8017a5e:	9f08      	ldr	r7, [sp, #32]
 8017a60:	4645      	mov	r5, r8
 8017a62:	e74c      	b.n	80178fe <_dtoa_r+0x76e>
 8017a64:	9a06      	ldr	r2, [sp, #24]
 8017a66:	e775      	b.n	8017954 <_dtoa_r+0x7c4>
 8017a68:	9b05      	ldr	r3, [sp, #20]
 8017a6a:	2b01      	cmp	r3, #1
 8017a6c:	dc18      	bgt.n	8017aa0 <_dtoa_r+0x910>
 8017a6e:	9b02      	ldr	r3, [sp, #8]
 8017a70:	b9b3      	cbnz	r3, 8017aa0 <_dtoa_r+0x910>
 8017a72:	9b03      	ldr	r3, [sp, #12]
 8017a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a78:	b9a3      	cbnz	r3, 8017aa4 <_dtoa_r+0x914>
 8017a7a:	9b03      	ldr	r3, [sp, #12]
 8017a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a80:	0d1b      	lsrs	r3, r3, #20
 8017a82:	051b      	lsls	r3, r3, #20
 8017a84:	b12b      	cbz	r3, 8017a92 <_dtoa_r+0x902>
 8017a86:	9b04      	ldr	r3, [sp, #16]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	9304      	str	r3, [sp, #16]
 8017a8c:	f108 0801 	add.w	r8, r8, #1
 8017a90:	2301      	movs	r3, #1
 8017a92:	9306      	str	r3, [sp, #24]
 8017a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	f47f af74 	bne.w	8017984 <_dtoa_r+0x7f4>
 8017a9c:	2001      	movs	r0, #1
 8017a9e:	e779      	b.n	8017994 <_dtoa_r+0x804>
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	e7f6      	b.n	8017a92 <_dtoa_r+0x902>
 8017aa4:	9b02      	ldr	r3, [sp, #8]
 8017aa6:	e7f4      	b.n	8017a92 <_dtoa_r+0x902>
 8017aa8:	d085      	beq.n	80179b6 <_dtoa_r+0x826>
 8017aaa:	4618      	mov	r0, r3
 8017aac:	301c      	adds	r0, #28
 8017aae:	e77d      	b.n	80179ac <_dtoa_r+0x81c>
 8017ab0:	40240000 	.word	0x40240000
 8017ab4:	9b01      	ldr	r3, [sp, #4]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	dc38      	bgt.n	8017b2c <_dtoa_r+0x99c>
 8017aba:	9b05      	ldr	r3, [sp, #20]
 8017abc:	2b02      	cmp	r3, #2
 8017abe:	dd35      	ble.n	8017b2c <_dtoa_r+0x99c>
 8017ac0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017ac4:	f1b9 0f00 	cmp.w	r9, #0
 8017ac8:	d10d      	bne.n	8017ae6 <_dtoa_r+0x956>
 8017aca:	4631      	mov	r1, r6
 8017acc:	464b      	mov	r3, r9
 8017ace:	2205      	movs	r2, #5
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f000 fa8f 	bl	8017ff4 <__multadd>
 8017ad6:	4601      	mov	r1, r0
 8017ad8:	4606      	mov	r6, r0
 8017ada:	4658      	mov	r0, fp
 8017adc:	f000 fca6 	bl	801842c <__mcmp>
 8017ae0:	2800      	cmp	r0, #0
 8017ae2:	f73f adbd 	bgt.w	8017660 <_dtoa_r+0x4d0>
 8017ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ae8:	9d00      	ldr	r5, [sp, #0]
 8017aea:	ea6f 0a03 	mvn.w	sl, r3
 8017aee:	f04f 0800 	mov.w	r8, #0
 8017af2:	4631      	mov	r1, r6
 8017af4:	4620      	mov	r0, r4
 8017af6:	f000 fa5b 	bl	8017fb0 <_Bfree>
 8017afa:	2f00      	cmp	r7, #0
 8017afc:	f43f aeb4 	beq.w	8017868 <_dtoa_r+0x6d8>
 8017b00:	f1b8 0f00 	cmp.w	r8, #0
 8017b04:	d005      	beq.n	8017b12 <_dtoa_r+0x982>
 8017b06:	45b8      	cmp	r8, r7
 8017b08:	d003      	beq.n	8017b12 <_dtoa_r+0x982>
 8017b0a:	4641      	mov	r1, r8
 8017b0c:	4620      	mov	r0, r4
 8017b0e:	f000 fa4f 	bl	8017fb0 <_Bfree>
 8017b12:	4639      	mov	r1, r7
 8017b14:	4620      	mov	r0, r4
 8017b16:	f000 fa4b 	bl	8017fb0 <_Bfree>
 8017b1a:	e6a5      	b.n	8017868 <_dtoa_r+0x6d8>
 8017b1c:	2600      	movs	r6, #0
 8017b1e:	4637      	mov	r7, r6
 8017b20:	e7e1      	b.n	8017ae6 <_dtoa_r+0x956>
 8017b22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017b24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017b28:	4637      	mov	r7, r6
 8017b2a:	e599      	b.n	8017660 <_dtoa_r+0x4d0>
 8017b2c:	9b08      	ldr	r3, [sp, #32]
 8017b2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	f000 80fd 	beq.w	8017d32 <_dtoa_r+0xba2>
 8017b38:	2d00      	cmp	r5, #0
 8017b3a:	dd05      	ble.n	8017b48 <_dtoa_r+0x9b8>
 8017b3c:	4639      	mov	r1, r7
 8017b3e:	462a      	mov	r2, r5
 8017b40:	4620      	mov	r0, r4
 8017b42:	f000 fc07 	bl	8018354 <__lshift>
 8017b46:	4607      	mov	r7, r0
 8017b48:	9b06      	ldr	r3, [sp, #24]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d05c      	beq.n	8017c08 <_dtoa_r+0xa78>
 8017b4e:	6879      	ldr	r1, [r7, #4]
 8017b50:	4620      	mov	r0, r4
 8017b52:	f000 f9ed 	bl	8017f30 <_Balloc>
 8017b56:	4605      	mov	r5, r0
 8017b58:	b928      	cbnz	r0, 8017b66 <_dtoa_r+0x9d6>
 8017b5a:	4b80      	ldr	r3, [pc, #512]	; (8017d5c <_dtoa_r+0xbcc>)
 8017b5c:	4602      	mov	r2, r0
 8017b5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017b62:	f7ff bb2e 	b.w	80171c2 <_dtoa_r+0x32>
 8017b66:	693a      	ldr	r2, [r7, #16]
 8017b68:	3202      	adds	r2, #2
 8017b6a:	0092      	lsls	r2, r2, #2
 8017b6c:	f107 010c 	add.w	r1, r7, #12
 8017b70:	300c      	adds	r0, #12
 8017b72:	f7fe fbfd 	bl	8016370 <memcpy>
 8017b76:	2201      	movs	r2, #1
 8017b78:	4629      	mov	r1, r5
 8017b7a:	4620      	mov	r0, r4
 8017b7c:	f000 fbea 	bl	8018354 <__lshift>
 8017b80:	9b00      	ldr	r3, [sp, #0]
 8017b82:	3301      	adds	r3, #1
 8017b84:	9301      	str	r3, [sp, #4]
 8017b86:	9b00      	ldr	r3, [sp, #0]
 8017b88:	444b      	add	r3, r9
 8017b8a:	9307      	str	r3, [sp, #28]
 8017b8c:	9b02      	ldr	r3, [sp, #8]
 8017b8e:	f003 0301 	and.w	r3, r3, #1
 8017b92:	46b8      	mov	r8, r7
 8017b94:	9306      	str	r3, [sp, #24]
 8017b96:	4607      	mov	r7, r0
 8017b98:	9b01      	ldr	r3, [sp, #4]
 8017b9a:	4631      	mov	r1, r6
 8017b9c:	3b01      	subs	r3, #1
 8017b9e:	4658      	mov	r0, fp
 8017ba0:	9302      	str	r3, [sp, #8]
 8017ba2:	f7ff fa67 	bl	8017074 <quorem>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	3330      	adds	r3, #48	; 0x30
 8017baa:	9004      	str	r0, [sp, #16]
 8017bac:	4641      	mov	r1, r8
 8017bae:	4658      	mov	r0, fp
 8017bb0:	9308      	str	r3, [sp, #32]
 8017bb2:	f000 fc3b 	bl	801842c <__mcmp>
 8017bb6:	463a      	mov	r2, r7
 8017bb8:	4681      	mov	r9, r0
 8017bba:	4631      	mov	r1, r6
 8017bbc:	4620      	mov	r0, r4
 8017bbe:	f000 fc51 	bl	8018464 <__mdiff>
 8017bc2:	68c2      	ldr	r2, [r0, #12]
 8017bc4:	9b08      	ldr	r3, [sp, #32]
 8017bc6:	4605      	mov	r5, r0
 8017bc8:	bb02      	cbnz	r2, 8017c0c <_dtoa_r+0xa7c>
 8017bca:	4601      	mov	r1, r0
 8017bcc:	4658      	mov	r0, fp
 8017bce:	f000 fc2d 	bl	801842c <__mcmp>
 8017bd2:	9b08      	ldr	r3, [sp, #32]
 8017bd4:	4602      	mov	r2, r0
 8017bd6:	4629      	mov	r1, r5
 8017bd8:	4620      	mov	r0, r4
 8017bda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017bde:	f000 f9e7 	bl	8017fb0 <_Bfree>
 8017be2:	9b05      	ldr	r3, [sp, #20]
 8017be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017be6:	9d01      	ldr	r5, [sp, #4]
 8017be8:	ea43 0102 	orr.w	r1, r3, r2
 8017bec:	9b06      	ldr	r3, [sp, #24]
 8017bee:	430b      	orrs	r3, r1
 8017bf0:	9b08      	ldr	r3, [sp, #32]
 8017bf2:	d10d      	bne.n	8017c10 <_dtoa_r+0xa80>
 8017bf4:	2b39      	cmp	r3, #57	; 0x39
 8017bf6:	d029      	beq.n	8017c4c <_dtoa_r+0xabc>
 8017bf8:	f1b9 0f00 	cmp.w	r9, #0
 8017bfc:	dd01      	ble.n	8017c02 <_dtoa_r+0xa72>
 8017bfe:	9b04      	ldr	r3, [sp, #16]
 8017c00:	3331      	adds	r3, #49	; 0x31
 8017c02:	9a02      	ldr	r2, [sp, #8]
 8017c04:	7013      	strb	r3, [r2, #0]
 8017c06:	e774      	b.n	8017af2 <_dtoa_r+0x962>
 8017c08:	4638      	mov	r0, r7
 8017c0a:	e7b9      	b.n	8017b80 <_dtoa_r+0x9f0>
 8017c0c:	2201      	movs	r2, #1
 8017c0e:	e7e2      	b.n	8017bd6 <_dtoa_r+0xa46>
 8017c10:	f1b9 0f00 	cmp.w	r9, #0
 8017c14:	db06      	blt.n	8017c24 <_dtoa_r+0xa94>
 8017c16:	9905      	ldr	r1, [sp, #20]
 8017c18:	ea41 0909 	orr.w	r9, r1, r9
 8017c1c:	9906      	ldr	r1, [sp, #24]
 8017c1e:	ea59 0101 	orrs.w	r1, r9, r1
 8017c22:	d120      	bne.n	8017c66 <_dtoa_r+0xad6>
 8017c24:	2a00      	cmp	r2, #0
 8017c26:	ddec      	ble.n	8017c02 <_dtoa_r+0xa72>
 8017c28:	4659      	mov	r1, fp
 8017c2a:	2201      	movs	r2, #1
 8017c2c:	4620      	mov	r0, r4
 8017c2e:	9301      	str	r3, [sp, #4]
 8017c30:	f000 fb90 	bl	8018354 <__lshift>
 8017c34:	4631      	mov	r1, r6
 8017c36:	4683      	mov	fp, r0
 8017c38:	f000 fbf8 	bl	801842c <__mcmp>
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	9b01      	ldr	r3, [sp, #4]
 8017c40:	dc02      	bgt.n	8017c48 <_dtoa_r+0xab8>
 8017c42:	d1de      	bne.n	8017c02 <_dtoa_r+0xa72>
 8017c44:	07da      	lsls	r2, r3, #31
 8017c46:	d5dc      	bpl.n	8017c02 <_dtoa_r+0xa72>
 8017c48:	2b39      	cmp	r3, #57	; 0x39
 8017c4a:	d1d8      	bne.n	8017bfe <_dtoa_r+0xa6e>
 8017c4c:	9a02      	ldr	r2, [sp, #8]
 8017c4e:	2339      	movs	r3, #57	; 0x39
 8017c50:	7013      	strb	r3, [r2, #0]
 8017c52:	462b      	mov	r3, r5
 8017c54:	461d      	mov	r5, r3
 8017c56:	3b01      	subs	r3, #1
 8017c58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017c5c:	2a39      	cmp	r2, #57	; 0x39
 8017c5e:	d050      	beq.n	8017d02 <_dtoa_r+0xb72>
 8017c60:	3201      	adds	r2, #1
 8017c62:	701a      	strb	r2, [r3, #0]
 8017c64:	e745      	b.n	8017af2 <_dtoa_r+0x962>
 8017c66:	2a00      	cmp	r2, #0
 8017c68:	dd03      	ble.n	8017c72 <_dtoa_r+0xae2>
 8017c6a:	2b39      	cmp	r3, #57	; 0x39
 8017c6c:	d0ee      	beq.n	8017c4c <_dtoa_r+0xabc>
 8017c6e:	3301      	adds	r3, #1
 8017c70:	e7c7      	b.n	8017c02 <_dtoa_r+0xa72>
 8017c72:	9a01      	ldr	r2, [sp, #4]
 8017c74:	9907      	ldr	r1, [sp, #28]
 8017c76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017c7a:	428a      	cmp	r2, r1
 8017c7c:	d02a      	beq.n	8017cd4 <_dtoa_r+0xb44>
 8017c7e:	4659      	mov	r1, fp
 8017c80:	2300      	movs	r3, #0
 8017c82:	220a      	movs	r2, #10
 8017c84:	4620      	mov	r0, r4
 8017c86:	f000 f9b5 	bl	8017ff4 <__multadd>
 8017c8a:	45b8      	cmp	r8, r7
 8017c8c:	4683      	mov	fp, r0
 8017c8e:	f04f 0300 	mov.w	r3, #0
 8017c92:	f04f 020a 	mov.w	r2, #10
 8017c96:	4641      	mov	r1, r8
 8017c98:	4620      	mov	r0, r4
 8017c9a:	d107      	bne.n	8017cac <_dtoa_r+0xb1c>
 8017c9c:	f000 f9aa 	bl	8017ff4 <__multadd>
 8017ca0:	4680      	mov	r8, r0
 8017ca2:	4607      	mov	r7, r0
 8017ca4:	9b01      	ldr	r3, [sp, #4]
 8017ca6:	3301      	adds	r3, #1
 8017ca8:	9301      	str	r3, [sp, #4]
 8017caa:	e775      	b.n	8017b98 <_dtoa_r+0xa08>
 8017cac:	f000 f9a2 	bl	8017ff4 <__multadd>
 8017cb0:	4639      	mov	r1, r7
 8017cb2:	4680      	mov	r8, r0
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	220a      	movs	r2, #10
 8017cb8:	4620      	mov	r0, r4
 8017cba:	f000 f99b 	bl	8017ff4 <__multadd>
 8017cbe:	4607      	mov	r7, r0
 8017cc0:	e7f0      	b.n	8017ca4 <_dtoa_r+0xb14>
 8017cc2:	f1b9 0f00 	cmp.w	r9, #0
 8017cc6:	9a00      	ldr	r2, [sp, #0]
 8017cc8:	bfcc      	ite	gt
 8017cca:	464d      	movgt	r5, r9
 8017ccc:	2501      	movle	r5, #1
 8017cce:	4415      	add	r5, r2
 8017cd0:	f04f 0800 	mov.w	r8, #0
 8017cd4:	4659      	mov	r1, fp
 8017cd6:	2201      	movs	r2, #1
 8017cd8:	4620      	mov	r0, r4
 8017cda:	9301      	str	r3, [sp, #4]
 8017cdc:	f000 fb3a 	bl	8018354 <__lshift>
 8017ce0:	4631      	mov	r1, r6
 8017ce2:	4683      	mov	fp, r0
 8017ce4:	f000 fba2 	bl	801842c <__mcmp>
 8017ce8:	2800      	cmp	r0, #0
 8017cea:	dcb2      	bgt.n	8017c52 <_dtoa_r+0xac2>
 8017cec:	d102      	bne.n	8017cf4 <_dtoa_r+0xb64>
 8017cee:	9b01      	ldr	r3, [sp, #4]
 8017cf0:	07db      	lsls	r3, r3, #31
 8017cf2:	d4ae      	bmi.n	8017c52 <_dtoa_r+0xac2>
 8017cf4:	462b      	mov	r3, r5
 8017cf6:	461d      	mov	r5, r3
 8017cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017cfc:	2a30      	cmp	r2, #48	; 0x30
 8017cfe:	d0fa      	beq.n	8017cf6 <_dtoa_r+0xb66>
 8017d00:	e6f7      	b.n	8017af2 <_dtoa_r+0x962>
 8017d02:	9a00      	ldr	r2, [sp, #0]
 8017d04:	429a      	cmp	r2, r3
 8017d06:	d1a5      	bne.n	8017c54 <_dtoa_r+0xac4>
 8017d08:	f10a 0a01 	add.w	sl, sl, #1
 8017d0c:	2331      	movs	r3, #49	; 0x31
 8017d0e:	e779      	b.n	8017c04 <_dtoa_r+0xa74>
 8017d10:	4b13      	ldr	r3, [pc, #76]	; (8017d60 <_dtoa_r+0xbd0>)
 8017d12:	f7ff baaf 	b.w	8017274 <_dtoa_r+0xe4>
 8017d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	f47f aa86 	bne.w	801722a <_dtoa_r+0x9a>
 8017d1e:	4b11      	ldr	r3, [pc, #68]	; (8017d64 <_dtoa_r+0xbd4>)
 8017d20:	f7ff baa8 	b.w	8017274 <_dtoa_r+0xe4>
 8017d24:	f1b9 0f00 	cmp.w	r9, #0
 8017d28:	dc03      	bgt.n	8017d32 <_dtoa_r+0xba2>
 8017d2a:	9b05      	ldr	r3, [sp, #20]
 8017d2c:	2b02      	cmp	r3, #2
 8017d2e:	f73f aec9 	bgt.w	8017ac4 <_dtoa_r+0x934>
 8017d32:	9d00      	ldr	r5, [sp, #0]
 8017d34:	4631      	mov	r1, r6
 8017d36:	4658      	mov	r0, fp
 8017d38:	f7ff f99c 	bl	8017074 <quorem>
 8017d3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017d40:	f805 3b01 	strb.w	r3, [r5], #1
 8017d44:	9a00      	ldr	r2, [sp, #0]
 8017d46:	1aaa      	subs	r2, r5, r2
 8017d48:	4591      	cmp	r9, r2
 8017d4a:	ddba      	ble.n	8017cc2 <_dtoa_r+0xb32>
 8017d4c:	4659      	mov	r1, fp
 8017d4e:	2300      	movs	r3, #0
 8017d50:	220a      	movs	r2, #10
 8017d52:	4620      	mov	r0, r4
 8017d54:	f000 f94e 	bl	8017ff4 <__multadd>
 8017d58:	4683      	mov	fp, r0
 8017d5a:	e7eb      	b.n	8017d34 <_dtoa_r+0xba4>
 8017d5c:	0801a088 	.word	0x0801a088
 8017d60:	08019fbc 	.word	0x08019fbc
 8017d64:	0801a005 	.word	0x0801a005

08017d68 <__sflush_r>:
 8017d68:	898a      	ldrh	r2, [r1, #12]
 8017d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d6e:	4605      	mov	r5, r0
 8017d70:	0710      	lsls	r0, r2, #28
 8017d72:	460c      	mov	r4, r1
 8017d74:	d458      	bmi.n	8017e28 <__sflush_r+0xc0>
 8017d76:	684b      	ldr	r3, [r1, #4]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	dc05      	bgt.n	8017d88 <__sflush_r+0x20>
 8017d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	dc02      	bgt.n	8017d88 <__sflush_r+0x20>
 8017d82:	2000      	movs	r0, #0
 8017d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d8a:	2e00      	cmp	r6, #0
 8017d8c:	d0f9      	beq.n	8017d82 <__sflush_r+0x1a>
 8017d8e:	2300      	movs	r3, #0
 8017d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017d94:	682f      	ldr	r7, [r5, #0]
 8017d96:	602b      	str	r3, [r5, #0]
 8017d98:	d032      	beq.n	8017e00 <__sflush_r+0x98>
 8017d9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d9c:	89a3      	ldrh	r3, [r4, #12]
 8017d9e:	075a      	lsls	r2, r3, #29
 8017da0:	d505      	bpl.n	8017dae <__sflush_r+0x46>
 8017da2:	6863      	ldr	r3, [r4, #4]
 8017da4:	1ac0      	subs	r0, r0, r3
 8017da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017da8:	b10b      	cbz	r3, 8017dae <__sflush_r+0x46>
 8017daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017dac:	1ac0      	subs	r0, r0, r3
 8017dae:	2300      	movs	r3, #0
 8017db0:	4602      	mov	r2, r0
 8017db2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017db4:	6a21      	ldr	r1, [r4, #32]
 8017db6:	4628      	mov	r0, r5
 8017db8:	47b0      	blx	r6
 8017dba:	1c43      	adds	r3, r0, #1
 8017dbc:	89a3      	ldrh	r3, [r4, #12]
 8017dbe:	d106      	bne.n	8017dce <__sflush_r+0x66>
 8017dc0:	6829      	ldr	r1, [r5, #0]
 8017dc2:	291d      	cmp	r1, #29
 8017dc4:	d82c      	bhi.n	8017e20 <__sflush_r+0xb8>
 8017dc6:	4a2a      	ldr	r2, [pc, #168]	; (8017e70 <__sflush_r+0x108>)
 8017dc8:	40ca      	lsrs	r2, r1
 8017dca:	07d6      	lsls	r6, r2, #31
 8017dcc:	d528      	bpl.n	8017e20 <__sflush_r+0xb8>
 8017dce:	2200      	movs	r2, #0
 8017dd0:	6062      	str	r2, [r4, #4]
 8017dd2:	04d9      	lsls	r1, r3, #19
 8017dd4:	6922      	ldr	r2, [r4, #16]
 8017dd6:	6022      	str	r2, [r4, #0]
 8017dd8:	d504      	bpl.n	8017de4 <__sflush_r+0x7c>
 8017dda:	1c42      	adds	r2, r0, #1
 8017ddc:	d101      	bne.n	8017de2 <__sflush_r+0x7a>
 8017dde:	682b      	ldr	r3, [r5, #0]
 8017de0:	b903      	cbnz	r3, 8017de4 <__sflush_r+0x7c>
 8017de2:	6560      	str	r0, [r4, #84]	; 0x54
 8017de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017de6:	602f      	str	r7, [r5, #0]
 8017de8:	2900      	cmp	r1, #0
 8017dea:	d0ca      	beq.n	8017d82 <__sflush_r+0x1a>
 8017dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017df0:	4299      	cmp	r1, r3
 8017df2:	d002      	beq.n	8017dfa <__sflush_r+0x92>
 8017df4:	4628      	mov	r0, r5
 8017df6:	f7fe fad1 	bl	801639c <_free_r>
 8017dfa:	2000      	movs	r0, #0
 8017dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8017dfe:	e7c1      	b.n	8017d84 <__sflush_r+0x1c>
 8017e00:	6a21      	ldr	r1, [r4, #32]
 8017e02:	2301      	movs	r3, #1
 8017e04:	4628      	mov	r0, r5
 8017e06:	47b0      	blx	r6
 8017e08:	1c41      	adds	r1, r0, #1
 8017e0a:	d1c7      	bne.n	8017d9c <__sflush_r+0x34>
 8017e0c:	682b      	ldr	r3, [r5, #0]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d0c4      	beq.n	8017d9c <__sflush_r+0x34>
 8017e12:	2b1d      	cmp	r3, #29
 8017e14:	d001      	beq.n	8017e1a <__sflush_r+0xb2>
 8017e16:	2b16      	cmp	r3, #22
 8017e18:	d101      	bne.n	8017e1e <__sflush_r+0xb6>
 8017e1a:	602f      	str	r7, [r5, #0]
 8017e1c:	e7b1      	b.n	8017d82 <__sflush_r+0x1a>
 8017e1e:	89a3      	ldrh	r3, [r4, #12]
 8017e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e24:	81a3      	strh	r3, [r4, #12]
 8017e26:	e7ad      	b.n	8017d84 <__sflush_r+0x1c>
 8017e28:	690f      	ldr	r7, [r1, #16]
 8017e2a:	2f00      	cmp	r7, #0
 8017e2c:	d0a9      	beq.n	8017d82 <__sflush_r+0x1a>
 8017e2e:	0793      	lsls	r3, r2, #30
 8017e30:	680e      	ldr	r6, [r1, #0]
 8017e32:	bf08      	it	eq
 8017e34:	694b      	ldreq	r3, [r1, #20]
 8017e36:	600f      	str	r7, [r1, #0]
 8017e38:	bf18      	it	ne
 8017e3a:	2300      	movne	r3, #0
 8017e3c:	eba6 0807 	sub.w	r8, r6, r7
 8017e40:	608b      	str	r3, [r1, #8]
 8017e42:	f1b8 0f00 	cmp.w	r8, #0
 8017e46:	dd9c      	ble.n	8017d82 <__sflush_r+0x1a>
 8017e48:	6a21      	ldr	r1, [r4, #32]
 8017e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e4c:	4643      	mov	r3, r8
 8017e4e:	463a      	mov	r2, r7
 8017e50:	4628      	mov	r0, r5
 8017e52:	47b0      	blx	r6
 8017e54:	2800      	cmp	r0, #0
 8017e56:	dc06      	bgt.n	8017e66 <__sflush_r+0xfe>
 8017e58:	89a3      	ldrh	r3, [r4, #12]
 8017e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e5e:	81a3      	strh	r3, [r4, #12]
 8017e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e64:	e78e      	b.n	8017d84 <__sflush_r+0x1c>
 8017e66:	4407      	add	r7, r0
 8017e68:	eba8 0800 	sub.w	r8, r8, r0
 8017e6c:	e7e9      	b.n	8017e42 <__sflush_r+0xda>
 8017e6e:	bf00      	nop
 8017e70:	20400001 	.word	0x20400001

08017e74 <_fflush_r>:
 8017e74:	b538      	push	{r3, r4, r5, lr}
 8017e76:	690b      	ldr	r3, [r1, #16]
 8017e78:	4605      	mov	r5, r0
 8017e7a:	460c      	mov	r4, r1
 8017e7c:	b913      	cbnz	r3, 8017e84 <_fflush_r+0x10>
 8017e7e:	2500      	movs	r5, #0
 8017e80:	4628      	mov	r0, r5
 8017e82:	bd38      	pop	{r3, r4, r5, pc}
 8017e84:	b118      	cbz	r0, 8017e8e <_fflush_r+0x1a>
 8017e86:	6983      	ldr	r3, [r0, #24]
 8017e88:	b90b      	cbnz	r3, 8017e8e <_fflush_r+0x1a>
 8017e8a:	f7fe f981 	bl	8016190 <__sinit>
 8017e8e:	4b14      	ldr	r3, [pc, #80]	; (8017ee0 <_fflush_r+0x6c>)
 8017e90:	429c      	cmp	r4, r3
 8017e92:	d11b      	bne.n	8017ecc <_fflush_r+0x58>
 8017e94:	686c      	ldr	r4, [r5, #4]
 8017e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d0ef      	beq.n	8017e7e <_fflush_r+0xa>
 8017e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017ea0:	07d0      	lsls	r0, r2, #31
 8017ea2:	d404      	bmi.n	8017eae <_fflush_r+0x3a>
 8017ea4:	0599      	lsls	r1, r3, #22
 8017ea6:	d402      	bmi.n	8017eae <_fflush_r+0x3a>
 8017ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017eaa:	f7fe fa4e 	bl	801634a <__retarget_lock_acquire_recursive>
 8017eae:	4628      	mov	r0, r5
 8017eb0:	4621      	mov	r1, r4
 8017eb2:	f7ff ff59 	bl	8017d68 <__sflush_r>
 8017eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017eb8:	07da      	lsls	r2, r3, #31
 8017eba:	4605      	mov	r5, r0
 8017ebc:	d4e0      	bmi.n	8017e80 <_fflush_r+0xc>
 8017ebe:	89a3      	ldrh	r3, [r4, #12]
 8017ec0:	059b      	lsls	r3, r3, #22
 8017ec2:	d4dd      	bmi.n	8017e80 <_fflush_r+0xc>
 8017ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ec6:	f7fe fa41 	bl	801634c <__retarget_lock_release_recursive>
 8017eca:	e7d9      	b.n	8017e80 <_fflush_r+0xc>
 8017ecc:	4b05      	ldr	r3, [pc, #20]	; (8017ee4 <_fflush_r+0x70>)
 8017ece:	429c      	cmp	r4, r3
 8017ed0:	d101      	bne.n	8017ed6 <_fflush_r+0x62>
 8017ed2:	68ac      	ldr	r4, [r5, #8]
 8017ed4:	e7df      	b.n	8017e96 <_fflush_r+0x22>
 8017ed6:	4b04      	ldr	r3, [pc, #16]	; (8017ee8 <_fflush_r+0x74>)
 8017ed8:	429c      	cmp	r4, r3
 8017eda:	bf08      	it	eq
 8017edc:	68ec      	ldreq	r4, [r5, #12]
 8017ede:	e7da      	b.n	8017e96 <_fflush_r+0x22>
 8017ee0:	08019f68 	.word	0x08019f68
 8017ee4:	08019f88 	.word	0x08019f88
 8017ee8:	08019f48 	.word	0x08019f48

08017eec <_localeconv_r>:
 8017eec:	4800      	ldr	r0, [pc, #0]	; (8017ef0 <_localeconv_r+0x4>)
 8017eee:	4770      	bx	lr
 8017ef0:	200002f4 	.word	0x200002f4

08017ef4 <_lseek_r>:
 8017ef4:	b538      	push	{r3, r4, r5, lr}
 8017ef6:	4d07      	ldr	r5, [pc, #28]	; (8017f14 <_lseek_r+0x20>)
 8017ef8:	4604      	mov	r4, r0
 8017efa:	4608      	mov	r0, r1
 8017efc:	4611      	mov	r1, r2
 8017efe:	2200      	movs	r2, #0
 8017f00:	602a      	str	r2, [r5, #0]
 8017f02:	461a      	mov	r2, r3
 8017f04:	f7ed f8a8 	bl	8005058 <_lseek>
 8017f08:	1c43      	adds	r3, r0, #1
 8017f0a:	d102      	bne.n	8017f12 <_lseek_r+0x1e>
 8017f0c:	682b      	ldr	r3, [r5, #0]
 8017f0e:	b103      	cbz	r3, 8017f12 <_lseek_r+0x1e>
 8017f10:	6023      	str	r3, [r4, #0]
 8017f12:	bd38      	pop	{r3, r4, r5, pc}
 8017f14:	20016cbc 	.word	0x20016cbc

08017f18 <__malloc_lock>:
 8017f18:	4801      	ldr	r0, [pc, #4]	; (8017f20 <__malloc_lock+0x8>)
 8017f1a:	f7fe ba16 	b.w	801634a <__retarget_lock_acquire_recursive>
 8017f1e:	bf00      	nop
 8017f20:	20016cb4 	.word	0x20016cb4

08017f24 <__malloc_unlock>:
 8017f24:	4801      	ldr	r0, [pc, #4]	; (8017f2c <__malloc_unlock+0x8>)
 8017f26:	f7fe ba11 	b.w	801634c <__retarget_lock_release_recursive>
 8017f2a:	bf00      	nop
 8017f2c:	20016cb4 	.word	0x20016cb4

08017f30 <_Balloc>:
 8017f30:	b570      	push	{r4, r5, r6, lr}
 8017f32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017f34:	4604      	mov	r4, r0
 8017f36:	460d      	mov	r5, r1
 8017f38:	b976      	cbnz	r6, 8017f58 <_Balloc+0x28>
 8017f3a:	2010      	movs	r0, #16
 8017f3c:	f7fe fa08 	bl	8016350 <malloc>
 8017f40:	4602      	mov	r2, r0
 8017f42:	6260      	str	r0, [r4, #36]	; 0x24
 8017f44:	b920      	cbnz	r0, 8017f50 <_Balloc+0x20>
 8017f46:	4b18      	ldr	r3, [pc, #96]	; (8017fa8 <_Balloc+0x78>)
 8017f48:	4818      	ldr	r0, [pc, #96]	; (8017fac <_Balloc+0x7c>)
 8017f4a:	2166      	movs	r1, #102	; 0x66
 8017f4c:	f000 fcea 	bl	8018924 <__assert_func>
 8017f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f54:	6006      	str	r6, [r0, #0]
 8017f56:	60c6      	str	r6, [r0, #12]
 8017f58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017f5a:	68f3      	ldr	r3, [r6, #12]
 8017f5c:	b183      	cbz	r3, 8017f80 <_Balloc+0x50>
 8017f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f60:	68db      	ldr	r3, [r3, #12]
 8017f62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017f66:	b9b8      	cbnz	r0, 8017f98 <_Balloc+0x68>
 8017f68:	2101      	movs	r1, #1
 8017f6a:	fa01 f605 	lsl.w	r6, r1, r5
 8017f6e:	1d72      	adds	r2, r6, #5
 8017f70:	0092      	lsls	r2, r2, #2
 8017f72:	4620      	mov	r0, r4
 8017f74:	f000 fb5a 	bl	801862c <_calloc_r>
 8017f78:	b160      	cbz	r0, 8017f94 <_Balloc+0x64>
 8017f7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017f7e:	e00e      	b.n	8017f9e <_Balloc+0x6e>
 8017f80:	2221      	movs	r2, #33	; 0x21
 8017f82:	2104      	movs	r1, #4
 8017f84:	4620      	mov	r0, r4
 8017f86:	f000 fb51 	bl	801862c <_calloc_r>
 8017f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f8c:	60f0      	str	r0, [r6, #12]
 8017f8e:	68db      	ldr	r3, [r3, #12]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d1e4      	bne.n	8017f5e <_Balloc+0x2e>
 8017f94:	2000      	movs	r0, #0
 8017f96:	bd70      	pop	{r4, r5, r6, pc}
 8017f98:	6802      	ldr	r2, [r0, #0]
 8017f9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017fa4:	e7f7      	b.n	8017f96 <_Balloc+0x66>
 8017fa6:	bf00      	nop
 8017fa8:	0801a012 	.word	0x0801a012
 8017fac:	0801a099 	.word	0x0801a099

08017fb0 <_Bfree>:
 8017fb0:	b570      	push	{r4, r5, r6, lr}
 8017fb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017fb4:	4605      	mov	r5, r0
 8017fb6:	460c      	mov	r4, r1
 8017fb8:	b976      	cbnz	r6, 8017fd8 <_Bfree+0x28>
 8017fba:	2010      	movs	r0, #16
 8017fbc:	f7fe f9c8 	bl	8016350 <malloc>
 8017fc0:	4602      	mov	r2, r0
 8017fc2:	6268      	str	r0, [r5, #36]	; 0x24
 8017fc4:	b920      	cbnz	r0, 8017fd0 <_Bfree+0x20>
 8017fc6:	4b09      	ldr	r3, [pc, #36]	; (8017fec <_Bfree+0x3c>)
 8017fc8:	4809      	ldr	r0, [pc, #36]	; (8017ff0 <_Bfree+0x40>)
 8017fca:	218a      	movs	r1, #138	; 0x8a
 8017fcc:	f000 fcaa 	bl	8018924 <__assert_func>
 8017fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017fd4:	6006      	str	r6, [r0, #0]
 8017fd6:	60c6      	str	r6, [r0, #12]
 8017fd8:	b13c      	cbz	r4, 8017fea <_Bfree+0x3a>
 8017fda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017fdc:	6862      	ldr	r2, [r4, #4]
 8017fde:	68db      	ldr	r3, [r3, #12]
 8017fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017fe4:	6021      	str	r1, [r4, #0]
 8017fe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017fea:	bd70      	pop	{r4, r5, r6, pc}
 8017fec:	0801a012 	.word	0x0801a012
 8017ff0:	0801a099 	.word	0x0801a099

08017ff4 <__multadd>:
 8017ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ff8:	690e      	ldr	r6, [r1, #16]
 8017ffa:	4607      	mov	r7, r0
 8017ffc:	4698      	mov	r8, r3
 8017ffe:	460c      	mov	r4, r1
 8018000:	f101 0014 	add.w	r0, r1, #20
 8018004:	2300      	movs	r3, #0
 8018006:	6805      	ldr	r5, [r0, #0]
 8018008:	b2a9      	uxth	r1, r5
 801800a:	fb02 8101 	mla	r1, r2, r1, r8
 801800e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018012:	0c2d      	lsrs	r5, r5, #16
 8018014:	fb02 c505 	mla	r5, r2, r5, ip
 8018018:	b289      	uxth	r1, r1
 801801a:	3301      	adds	r3, #1
 801801c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018020:	429e      	cmp	r6, r3
 8018022:	f840 1b04 	str.w	r1, [r0], #4
 8018026:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801802a:	dcec      	bgt.n	8018006 <__multadd+0x12>
 801802c:	f1b8 0f00 	cmp.w	r8, #0
 8018030:	d022      	beq.n	8018078 <__multadd+0x84>
 8018032:	68a3      	ldr	r3, [r4, #8]
 8018034:	42b3      	cmp	r3, r6
 8018036:	dc19      	bgt.n	801806c <__multadd+0x78>
 8018038:	6861      	ldr	r1, [r4, #4]
 801803a:	4638      	mov	r0, r7
 801803c:	3101      	adds	r1, #1
 801803e:	f7ff ff77 	bl	8017f30 <_Balloc>
 8018042:	4605      	mov	r5, r0
 8018044:	b928      	cbnz	r0, 8018052 <__multadd+0x5e>
 8018046:	4602      	mov	r2, r0
 8018048:	4b0d      	ldr	r3, [pc, #52]	; (8018080 <__multadd+0x8c>)
 801804a:	480e      	ldr	r0, [pc, #56]	; (8018084 <__multadd+0x90>)
 801804c:	21b5      	movs	r1, #181	; 0xb5
 801804e:	f000 fc69 	bl	8018924 <__assert_func>
 8018052:	6922      	ldr	r2, [r4, #16]
 8018054:	3202      	adds	r2, #2
 8018056:	f104 010c 	add.w	r1, r4, #12
 801805a:	0092      	lsls	r2, r2, #2
 801805c:	300c      	adds	r0, #12
 801805e:	f7fe f987 	bl	8016370 <memcpy>
 8018062:	4621      	mov	r1, r4
 8018064:	4638      	mov	r0, r7
 8018066:	f7ff ffa3 	bl	8017fb0 <_Bfree>
 801806a:	462c      	mov	r4, r5
 801806c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018070:	3601      	adds	r6, #1
 8018072:	f8c3 8014 	str.w	r8, [r3, #20]
 8018076:	6126      	str	r6, [r4, #16]
 8018078:	4620      	mov	r0, r4
 801807a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801807e:	bf00      	nop
 8018080:	0801a088 	.word	0x0801a088
 8018084:	0801a099 	.word	0x0801a099

08018088 <__hi0bits>:
 8018088:	0c03      	lsrs	r3, r0, #16
 801808a:	041b      	lsls	r3, r3, #16
 801808c:	b9d3      	cbnz	r3, 80180c4 <__hi0bits+0x3c>
 801808e:	0400      	lsls	r0, r0, #16
 8018090:	2310      	movs	r3, #16
 8018092:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018096:	bf04      	itt	eq
 8018098:	0200      	lsleq	r0, r0, #8
 801809a:	3308      	addeq	r3, #8
 801809c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80180a0:	bf04      	itt	eq
 80180a2:	0100      	lsleq	r0, r0, #4
 80180a4:	3304      	addeq	r3, #4
 80180a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80180aa:	bf04      	itt	eq
 80180ac:	0080      	lsleq	r0, r0, #2
 80180ae:	3302      	addeq	r3, #2
 80180b0:	2800      	cmp	r0, #0
 80180b2:	db05      	blt.n	80180c0 <__hi0bits+0x38>
 80180b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80180b8:	f103 0301 	add.w	r3, r3, #1
 80180bc:	bf08      	it	eq
 80180be:	2320      	moveq	r3, #32
 80180c0:	4618      	mov	r0, r3
 80180c2:	4770      	bx	lr
 80180c4:	2300      	movs	r3, #0
 80180c6:	e7e4      	b.n	8018092 <__hi0bits+0xa>

080180c8 <__lo0bits>:
 80180c8:	6803      	ldr	r3, [r0, #0]
 80180ca:	f013 0207 	ands.w	r2, r3, #7
 80180ce:	4601      	mov	r1, r0
 80180d0:	d00b      	beq.n	80180ea <__lo0bits+0x22>
 80180d2:	07da      	lsls	r2, r3, #31
 80180d4:	d424      	bmi.n	8018120 <__lo0bits+0x58>
 80180d6:	0798      	lsls	r0, r3, #30
 80180d8:	bf49      	itett	mi
 80180da:	085b      	lsrmi	r3, r3, #1
 80180dc:	089b      	lsrpl	r3, r3, #2
 80180de:	2001      	movmi	r0, #1
 80180e0:	600b      	strmi	r3, [r1, #0]
 80180e2:	bf5c      	itt	pl
 80180e4:	600b      	strpl	r3, [r1, #0]
 80180e6:	2002      	movpl	r0, #2
 80180e8:	4770      	bx	lr
 80180ea:	b298      	uxth	r0, r3
 80180ec:	b9b0      	cbnz	r0, 801811c <__lo0bits+0x54>
 80180ee:	0c1b      	lsrs	r3, r3, #16
 80180f0:	2010      	movs	r0, #16
 80180f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80180f6:	bf04      	itt	eq
 80180f8:	0a1b      	lsreq	r3, r3, #8
 80180fa:	3008      	addeq	r0, #8
 80180fc:	071a      	lsls	r2, r3, #28
 80180fe:	bf04      	itt	eq
 8018100:	091b      	lsreq	r3, r3, #4
 8018102:	3004      	addeq	r0, #4
 8018104:	079a      	lsls	r2, r3, #30
 8018106:	bf04      	itt	eq
 8018108:	089b      	lsreq	r3, r3, #2
 801810a:	3002      	addeq	r0, #2
 801810c:	07da      	lsls	r2, r3, #31
 801810e:	d403      	bmi.n	8018118 <__lo0bits+0x50>
 8018110:	085b      	lsrs	r3, r3, #1
 8018112:	f100 0001 	add.w	r0, r0, #1
 8018116:	d005      	beq.n	8018124 <__lo0bits+0x5c>
 8018118:	600b      	str	r3, [r1, #0]
 801811a:	4770      	bx	lr
 801811c:	4610      	mov	r0, r2
 801811e:	e7e8      	b.n	80180f2 <__lo0bits+0x2a>
 8018120:	2000      	movs	r0, #0
 8018122:	4770      	bx	lr
 8018124:	2020      	movs	r0, #32
 8018126:	4770      	bx	lr

08018128 <__i2b>:
 8018128:	b510      	push	{r4, lr}
 801812a:	460c      	mov	r4, r1
 801812c:	2101      	movs	r1, #1
 801812e:	f7ff feff 	bl	8017f30 <_Balloc>
 8018132:	4602      	mov	r2, r0
 8018134:	b928      	cbnz	r0, 8018142 <__i2b+0x1a>
 8018136:	4b05      	ldr	r3, [pc, #20]	; (801814c <__i2b+0x24>)
 8018138:	4805      	ldr	r0, [pc, #20]	; (8018150 <__i2b+0x28>)
 801813a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801813e:	f000 fbf1 	bl	8018924 <__assert_func>
 8018142:	2301      	movs	r3, #1
 8018144:	6144      	str	r4, [r0, #20]
 8018146:	6103      	str	r3, [r0, #16]
 8018148:	bd10      	pop	{r4, pc}
 801814a:	bf00      	nop
 801814c:	0801a088 	.word	0x0801a088
 8018150:	0801a099 	.word	0x0801a099

08018154 <__multiply>:
 8018154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018158:	4614      	mov	r4, r2
 801815a:	690a      	ldr	r2, [r1, #16]
 801815c:	6923      	ldr	r3, [r4, #16]
 801815e:	429a      	cmp	r2, r3
 8018160:	bfb8      	it	lt
 8018162:	460b      	movlt	r3, r1
 8018164:	460d      	mov	r5, r1
 8018166:	bfbc      	itt	lt
 8018168:	4625      	movlt	r5, r4
 801816a:	461c      	movlt	r4, r3
 801816c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018170:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018174:	68ab      	ldr	r3, [r5, #8]
 8018176:	6869      	ldr	r1, [r5, #4]
 8018178:	eb0a 0709 	add.w	r7, sl, r9
 801817c:	42bb      	cmp	r3, r7
 801817e:	b085      	sub	sp, #20
 8018180:	bfb8      	it	lt
 8018182:	3101      	addlt	r1, #1
 8018184:	f7ff fed4 	bl	8017f30 <_Balloc>
 8018188:	b930      	cbnz	r0, 8018198 <__multiply+0x44>
 801818a:	4602      	mov	r2, r0
 801818c:	4b42      	ldr	r3, [pc, #264]	; (8018298 <__multiply+0x144>)
 801818e:	4843      	ldr	r0, [pc, #268]	; (801829c <__multiply+0x148>)
 8018190:	f240 115d 	movw	r1, #349	; 0x15d
 8018194:	f000 fbc6 	bl	8018924 <__assert_func>
 8018198:	f100 0614 	add.w	r6, r0, #20
 801819c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80181a0:	4633      	mov	r3, r6
 80181a2:	2200      	movs	r2, #0
 80181a4:	4543      	cmp	r3, r8
 80181a6:	d31e      	bcc.n	80181e6 <__multiply+0x92>
 80181a8:	f105 0c14 	add.w	ip, r5, #20
 80181ac:	f104 0314 	add.w	r3, r4, #20
 80181b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80181b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80181b8:	9202      	str	r2, [sp, #8]
 80181ba:	ebac 0205 	sub.w	r2, ip, r5
 80181be:	3a15      	subs	r2, #21
 80181c0:	f022 0203 	bic.w	r2, r2, #3
 80181c4:	3204      	adds	r2, #4
 80181c6:	f105 0115 	add.w	r1, r5, #21
 80181ca:	458c      	cmp	ip, r1
 80181cc:	bf38      	it	cc
 80181ce:	2204      	movcc	r2, #4
 80181d0:	9201      	str	r2, [sp, #4]
 80181d2:	9a02      	ldr	r2, [sp, #8]
 80181d4:	9303      	str	r3, [sp, #12]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d808      	bhi.n	80181ec <__multiply+0x98>
 80181da:	2f00      	cmp	r7, #0
 80181dc:	dc55      	bgt.n	801828a <__multiply+0x136>
 80181de:	6107      	str	r7, [r0, #16]
 80181e0:	b005      	add	sp, #20
 80181e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e6:	f843 2b04 	str.w	r2, [r3], #4
 80181ea:	e7db      	b.n	80181a4 <__multiply+0x50>
 80181ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80181f0:	f1ba 0f00 	cmp.w	sl, #0
 80181f4:	d020      	beq.n	8018238 <__multiply+0xe4>
 80181f6:	f105 0e14 	add.w	lr, r5, #20
 80181fa:	46b1      	mov	r9, r6
 80181fc:	2200      	movs	r2, #0
 80181fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018202:	f8d9 b000 	ldr.w	fp, [r9]
 8018206:	b2a1      	uxth	r1, r4
 8018208:	fa1f fb8b 	uxth.w	fp, fp
 801820c:	fb0a b101 	mla	r1, sl, r1, fp
 8018210:	4411      	add	r1, r2
 8018212:	f8d9 2000 	ldr.w	r2, [r9]
 8018216:	0c24      	lsrs	r4, r4, #16
 8018218:	0c12      	lsrs	r2, r2, #16
 801821a:	fb0a 2404 	mla	r4, sl, r4, r2
 801821e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018222:	b289      	uxth	r1, r1
 8018224:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018228:	45f4      	cmp	ip, lr
 801822a:	f849 1b04 	str.w	r1, [r9], #4
 801822e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018232:	d8e4      	bhi.n	80181fe <__multiply+0xaa>
 8018234:	9901      	ldr	r1, [sp, #4]
 8018236:	5072      	str	r2, [r6, r1]
 8018238:	9a03      	ldr	r2, [sp, #12]
 801823a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801823e:	3304      	adds	r3, #4
 8018240:	f1b9 0f00 	cmp.w	r9, #0
 8018244:	d01f      	beq.n	8018286 <__multiply+0x132>
 8018246:	6834      	ldr	r4, [r6, #0]
 8018248:	f105 0114 	add.w	r1, r5, #20
 801824c:	46b6      	mov	lr, r6
 801824e:	f04f 0a00 	mov.w	sl, #0
 8018252:	880a      	ldrh	r2, [r1, #0]
 8018254:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018258:	fb09 b202 	mla	r2, r9, r2, fp
 801825c:	4492      	add	sl, r2
 801825e:	b2a4      	uxth	r4, r4
 8018260:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018264:	f84e 4b04 	str.w	r4, [lr], #4
 8018268:	f851 4b04 	ldr.w	r4, [r1], #4
 801826c:	f8be 2000 	ldrh.w	r2, [lr]
 8018270:	0c24      	lsrs	r4, r4, #16
 8018272:	fb09 2404 	mla	r4, r9, r4, r2
 8018276:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801827a:	458c      	cmp	ip, r1
 801827c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018280:	d8e7      	bhi.n	8018252 <__multiply+0xfe>
 8018282:	9a01      	ldr	r2, [sp, #4]
 8018284:	50b4      	str	r4, [r6, r2]
 8018286:	3604      	adds	r6, #4
 8018288:	e7a3      	b.n	80181d2 <__multiply+0x7e>
 801828a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801828e:	2b00      	cmp	r3, #0
 8018290:	d1a5      	bne.n	80181de <__multiply+0x8a>
 8018292:	3f01      	subs	r7, #1
 8018294:	e7a1      	b.n	80181da <__multiply+0x86>
 8018296:	bf00      	nop
 8018298:	0801a088 	.word	0x0801a088
 801829c:	0801a099 	.word	0x0801a099

080182a0 <__pow5mult>:
 80182a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182a4:	4615      	mov	r5, r2
 80182a6:	f012 0203 	ands.w	r2, r2, #3
 80182aa:	4606      	mov	r6, r0
 80182ac:	460f      	mov	r7, r1
 80182ae:	d007      	beq.n	80182c0 <__pow5mult+0x20>
 80182b0:	4c25      	ldr	r4, [pc, #148]	; (8018348 <__pow5mult+0xa8>)
 80182b2:	3a01      	subs	r2, #1
 80182b4:	2300      	movs	r3, #0
 80182b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80182ba:	f7ff fe9b 	bl	8017ff4 <__multadd>
 80182be:	4607      	mov	r7, r0
 80182c0:	10ad      	asrs	r5, r5, #2
 80182c2:	d03d      	beq.n	8018340 <__pow5mult+0xa0>
 80182c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80182c6:	b97c      	cbnz	r4, 80182e8 <__pow5mult+0x48>
 80182c8:	2010      	movs	r0, #16
 80182ca:	f7fe f841 	bl	8016350 <malloc>
 80182ce:	4602      	mov	r2, r0
 80182d0:	6270      	str	r0, [r6, #36]	; 0x24
 80182d2:	b928      	cbnz	r0, 80182e0 <__pow5mult+0x40>
 80182d4:	4b1d      	ldr	r3, [pc, #116]	; (801834c <__pow5mult+0xac>)
 80182d6:	481e      	ldr	r0, [pc, #120]	; (8018350 <__pow5mult+0xb0>)
 80182d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80182dc:	f000 fb22 	bl	8018924 <__assert_func>
 80182e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80182e4:	6004      	str	r4, [r0, #0]
 80182e6:	60c4      	str	r4, [r0, #12]
 80182e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80182ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80182f0:	b94c      	cbnz	r4, 8018306 <__pow5mult+0x66>
 80182f2:	f240 2171 	movw	r1, #625	; 0x271
 80182f6:	4630      	mov	r0, r6
 80182f8:	f7ff ff16 	bl	8018128 <__i2b>
 80182fc:	2300      	movs	r3, #0
 80182fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8018302:	4604      	mov	r4, r0
 8018304:	6003      	str	r3, [r0, #0]
 8018306:	f04f 0900 	mov.w	r9, #0
 801830a:	07eb      	lsls	r3, r5, #31
 801830c:	d50a      	bpl.n	8018324 <__pow5mult+0x84>
 801830e:	4639      	mov	r1, r7
 8018310:	4622      	mov	r2, r4
 8018312:	4630      	mov	r0, r6
 8018314:	f7ff ff1e 	bl	8018154 <__multiply>
 8018318:	4639      	mov	r1, r7
 801831a:	4680      	mov	r8, r0
 801831c:	4630      	mov	r0, r6
 801831e:	f7ff fe47 	bl	8017fb0 <_Bfree>
 8018322:	4647      	mov	r7, r8
 8018324:	106d      	asrs	r5, r5, #1
 8018326:	d00b      	beq.n	8018340 <__pow5mult+0xa0>
 8018328:	6820      	ldr	r0, [r4, #0]
 801832a:	b938      	cbnz	r0, 801833c <__pow5mult+0x9c>
 801832c:	4622      	mov	r2, r4
 801832e:	4621      	mov	r1, r4
 8018330:	4630      	mov	r0, r6
 8018332:	f7ff ff0f 	bl	8018154 <__multiply>
 8018336:	6020      	str	r0, [r4, #0]
 8018338:	f8c0 9000 	str.w	r9, [r0]
 801833c:	4604      	mov	r4, r0
 801833e:	e7e4      	b.n	801830a <__pow5mult+0x6a>
 8018340:	4638      	mov	r0, r7
 8018342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018346:	bf00      	nop
 8018348:	0801a1f0 	.word	0x0801a1f0
 801834c:	0801a012 	.word	0x0801a012
 8018350:	0801a099 	.word	0x0801a099

08018354 <__lshift>:
 8018354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018358:	460c      	mov	r4, r1
 801835a:	6849      	ldr	r1, [r1, #4]
 801835c:	6923      	ldr	r3, [r4, #16]
 801835e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018362:	68a3      	ldr	r3, [r4, #8]
 8018364:	4607      	mov	r7, r0
 8018366:	4691      	mov	r9, r2
 8018368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801836c:	f108 0601 	add.w	r6, r8, #1
 8018370:	42b3      	cmp	r3, r6
 8018372:	db0b      	blt.n	801838c <__lshift+0x38>
 8018374:	4638      	mov	r0, r7
 8018376:	f7ff fddb 	bl	8017f30 <_Balloc>
 801837a:	4605      	mov	r5, r0
 801837c:	b948      	cbnz	r0, 8018392 <__lshift+0x3e>
 801837e:	4602      	mov	r2, r0
 8018380:	4b28      	ldr	r3, [pc, #160]	; (8018424 <__lshift+0xd0>)
 8018382:	4829      	ldr	r0, [pc, #164]	; (8018428 <__lshift+0xd4>)
 8018384:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018388:	f000 facc 	bl	8018924 <__assert_func>
 801838c:	3101      	adds	r1, #1
 801838e:	005b      	lsls	r3, r3, #1
 8018390:	e7ee      	b.n	8018370 <__lshift+0x1c>
 8018392:	2300      	movs	r3, #0
 8018394:	f100 0114 	add.w	r1, r0, #20
 8018398:	f100 0210 	add.w	r2, r0, #16
 801839c:	4618      	mov	r0, r3
 801839e:	4553      	cmp	r3, sl
 80183a0:	db33      	blt.n	801840a <__lshift+0xb6>
 80183a2:	6920      	ldr	r0, [r4, #16]
 80183a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80183a8:	f104 0314 	add.w	r3, r4, #20
 80183ac:	f019 091f 	ands.w	r9, r9, #31
 80183b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80183b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80183b8:	d02b      	beq.n	8018412 <__lshift+0xbe>
 80183ba:	f1c9 0e20 	rsb	lr, r9, #32
 80183be:	468a      	mov	sl, r1
 80183c0:	2200      	movs	r2, #0
 80183c2:	6818      	ldr	r0, [r3, #0]
 80183c4:	fa00 f009 	lsl.w	r0, r0, r9
 80183c8:	4302      	orrs	r2, r0
 80183ca:	f84a 2b04 	str.w	r2, [sl], #4
 80183ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80183d2:	459c      	cmp	ip, r3
 80183d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80183d8:	d8f3      	bhi.n	80183c2 <__lshift+0x6e>
 80183da:	ebac 0304 	sub.w	r3, ip, r4
 80183de:	3b15      	subs	r3, #21
 80183e0:	f023 0303 	bic.w	r3, r3, #3
 80183e4:	3304      	adds	r3, #4
 80183e6:	f104 0015 	add.w	r0, r4, #21
 80183ea:	4584      	cmp	ip, r0
 80183ec:	bf38      	it	cc
 80183ee:	2304      	movcc	r3, #4
 80183f0:	50ca      	str	r2, [r1, r3]
 80183f2:	b10a      	cbz	r2, 80183f8 <__lshift+0xa4>
 80183f4:	f108 0602 	add.w	r6, r8, #2
 80183f8:	3e01      	subs	r6, #1
 80183fa:	4638      	mov	r0, r7
 80183fc:	612e      	str	r6, [r5, #16]
 80183fe:	4621      	mov	r1, r4
 8018400:	f7ff fdd6 	bl	8017fb0 <_Bfree>
 8018404:	4628      	mov	r0, r5
 8018406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801840a:	f842 0f04 	str.w	r0, [r2, #4]!
 801840e:	3301      	adds	r3, #1
 8018410:	e7c5      	b.n	801839e <__lshift+0x4a>
 8018412:	3904      	subs	r1, #4
 8018414:	f853 2b04 	ldr.w	r2, [r3], #4
 8018418:	f841 2f04 	str.w	r2, [r1, #4]!
 801841c:	459c      	cmp	ip, r3
 801841e:	d8f9      	bhi.n	8018414 <__lshift+0xc0>
 8018420:	e7ea      	b.n	80183f8 <__lshift+0xa4>
 8018422:	bf00      	nop
 8018424:	0801a088 	.word	0x0801a088
 8018428:	0801a099 	.word	0x0801a099

0801842c <__mcmp>:
 801842c:	b530      	push	{r4, r5, lr}
 801842e:	6902      	ldr	r2, [r0, #16]
 8018430:	690c      	ldr	r4, [r1, #16]
 8018432:	1b12      	subs	r2, r2, r4
 8018434:	d10e      	bne.n	8018454 <__mcmp+0x28>
 8018436:	f100 0314 	add.w	r3, r0, #20
 801843a:	3114      	adds	r1, #20
 801843c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018440:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018444:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018448:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801844c:	42a5      	cmp	r5, r4
 801844e:	d003      	beq.n	8018458 <__mcmp+0x2c>
 8018450:	d305      	bcc.n	801845e <__mcmp+0x32>
 8018452:	2201      	movs	r2, #1
 8018454:	4610      	mov	r0, r2
 8018456:	bd30      	pop	{r4, r5, pc}
 8018458:	4283      	cmp	r3, r0
 801845a:	d3f3      	bcc.n	8018444 <__mcmp+0x18>
 801845c:	e7fa      	b.n	8018454 <__mcmp+0x28>
 801845e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018462:	e7f7      	b.n	8018454 <__mcmp+0x28>

08018464 <__mdiff>:
 8018464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018468:	460c      	mov	r4, r1
 801846a:	4606      	mov	r6, r0
 801846c:	4611      	mov	r1, r2
 801846e:	4620      	mov	r0, r4
 8018470:	4617      	mov	r7, r2
 8018472:	f7ff ffdb 	bl	801842c <__mcmp>
 8018476:	1e05      	subs	r5, r0, #0
 8018478:	d110      	bne.n	801849c <__mdiff+0x38>
 801847a:	4629      	mov	r1, r5
 801847c:	4630      	mov	r0, r6
 801847e:	f7ff fd57 	bl	8017f30 <_Balloc>
 8018482:	b930      	cbnz	r0, 8018492 <__mdiff+0x2e>
 8018484:	4b39      	ldr	r3, [pc, #228]	; (801856c <__mdiff+0x108>)
 8018486:	4602      	mov	r2, r0
 8018488:	f240 2132 	movw	r1, #562	; 0x232
 801848c:	4838      	ldr	r0, [pc, #224]	; (8018570 <__mdiff+0x10c>)
 801848e:	f000 fa49 	bl	8018924 <__assert_func>
 8018492:	2301      	movs	r3, #1
 8018494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801849c:	bfa4      	itt	ge
 801849e:	463b      	movge	r3, r7
 80184a0:	4627      	movge	r7, r4
 80184a2:	4630      	mov	r0, r6
 80184a4:	6879      	ldr	r1, [r7, #4]
 80184a6:	bfa6      	itte	ge
 80184a8:	461c      	movge	r4, r3
 80184aa:	2500      	movge	r5, #0
 80184ac:	2501      	movlt	r5, #1
 80184ae:	f7ff fd3f 	bl	8017f30 <_Balloc>
 80184b2:	b920      	cbnz	r0, 80184be <__mdiff+0x5a>
 80184b4:	4b2d      	ldr	r3, [pc, #180]	; (801856c <__mdiff+0x108>)
 80184b6:	4602      	mov	r2, r0
 80184b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80184bc:	e7e6      	b.n	801848c <__mdiff+0x28>
 80184be:	693e      	ldr	r6, [r7, #16]
 80184c0:	60c5      	str	r5, [r0, #12]
 80184c2:	6925      	ldr	r5, [r4, #16]
 80184c4:	f107 0114 	add.w	r1, r7, #20
 80184c8:	f104 0914 	add.w	r9, r4, #20
 80184cc:	f100 0e14 	add.w	lr, r0, #20
 80184d0:	f107 0210 	add.w	r2, r7, #16
 80184d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80184d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80184dc:	46f2      	mov	sl, lr
 80184de:	2700      	movs	r7, #0
 80184e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80184e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80184e8:	fa1f f883 	uxth.w	r8, r3
 80184ec:	fa17 f78b 	uxtah	r7, r7, fp
 80184f0:	0c1b      	lsrs	r3, r3, #16
 80184f2:	eba7 0808 	sub.w	r8, r7, r8
 80184f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80184fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80184fe:	fa1f f888 	uxth.w	r8, r8
 8018502:	141f      	asrs	r7, r3, #16
 8018504:	454d      	cmp	r5, r9
 8018506:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801850a:	f84a 3b04 	str.w	r3, [sl], #4
 801850e:	d8e7      	bhi.n	80184e0 <__mdiff+0x7c>
 8018510:	1b2b      	subs	r3, r5, r4
 8018512:	3b15      	subs	r3, #21
 8018514:	f023 0303 	bic.w	r3, r3, #3
 8018518:	3304      	adds	r3, #4
 801851a:	3415      	adds	r4, #21
 801851c:	42a5      	cmp	r5, r4
 801851e:	bf38      	it	cc
 8018520:	2304      	movcc	r3, #4
 8018522:	4419      	add	r1, r3
 8018524:	4473      	add	r3, lr
 8018526:	469e      	mov	lr, r3
 8018528:	460d      	mov	r5, r1
 801852a:	4565      	cmp	r5, ip
 801852c:	d30e      	bcc.n	801854c <__mdiff+0xe8>
 801852e:	f10c 0203 	add.w	r2, ip, #3
 8018532:	1a52      	subs	r2, r2, r1
 8018534:	f022 0203 	bic.w	r2, r2, #3
 8018538:	3903      	subs	r1, #3
 801853a:	458c      	cmp	ip, r1
 801853c:	bf38      	it	cc
 801853e:	2200      	movcc	r2, #0
 8018540:	441a      	add	r2, r3
 8018542:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018546:	b17b      	cbz	r3, 8018568 <__mdiff+0x104>
 8018548:	6106      	str	r6, [r0, #16]
 801854a:	e7a5      	b.n	8018498 <__mdiff+0x34>
 801854c:	f855 8b04 	ldr.w	r8, [r5], #4
 8018550:	fa17 f488 	uxtah	r4, r7, r8
 8018554:	1422      	asrs	r2, r4, #16
 8018556:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801855a:	b2a4      	uxth	r4, r4
 801855c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018560:	f84e 4b04 	str.w	r4, [lr], #4
 8018564:	1417      	asrs	r7, r2, #16
 8018566:	e7e0      	b.n	801852a <__mdiff+0xc6>
 8018568:	3e01      	subs	r6, #1
 801856a:	e7ea      	b.n	8018542 <__mdiff+0xde>
 801856c:	0801a088 	.word	0x0801a088
 8018570:	0801a099 	.word	0x0801a099

08018574 <__d2b>:
 8018574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018578:	4689      	mov	r9, r1
 801857a:	2101      	movs	r1, #1
 801857c:	ec57 6b10 	vmov	r6, r7, d0
 8018580:	4690      	mov	r8, r2
 8018582:	f7ff fcd5 	bl	8017f30 <_Balloc>
 8018586:	4604      	mov	r4, r0
 8018588:	b930      	cbnz	r0, 8018598 <__d2b+0x24>
 801858a:	4602      	mov	r2, r0
 801858c:	4b25      	ldr	r3, [pc, #148]	; (8018624 <__d2b+0xb0>)
 801858e:	4826      	ldr	r0, [pc, #152]	; (8018628 <__d2b+0xb4>)
 8018590:	f240 310a 	movw	r1, #778	; 0x30a
 8018594:	f000 f9c6 	bl	8018924 <__assert_func>
 8018598:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801859c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80185a0:	bb35      	cbnz	r5, 80185f0 <__d2b+0x7c>
 80185a2:	2e00      	cmp	r6, #0
 80185a4:	9301      	str	r3, [sp, #4]
 80185a6:	d028      	beq.n	80185fa <__d2b+0x86>
 80185a8:	4668      	mov	r0, sp
 80185aa:	9600      	str	r6, [sp, #0]
 80185ac:	f7ff fd8c 	bl	80180c8 <__lo0bits>
 80185b0:	9900      	ldr	r1, [sp, #0]
 80185b2:	b300      	cbz	r0, 80185f6 <__d2b+0x82>
 80185b4:	9a01      	ldr	r2, [sp, #4]
 80185b6:	f1c0 0320 	rsb	r3, r0, #32
 80185ba:	fa02 f303 	lsl.w	r3, r2, r3
 80185be:	430b      	orrs	r3, r1
 80185c0:	40c2      	lsrs	r2, r0
 80185c2:	6163      	str	r3, [r4, #20]
 80185c4:	9201      	str	r2, [sp, #4]
 80185c6:	9b01      	ldr	r3, [sp, #4]
 80185c8:	61a3      	str	r3, [r4, #24]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	bf14      	ite	ne
 80185ce:	2202      	movne	r2, #2
 80185d0:	2201      	moveq	r2, #1
 80185d2:	6122      	str	r2, [r4, #16]
 80185d4:	b1d5      	cbz	r5, 801860c <__d2b+0x98>
 80185d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80185da:	4405      	add	r5, r0
 80185dc:	f8c9 5000 	str.w	r5, [r9]
 80185e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80185e4:	f8c8 0000 	str.w	r0, [r8]
 80185e8:	4620      	mov	r0, r4
 80185ea:	b003      	add	sp, #12
 80185ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80185f4:	e7d5      	b.n	80185a2 <__d2b+0x2e>
 80185f6:	6161      	str	r1, [r4, #20]
 80185f8:	e7e5      	b.n	80185c6 <__d2b+0x52>
 80185fa:	a801      	add	r0, sp, #4
 80185fc:	f7ff fd64 	bl	80180c8 <__lo0bits>
 8018600:	9b01      	ldr	r3, [sp, #4]
 8018602:	6163      	str	r3, [r4, #20]
 8018604:	2201      	movs	r2, #1
 8018606:	6122      	str	r2, [r4, #16]
 8018608:	3020      	adds	r0, #32
 801860a:	e7e3      	b.n	80185d4 <__d2b+0x60>
 801860c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018610:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018614:	f8c9 0000 	str.w	r0, [r9]
 8018618:	6918      	ldr	r0, [r3, #16]
 801861a:	f7ff fd35 	bl	8018088 <__hi0bits>
 801861e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018622:	e7df      	b.n	80185e4 <__d2b+0x70>
 8018624:	0801a088 	.word	0x0801a088
 8018628:	0801a099 	.word	0x0801a099

0801862c <_calloc_r>:
 801862c:	b513      	push	{r0, r1, r4, lr}
 801862e:	434a      	muls	r2, r1
 8018630:	4611      	mov	r1, r2
 8018632:	9201      	str	r2, [sp, #4]
 8018634:	f7fd ff02 	bl	801643c <_malloc_r>
 8018638:	4604      	mov	r4, r0
 801863a:	b118      	cbz	r0, 8018644 <_calloc_r+0x18>
 801863c:	9a01      	ldr	r2, [sp, #4]
 801863e:	2100      	movs	r1, #0
 8018640:	f7fd fea4 	bl	801638c <memset>
 8018644:	4620      	mov	r0, r4
 8018646:	b002      	add	sp, #8
 8018648:	bd10      	pop	{r4, pc}

0801864a <__ssputs_r>:
 801864a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801864e:	688e      	ldr	r6, [r1, #8]
 8018650:	429e      	cmp	r6, r3
 8018652:	4682      	mov	sl, r0
 8018654:	460c      	mov	r4, r1
 8018656:	4690      	mov	r8, r2
 8018658:	461f      	mov	r7, r3
 801865a:	d838      	bhi.n	80186ce <__ssputs_r+0x84>
 801865c:	898a      	ldrh	r2, [r1, #12]
 801865e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018662:	d032      	beq.n	80186ca <__ssputs_r+0x80>
 8018664:	6825      	ldr	r5, [r4, #0]
 8018666:	6909      	ldr	r1, [r1, #16]
 8018668:	eba5 0901 	sub.w	r9, r5, r1
 801866c:	6965      	ldr	r5, [r4, #20]
 801866e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018672:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018676:	3301      	adds	r3, #1
 8018678:	444b      	add	r3, r9
 801867a:	106d      	asrs	r5, r5, #1
 801867c:	429d      	cmp	r5, r3
 801867e:	bf38      	it	cc
 8018680:	461d      	movcc	r5, r3
 8018682:	0553      	lsls	r3, r2, #21
 8018684:	d531      	bpl.n	80186ea <__ssputs_r+0xa0>
 8018686:	4629      	mov	r1, r5
 8018688:	f7fd fed8 	bl	801643c <_malloc_r>
 801868c:	4606      	mov	r6, r0
 801868e:	b950      	cbnz	r0, 80186a6 <__ssputs_r+0x5c>
 8018690:	230c      	movs	r3, #12
 8018692:	f8ca 3000 	str.w	r3, [sl]
 8018696:	89a3      	ldrh	r3, [r4, #12]
 8018698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801869c:	81a3      	strh	r3, [r4, #12]
 801869e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80186a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186a6:	6921      	ldr	r1, [r4, #16]
 80186a8:	464a      	mov	r2, r9
 80186aa:	f7fd fe61 	bl	8016370 <memcpy>
 80186ae:	89a3      	ldrh	r3, [r4, #12]
 80186b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80186b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80186b8:	81a3      	strh	r3, [r4, #12]
 80186ba:	6126      	str	r6, [r4, #16]
 80186bc:	6165      	str	r5, [r4, #20]
 80186be:	444e      	add	r6, r9
 80186c0:	eba5 0509 	sub.w	r5, r5, r9
 80186c4:	6026      	str	r6, [r4, #0]
 80186c6:	60a5      	str	r5, [r4, #8]
 80186c8:	463e      	mov	r6, r7
 80186ca:	42be      	cmp	r6, r7
 80186cc:	d900      	bls.n	80186d0 <__ssputs_r+0x86>
 80186ce:	463e      	mov	r6, r7
 80186d0:	4632      	mov	r2, r6
 80186d2:	6820      	ldr	r0, [r4, #0]
 80186d4:	4641      	mov	r1, r8
 80186d6:	f000 f967 	bl	80189a8 <memmove>
 80186da:	68a3      	ldr	r3, [r4, #8]
 80186dc:	6822      	ldr	r2, [r4, #0]
 80186de:	1b9b      	subs	r3, r3, r6
 80186e0:	4432      	add	r2, r6
 80186e2:	60a3      	str	r3, [r4, #8]
 80186e4:	6022      	str	r2, [r4, #0]
 80186e6:	2000      	movs	r0, #0
 80186e8:	e7db      	b.n	80186a2 <__ssputs_r+0x58>
 80186ea:	462a      	mov	r2, r5
 80186ec:	f000 f976 	bl	80189dc <_realloc_r>
 80186f0:	4606      	mov	r6, r0
 80186f2:	2800      	cmp	r0, #0
 80186f4:	d1e1      	bne.n	80186ba <__ssputs_r+0x70>
 80186f6:	6921      	ldr	r1, [r4, #16]
 80186f8:	4650      	mov	r0, sl
 80186fa:	f7fd fe4f 	bl	801639c <_free_r>
 80186fe:	e7c7      	b.n	8018690 <__ssputs_r+0x46>

08018700 <_svfiprintf_r>:
 8018700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018704:	4698      	mov	r8, r3
 8018706:	898b      	ldrh	r3, [r1, #12]
 8018708:	061b      	lsls	r3, r3, #24
 801870a:	b09d      	sub	sp, #116	; 0x74
 801870c:	4607      	mov	r7, r0
 801870e:	460d      	mov	r5, r1
 8018710:	4614      	mov	r4, r2
 8018712:	d50e      	bpl.n	8018732 <_svfiprintf_r+0x32>
 8018714:	690b      	ldr	r3, [r1, #16]
 8018716:	b963      	cbnz	r3, 8018732 <_svfiprintf_r+0x32>
 8018718:	2140      	movs	r1, #64	; 0x40
 801871a:	f7fd fe8f 	bl	801643c <_malloc_r>
 801871e:	6028      	str	r0, [r5, #0]
 8018720:	6128      	str	r0, [r5, #16]
 8018722:	b920      	cbnz	r0, 801872e <_svfiprintf_r+0x2e>
 8018724:	230c      	movs	r3, #12
 8018726:	603b      	str	r3, [r7, #0]
 8018728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801872c:	e0d1      	b.n	80188d2 <_svfiprintf_r+0x1d2>
 801872e:	2340      	movs	r3, #64	; 0x40
 8018730:	616b      	str	r3, [r5, #20]
 8018732:	2300      	movs	r3, #0
 8018734:	9309      	str	r3, [sp, #36]	; 0x24
 8018736:	2320      	movs	r3, #32
 8018738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801873c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018740:	2330      	movs	r3, #48	; 0x30
 8018742:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80188ec <_svfiprintf_r+0x1ec>
 8018746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801874a:	f04f 0901 	mov.w	r9, #1
 801874e:	4623      	mov	r3, r4
 8018750:	469a      	mov	sl, r3
 8018752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018756:	b10a      	cbz	r2, 801875c <_svfiprintf_r+0x5c>
 8018758:	2a25      	cmp	r2, #37	; 0x25
 801875a:	d1f9      	bne.n	8018750 <_svfiprintf_r+0x50>
 801875c:	ebba 0b04 	subs.w	fp, sl, r4
 8018760:	d00b      	beq.n	801877a <_svfiprintf_r+0x7a>
 8018762:	465b      	mov	r3, fp
 8018764:	4622      	mov	r2, r4
 8018766:	4629      	mov	r1, r5
 8018768:	4638      	mov	r0, r7
 801876a:	f7ff ff6e 	bl	801864a <__ssputs_r>
 801876e:	3001      	adds	r0, #1
 8018770:	f000 80aa 	beq.w	80188c8 <_svfiprintf_r+0x1c8>
 8018774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018776:	445a      	add	r2, fp
 8018778:	9209      	str	r2, [sp, #36]	; 0x24
 801877a:	f89a 3000 	ldrb.w	r3, [sl]
 801877e:	2b00      	cmp	r3, #0
 8018780:	f000 80a2 	beq.w	80188c8 <_svfiprintf_r+0x1c8>
 8018784:	2300      	movs	r3, #0
 8018786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801878a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801878e:	f10a 0a01 	add.w	sl, sl, #1
 8018792:	9304      	str	r3, [sp, #16]
 8018794:	9307      	str	r3, [sp, #28]
 8018796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801879a:	931a      	str	r3, [sp, #104]	; 0x68
 801879c:	4654      	mov	r4, sl
 801879e:	2205      	movs	r2, #5
 80187a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187a4:	4851      	ldr	r0, [pc, #324]	; (80188ec <_svfiprintf_r+0x1ec>)
 80187a6:	f7e7 fd1b 	bl	80001e0 <memchr>
 80187aa:	9a04      	ldr	r2, [sp, #16]
 80187ac:	b9d8      	cbnz	r0, 80187e6 <_svfiprintf_r+0xe6>
 80187ae:	06d0      	lsls	r0, r2, #27
 80187b0:	bf44      	itt	mi
 80187b2:	2320      	movmi	r3, #32
 80187b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80187b8:	0711      	lsls	r1, r2, #28
 80187ba:	bf44      	itt	mi
 80187bc:	232b      	movmi	r3, #43	; 0x2b
 80187be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80187c2:	f89a 3000 	ldrb.w	r3, [sl]
 80187c6:	2b2a      	cmp	r3, #42	; 0x2a
 80187c8:	d015      	beq.n	80187f6 <_svfiprintf_r+0xf6>
 80187ca:	9a07      	ldr	r2, [sp, #28]
 80187cc:	4654      	mov	r4, sl
 80187ce:	2000      	movs	r0, #0
 80187d0:	f04f 0c0a 	mov.w	ip, #10
 80187d4:	4621      	mov	r1, r4
 80187d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80187da:	3b30      	subs	r3, #48	; 0x30
 80187dc:	2b09      	cmp	r3, #9
 80187de:	d94e      	bls.n	801887e <_svfiprintf_r+0x17e>
 80187e0:	b1b0      	cbz	r0, 8018810 <_svfiprintf_r+0x110>
 80187e2:	9207      	str	r2, [sp, #28]
 80187e4:	e014      	b.n	8018810 <_svfiprintf_r+0x110>
 80187e6:	eba0 0308 	sub.w	r3, r0, r8
 80187ea:	fa09 f303 	lsl.w	r3, r9, r3
 80187ee:	4313      	orrs	r3, r2
 80187f0:	9304      	str	r3, [sp, #16]
 80187f2:	46a2      	mov	sl, r4
 80187f4:	e7d2      	b.n	801879c <_svfiprintf_r+0x9c>
 80187f6:	9b03      	ldr	r3, [sp, #12]
 80187f8:	1d19      	adds	r1, r3, #4
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	9103      	str	r1, [sp, #12]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	bfbb      	ittet	lt
 8018802:	425b      	neglt	r3, r3
 8018804:	f042 0202 	orrlt.w	r2, r2, #2
 8018808:	9307      	strge	r3, [sp, #28]
 801880a:	9307      	strlt	r3, [sp, #28]
 801880c:	bfb8      	it	lt
 801880e:	9204      	strlt	r2, [sp, #16]
 8018810:	7823      	ldrb	r3, [r4, #0]
 8018812:	2b2e      	cmp	r3, #46	; 0x2e
 8018814:	d10c      	bne.n	8018830 <_svfiprintf_r+0x130>
 8018816:	7863      	ldrb	r3, [r4, #1]
 8018818:	2b2a      	cmp	r3, #42	; 0x2a
 801881a:	d135      	bne.n	8018888 <_svfiprintf_r+0x188>
 801881c:	9b03      	ldr	r3, [sp, #12]
 801881e:	1d1a      	adds	r2, r3, #4
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	9203      	str	r2, [sp, #12]
 8018824:	2b00      	cmp	r3, #0
 8018826:	bfb8      	it	lt
 8018828:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801882c:	3402      	adds	r4, #2
 801882e:	9305      	str	r3, [sp, #20]
 8018830:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80188fc <_svfiprintf_r+0x1fc>
 8018834:	7821      	ldrb	r1, [r4, #0]
 8018836:	2203      	movs	r2, #3
 8018838:	4650      	mov	r0, sl
 801883a:	f7e7 fcd1 	bl	80001e0 <memchr>
 801883e:	b140      	cbz	r0, 8018852 <_svfiprintf_r+0x152>
 8018840:	2340      	movs	r3, #64	; 0x40
 8018842:	eba0 000a 	sub.w	r0, r0, sl
 8018846:	fa03 f000 	lsl.w	r0, r3, r0
 801884a:	9b04      	ldr	r3, [sp, #16]
 801884c:	4303      	orrs	r3, r0
 801884e:	3401      	adds	r4, #1
 8018850:	9304      	str	r3, [sp, #16]
 8018852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018856:	4826      	ldr	r0, [pc, #152]	; (80188f0 <_svfiprintf_r+0x1f0>)
 8018858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801885c:	2206      	movs	r2, #6
 801885e:	f7e7 fcbf 	bl	80001e0 <memchr>
 8018862:	2800      	cmp	r0, #0
 8018864:	d038      	beq.n	80188d8 <_svfiprintf_r+0x1d8>
 8018866:	4b23      	ldr	r3, [pc, #140]	; (80188f4 <_svfiprintf_r+0x1f4>)
 8018868:	bb1b      	cbnz	r3, 80188b2 <_svfiprintf_r+0x1b2>
 801886a:	9b03      	ldr	r3, [sp, #12]
 801886c:	3307      	adds	r3, #7
 801886e:	f023 0307 	bic.w	r3, r3, #7
 8018872:	3308      	adds	r3, #8
 8018874:	9303      	str	r3, [sp, #12]
 8018876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018878:	4433      	add	r3, r6
 801887a:	9309      	str	r3, [sp, #36]	; 0x24
 801887c:	e767      	b.n	801874e <_svfiprintf_r+0x4e>
 801887e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018882:	460c      	mov	r4, r1
 8018884:	2001      	movs	r0, #1
 8018886:	e7a5      	b.n	80187d4 <_svfiprintf_r+0xd4>
 8018888:	2300      	movs	r3, #0
 801888a:	3401      	adds	r4, #1
 801888c:	9305      	str	r3, [sp, #20]
 801888e:	4619      	mov	r1, r3
 8018890:	f04f 0c0a 	mov.w	ip, #10
 8018894:	4620      	mov	r0, r4
 8018896:	f810 2b01 	ldrb.w	r2, [r0], #1
 801889a:	3a30      	subs	r2, #48	; 0x30
 801889c:	2a09      	cmp	r2, #9
 801889e:	d903      	bls.n	80188a8 <_svfiprintf_r+0x1a8>
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d0c5      	beq.n	8018830 <_svfiprintf_r+0x130>
 80188a4:	9105      	str	r1, [sp, #20]
 80188a6:	e7c3      	b.n	8018830 <_svfiprintf_r+0x130>
 80188a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80188ac:	4604      	mov	r4, r0
 80188ae:	2301      	movs	r3, #1
 80188b0:	e7f0      	b.n	8018894 <_svfiprintf_r+0x194>
 80188b2:	ab03      	add	r3, sp, #12
 80188b4:	9300      	str	r3, [sp, #0]
 80188b6:	462a      	mov	r2, r5
 80188b8:	4b0f      	ldr	r3, [pc, #60]	; (80188f8 <_svfiprintf_r+0x1f8>)
 80188ba:	a904      	add	r1, sp, #16
 80188bc:	4638      	mov	r0, r7
 80188be:	f7fd feb7 	bl	8016630 <_printf_float>
 80188c2:	1c42      	adds	r2, r0, #1
 80188c4:	4606      	mov	r6, r0
 80188c6:	d1d6      	bne.n	8018876 <_svfiprintf_r+0x176>
 80188c8:	89ab      	ldrh	r3, [r5, #12]
 80188ca:	065b      	lsls	r3, r3, #25
 80188cc:	f53f af2c 	bmi.w	8018728 <_svfiprintf_r+0x28>
 80188d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80188d2:	b01d      	add	sp, #116	; 0x74
 80188d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188d8:	ab03      	add	r3, sp, #12
 80188da:	9300      	str	r3, [sp, #0]
 80188dc:	462a      	mov	r2, r5
 80188de:	4b06      	ldr	r3, [pc, #24]	; (80188f8 <_svfiprintf_r+0x1f8>)
 80188e0:	a904      	add	r1, sp, #16
 80188e2:	4638      	mov	r0, r7
 80188e4:	f7fe f948 	bl	8016b78 <_printf_i>
 80188e8:	e7eb      	b.n	80188c2 <_svfiprintf_r+0x1c2>
 80188ea:	bf00      	nop
 80188ec:	0801a1fc 	.word	0x0801a1fc
 80188f0:	0801a206 	.word	0x0801a206
 80188f4:	08016631 	.word	0x08016631
 80188f8:	0801864b 	.word	0x0801864b
 80188fc:	0801a202 	.word	0x0801a202

08018900 <_read_r>:
 8018900:	b538      	push	{r3, r4, r5, lr}
 8018902:	4d07      	ldr	r5, [pc, #28]	; (8018920 <_read_r+0x20>)
 8018904:	4604      	mov	r4, r0
 8018906:	4608      	mov	r0, r1
 8018908:	4611      	mov	r1, r2
 801890a:	2200      	movs	r2, #0
 801890c:	602a      	str	r2, [r5, #0]
 801890e:	461a      	mov	r2, r3
 8018910:	f7ec fb42 	bl	8004f98 <_read>
 8018914:	1c43      	adds	r3, r0, #1
 8018916:	d102      	bne.n	801891e <_read_r+0x1e>
 8018918:	682b      	ldr	r3, [r5, #0]
 801891a:	b103      	cbz	r3, 801891e <_read_r+0x1e>
 801891c:	6023      	str	r3, [r4, #0]
 801891e:	bd38      	pop	{r3, r4, r5, pc}
 8018920:	20016cbc 	.word	0x20016cbc

08018924 <__assert_func>:
 8018924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018926:	4614      	mov	r4, r2
 8018928:	461a      	mov	r2, r3
 801892a:	4b09      	ldr	r3, [pc, #36]	; (8018950 <__assert_func+0x2c>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	4605      	mov	r5, r0
 8018930:	68d8      	ldr	r0, [r3, #12]
 8018932:	b14c      	cbz	r4, 8018948 <__assert_func+0x24>
 8018934:	4b07      	ldr	r3, [pc, #28]	; (8018954 <__assert_func+0x30>)
 8018936:	9100      	str	r1, [sp, #0]
 8018938:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801893c:	4906      	ldr	r1, [pc, #24]	; (8018958 <__assert_func+0x34>)
 801893e:	462b      	mov	r3, r5
 8018940:	f000 f80e 	bl	8018960 <fiprintf>
 8018944:	f000 fa98 	bl	8018e78 <abort>
 8018948:	4b04      	ldr	r3, [pc, #16]	; (801895c <__assert_func+0x38>)
 801894a:	461c      	mov	r4, r3
 801894c:	e7f3      	b.n	8018936 <__assert_func+0x12>
 801894e:	bf00      	nop
 8018950:	200001a0 	.word	0x200001a0
 8018954:	0801a20d 	.word	0x0801a20d
 8018958:	0801a21a 	.word	0x0801a21a
 801895c:	0801a248 	.word	0x0801a248

08018960 <fiprintf>:
 8018960:	b40e      	push	{r1, r2, r3}
 8018962:	b503      	push	{r0, r1, lr}
 8018964:	4601      	mov	r1, r0
 8018966:	ab03      	add	r3, sp, #12
 8018968:	4805      	ldr	r0, [pc, #20]	; (8018980 <fiprintf+0x20>)
 801896a:	f853 2b04 	ldr.w	r2, [r3], #4
 801896e:	6800      	ldr	r0, [r0, #0]
 8018970:	9301      	str	r3, [sp, #4]
 8018972:	f000 f883 	bl	8018a7c <_vfiprintf_r>
 8018976:	b002      	add	sp, #8
 8018978:	f85d eb04 	ldr.w	lr, [sp], #4
 801897c:	b003      	add	sp, #12
 801897e:	4770      	bx	lr
 8018980:	200001a0 	.word	0x200001a0

08018984 <__ascii_mbtowc>:
 8018984:	b082      	sub	sp, #8
 8018986:	b901      	cbnz	r1, 801898a <__ascii_mbtowc+0x6>
 8018988:	a901      	add	r1, sp, #4
 801898a:	b142      	cbz	r2, 801899e <__ascii_mbtowc+0x1a>
 801898c:	b14b      	cbz	r3, 80189a2 <__ascii_mbtowc+0x1e>
 801898e:	7813      	ldrb	r3, [r2, #0]
 8018990:	600b      	str	r3, [r1, #0]
 8018992:	7812      	ldrb	r2, [r2, #0]
 8018994:	1e10      	subs	r0, r2, #0
 8018996:	bf18      	it	ne
 8018998:	2001      	movne	r0, #1
 801899a:	b002      	add	sp, #8
 801899c:	4770      	bx	lr
 801899e:	4610      	mov	r0, r2
 80189a0:	e7fb      	b.n	801899a <__ascii_mbtowc+0x16>
 80189a2:	f06f 0001 	mvn.w	r0, #1
 80189a6:	e7f8      	b.n	801899a <__ascii_mbtowc+0x16>

080189a8 <memmove>:
 80189a8:	4288      	cmp	r0, r1
 80189aa:	b510      	push	{r4, lr}
 80189ac:	eb01 0402 	add.w	r4, r1, r2
 80189b0:	d902      	bls.n	80189b8 <memmove+0x10>
 80189b2:	4284      	cmp	r4, r0
 80189b4:	4623      	mov	r3, r4
 80189b6:	d807      	bhi.n	80189c8 <memmove+0x20>
 80189b8:	1e43      	subs	r3, r0, #1
 80189ba:	42a1      	cmp	r1, r4
 80189bc:	d008      	beq.n	80189d0 <memmove+0x28>
 80189be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80189c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80189c6:	e7f8      	b.n	80189ba <memmove+0x12>
 80189c8:	4402      	add	r2, r0
 80189ca:	4601      	mov	r1, r0
 80189cc:	428a      	cmp	r2, r1
 80189ce:	d100      	bne.n	80189d2 <memmove+0x2a>
 80189d0:	bd10      	pop	{r4, pc}
 80189d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80189d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80189da:	e7f7      	b.n	80189cc <memmove+0x24>

080189dc <_realloc_r>:
 80189dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189de:	4607      	mov	r7, r0
 80189e0:	4614      	mov	r4, r2
 80189e2:	460e      	mov	r6, r1
 80189e4:	b921      	cbnz	r1, 80189f0 <_realloc_r+0x14>
 80189e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80189ea:	4611      	mov	r1, r2
 80189ec:	f7fd bd26 	b.w	801643c <_malloc_r>
 80189f0:	b922      	cbnz	r2, 80189fc <_realloc_r+0x20>
 80189f2:	f7fd fcd3 	bl	801639c <_free_r>
 80189f6:	4625      	mov	r5, r4
 80189f8:	4628      	mov	r0, r5
 80189fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189fc:	f000 faa8 	bl	8018f50 <_malloc_usable_size_r>
 8018a00:	42a0      	cmp	r0, r4
 8018a02:	d20f      	bcs.n	8018a24 <_realloc_r+0x48>
 8018a04:	4621      	mov	r1, r4
 8018a06:	4638      	mov	r0, r7
 8018a08:	f7fd fd18 	bl	801643c <_malloc_r>
 8018a0c:	4605      	mov	r5, r0
 8018a0e:	2800      	cmp	r0, #0
 8018a10:	d0f2      	beq.n	80189f8 <_realloc_r+0x1c>
 8018a12:	4631      	mov	r1, r6
 8018a14:	4622      	mov	r2, r4
 8018a16:	f7fd fcab 	bl	8016370 <memcpy>
 8018a1a:	4631      	mov	r1, r6
 8018a1c:	4638      	mov	r0, r7
 8018a1e:	f7fd fcbd 	bl	801639c <_free_r>
 8018a22:	e7e9      	b.n	80189f8 <_realloc_r+0x1c>
 8018a24:	4635      	mov	r5, r6
 8018a26:	e7e7      	b.n	80189f8 <_realloc_r+0x1c>

08018a28 <__sfputc_r>:
 8018a28:	6893      	ldr	r3, [r2, #8]
 8018a2a:	3b01      	subs	r3, #1
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	b410      	push	{r4}
 8018a30:	6093      	str	r3, [r2, #8]
 8018a32:	da08      	bge.n	8018a46 <__sfputc_r+0x1e>
 8018a34:	6994      	ldr	r4, [r2, #24]
 8018a36:	42a3      	cmp	r3, r4
 8018a38:	db01      	blt.n	8018a3e <__sfputc_r+0x16>
 8018a3a:	290a      	cmp	r1, #10
 8018a3c:	d103      	bne.n	8018a46 <__sfputc_r+0x1e>
 8018a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a42:	f000 b94b 	b.w	8018cdc <__swbuf_r>
 8018a46:	6813      	ldr	r3, [r2, #0]
 8018a48:	1c58      	adds	r0, r3, #1
 8018a4a:	6010      	str	r0, [r2, #0]
 8018a4c:	7019      	strb	r1, [r3, #0]
 8018a4e:	4608      	mov	r0, r1
 8018a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a54:	4770      	bx	lr

08018a56 <__sfputs_r>:
 8018a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a58:	4606      	mov	r6, r0
 8018a5a:	460f      	mov	r7, r1
 8018a5c:	4614      	mov	r4, r2
 8018a5e:	18d5      	adds	r5, r2, r3
 8018a60:	42ac      	cmp	r4, r5
 8018a62:	d101      	bne.n	8018a68 <__sfputs_r+0x12>
 8018a64:	2000      	movs	r0, #0
 8018a66:	e007      	b.n	8018a78 <__sfputs_r+0x22>
 8018a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a6c:	463a      	mov	r2, r7
 8018a6e:	4630      	mov	r0, r6
 8018a70:	f7ff ffda 	bl	8018a28 <__sfputc_r>
 8018a74:	1c43      	adds	r3, r0, #1
 8018a76:	d1f3      	bne.n	8018a60 <__sfputs_r+0xa>
 8018a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018a7c <_vfiprintf_r>:
 8018a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a80:	460d      	mov	r5, r1
 8018a82:	b09d      	sub	sp, #116	; 0x74
 8018a84:	4614      	mov	r4, r2
 8018a86:	4698      	mov	r8, r3
 8018a88:	4606      	mov	r6, r0
 8018a8a:	b118      	cbz	r0, 8018a94 <_vfiprintf_r+0x18>
 8018a8c:	6983      	ldr	r3, [r0, #24]
 8018a8e:	b90b      	cbnz	r3, 8018a94 <_vfiprintf_r+0x18>
 8018a90:	f7fd fb7e 	bl	8016190 <__sinit>
 8018a94:	4b89      	ldr	r3, [pc, #548]	; (8018cbc <_vfiprintf_r+0x240>)
 8018a96:	429d      	cmp	r5, r3
 8018a98:	d11b      	bne.n	8018ad2 <_vfiprintf_r+0x56>
 8018a9a:	6875      	ldr	r5, [r6, #4]
 8018a9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a9e:	07d9      	lsls	r1, r3, #31
 8018aa0:	d405      	bmi.n	8018aae <_vfiprintf_r+0x32>
 8018aa2:	89ab      	ldrh	r3, [r5, #12]
 8018aa4:	059a      	lsls	r2, r3, #22
 8018aa6:	d402      	bmi.n	8018aae <_vfiprintf_r+0x32>
 8018aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018aaa:	f7fd fc4e 	bl	801634a <__retarget_lock_acquire_recursive>
 8018aae:	89ab      	ldrh	r3, [r5, #12]
 8018ab0:	071b      	lsls	r3, r3, #28
 8018ab2:	d501      	bpl.n	8018ab8 <_vfiprintf_r+0x3c>
 8018ab4:	692b      	ldr	r3, [r5, #16]
 8018ab6:	b9eb      	cbnz	r3, 8018af4 <_vfiprintf_r+0x78>
 8018ab8:	4629      	mov	r1, r5
 8018aba:	4630      	mov	r0, r6
 8018abc:	f000 f96e 	bl	8018d9c <__swsetup_r>
 8018ac0:	b1c0      	cbz	r0, 8018af4 <_vfiprintf_r+0x78>
 8018ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ac4:	07dc      	lsls	r4, r3, #31
 8018ac6:	d50e      	bpl.n	8018ae6 <_vfiprintf_r+0x6a>
 8018ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018acc:	b01d      	add	sp, #116	; 0x74
 8018ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad2:	4b7b      	ldr	r3, [pc, #492]	; (8018cc0 <_vfiprintf_r+0x244>)
 8018ad4:	429d      	cmp	r5, r3
 8018ad6:	d101      	bne.n	8018adc <_vfiprintf_r+0x60>
 8018ad8:	68b5      	ldr	r5, [r6, #8]
 8018ada:	e7df      	b.n	8018a9c <_vfiprintf_r+0x20>
 8018adc:	4b79      	ldr	r3, [pc, #484]	; (8018cc4 <_vfiprintf_r+0x248>)
 8018ade:	429d      	cmp	r5, r3
 8018ae0:	bf08      	it	eq
 8018ae2:	68f5      	ldreq	r5, [r6, #12]
 8018ae4:	e7da      	b.n	8018a9c <_vfiprintf_r+0x20>
 8018ae6:	89ab      	ldrh	r3, [r5, #12]
 8018ae8:	0598      	lsls	r0, r3, #22
 8018aea:	d4ed      	bmi.n	8018ac8 <_vfiprintf_r+0x4c>
 8018aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018aee:	f7fd fc2d 	bl	801634c <__retarget_lock_release_recursive>
 8018af2:	e7e9      	b.n	8018ac8 <_vfiprintf_r+0x4c>
 8018af4:	2300      	movs	r3, #0
 8018af6:	9309      	str	r3, [sp, #36]	; 0x24
 8018af8:	2320      	movs	r3, #32
 8018afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b02:	2330      	movs	r3, #48	; 0x30
 8018b04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018cc8 <_vfiprintf_r+0x24c>
 8018b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b0c:	f04f 0901 	mov.w	r9, #1
 8018b10:	4623      	mov	r3, r4
 8018b12:	469a      	mov	sl, r3
 8018b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b18:	b10a      	cbz	r2, 8018b1e <_vfiprintf_r+0xa2>
 8018b1a:	2a25      	cmp	r2, #37	; 0x25
 8018b1c:	d1f9      	bne.n	8018b12 <_vfiprintf_r+0x96>
 8018b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8018b22:	d00b      	beq.n	8018b3c <_vfiprintf_r+0xc0>
 8018b24:	465b      	mov	r3, fp
 8018b26:	4622      	mov	r2, r4
 8018b28:	4629      	mov	r1, r5
 8018b2a:	4630      	mov	r0, r6
 8018b2c:	f7ff ff93 	bl	8018a56 <__sfputs_r>
 8018b30:	3001      	adds	r0, #1
 8018b32:	f000 80aa 	beq.w	8018c8a <_vfiprintf_r+0x20e>
 8018b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b38:	445a      	add	r2, fp
 8018b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8018b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	f000 80a2 	beq.w	8018c8a <_vfiprintf_r+0x20e>
 8018b46:	2300      	movs	r3, #0
 8018b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b50:	f10a 0a01 	add.w	sl, sl, #1
 8018b54:	9304      	str	r3, [sp, #16]
 8018b56:	9307      	str	r3, [sp, #28]
 8018b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8018b5e:	4654      	mov	r4, sl
 8018b60:	2205      	movs	r2, #5
 8018b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b66:	4858      	ldr	r0, [pc, #352]	; (8018cc8 <_vfiprintf_r+0x24c>)
 8018b68:	f7e7 fb3a 	bl	80001e0 <memchr>
 8018b6c:	9a04      	ldr	r2, [sp, #16]
 8018b6e:	b9d8      	cbnz	r0, 8018ba8 <_vfiprintf_r+0x12c>
 8018b70:	06d1      	lsls	r1, r2, #27
 8018b72:	bf44      	itt	mi
 8018b74:	2320      	movmi	r3, #32
 8018b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b7a:	0713      	lsls	r3, r2, #28
 8018b7c:	bf44      	itt	mi
 8018b7e:	232b      	movmi	r3, #43	; 0x2b
 8018b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b84:	f89a 3000 	ldrb.w	r3, [sl]
 8018b88:	2b2a      	cmp	r3, #42	; 0x2a
 8018b8a:	d015      	beq.n	8018bb8 <_vfiprintf_r+0x13c>
 8018b8c:	9a07      	ldr	r2, [sp, #28]
 8018b8e:	4654      	mov	r4, sl
 8018b90:	2000      	movs	r0, #0
 8018b92:	f04f 0c0a 	mov.w	ip, #10
 8018b96:	4621      	mov	r1, r4
 8018b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b9c:	3b30      	subs	r3, #48	; 0x30
 8018b9e:	2b09      	cmp	r3, #9
 8018ba0:	d94e      	bls.n	8018c40 <_vfiprintf_r+0x1c4>
 8018ba2:	b1b0      	cbz	r0, 8018bd2 <_vfiprintf_r+0x156>
 8018ba4:	9207      	str	r2, [sp, #28]
 8018ba6:	e014      	b.n	8018bd2 <_vfiprintf_r+0x156>
 8018ba8:	eba0 0308 	sub.w	r3, r0, r8
 8018bac:	fa09 f303 	lsl.w	r3, r9, r3
 8018bb0:	4313      	orrs	r3, r2
 8018bb2:	9304      	str	r3, [sp, #16]
 8018bb4:	46a2      	mov	sl, r4
 8018bb6:	e7d2      	b.n	8018b5e <_vfiprintf_r+0xe2>
 8018bb8:	9b03      	ldr	r3, [sp, #12]
 8018bba:	1d19      	adds	r1, r3, #4
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	9103      	str	r1, [sp, #12]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	bfbb      	ittet	lt
 8018bc4:	425b      	neglt	r3, r3
 8018bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8018bca:	9307      	strge	r3, [sp, #28]
 8018bcc:	9307      	strlt	r3, [sp, #28]
 8018bce:	bfb8      	it	lt
 8018bd0:	9204      	strlt	r2, [sp, #16]
 8018bd2:	7823      	ldrb	r3, [r4, #0]
 8018bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8018bd6:	d10c      	bne.n	8018bf2 <_vfiprintf_r+0x176>
 8018bd8:	7863      	ldrb	r3, [r4, #1]
 8018bda:	2b2a      	cmp	r3, #42	; 0x2a
 8018bdc:	d135      	bne.n	8018c4a <_vfiprintf_r+0x1ce>
 8018bde:	9b03      	ldr	r3, [sp, #12]
 8018be0:	1d1a      	adds	r2, r3, #4
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	9203      	str	r2, [sp, #12]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	bfb8      	it	lt
 8018bea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018bee:	3402      	adds	r4, #2
 8018bf0:	9305      	str	r3, [sp, #20]
 8018bf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018cd8 <_vfiprintf_r+0x25c>
 8018bf6:	7821      	ldrb	r1, [r4, #0]
 8018bf8:	2203      	movs	r2, #3
 8018bfa:	4650      	mov	r0, sl
 8018bfc:	f7e7 faf0 	bl	80001e0 <memchr>
 8018c00:	b140      	cbz	r0, 8018c14 <_vfiprintf_r+0x198>
 8018c02:	2340      	movs	r3, #64	; 0x40
 8018c04:	eba0 000a 	sub.w	r0, r0, sl
 8018c08:	fa03 f000 	lsl.w	r0, r3, r0
 8018c0c:	9b04      	ldr	r3, [sp, #16]
 8018c0e:	4303      	orrs	r3, r0
 8018c10:	3401      	adds	r4, #1
 8018c12:	9304      	str	r3, [sp, #16]
 8018c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c18:	482c      	ldr	r0, [pc, #176]	; (8018ccc <_vfiprintf_r+0x250>)
 8018c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018c1e:	2206      	movs	r2, #6
 8018c20:	f7e7 fade 	bl	80001e0 <memchr>
 8018c24:	2800      	cmp	r0, #0
 8018c26:	d03f      	beq.n	8018ca8 <_vfiprintf_r+0x22c>
 8018c28:	4b29      	ldr	r3, [pc, #164]	; (8018cd0 <_vfiprintf_r+0x254>)
 8018c2a:	bb1b      	cbnz	r3, 8018c74 <_vfiprintf_r+0x1f8>
 8018c2c:	9b03      	ldr	r3, [sp, #12]
 8018c2e:	3307      	adds	r3, #7
 8018c30:	f023 0307 	bic.w	r3, r3, #7
 8018c34:	3308      	adds	r3, #8
 8018c36:	9303      	str	r3, [sp, #12]
 8018c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c3a:	443b      	add	r3, r7
 8018c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8018c3e:	e767      	b.n	8018b10 <_vfiprintf_r+0x94>
 8018c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c44:	460c      	mov	r4, r1
 8018c46:	2001      	movs	r0, #1
 8018c48:	e7a5      	b.n	8018b96 <_vfiprintf_r+0x11a>
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	3401      	adds	r4, #1
 8018c4e:	9305      	str	r3, [sp, #20]
 8018c50:	4619      	mov	r1, r3
 8018c52:	f04f 0c0a 	mov.w	ip, #10
 8018c56:	4620      	mov	r0, r4
 8018c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c5c:	3a30      	subs	r2, #48	; 0x30
 8018c5e:	2a09      	cmp	r2, #9
 8018c60:	d903      	bls.n	8018c6a <_vfiprintf_r+0x1ee>
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d0c5      	beq.n	8018bf2 <_vfiprintf_r+0x176>
 8018c66:	9105      	str	r1, [sp, #20]
 8018c68:	e7c3      	b.n	8018bf2 <_vfiprintf_r+0x176>
 8018c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c6e:	4604      	mov	r4, r0
 8018c70:	2301      	movs	r3, #1
 8018c72:	e7f0      	b.n	8018c56 <_vfiprintf_r+0x1da>
 8018c74:	ab03      	add	r3, sp, #12
 8018c76:	9300      	str	r3, [sp, #0]
 8018c78:	462a      	mov	r2, r5
 8018c7a:	4b16      	ldr	r3, [pc, #88]	; (8018cd4 <_vfiprintf_r+0x258>)
 8018c7c:	a904      	add	r1, sp, #16
 8018c7e:	4630      	mov	r0, r6
 8018c80:	f7fd fcd6 	bl	8016630 <_printf_float>
 8018c84:	4607      	mov	r7, r0
 8018c86:	1c78      	adds	r0, r7, #1
 8018c88:	d1d6      	bne.n	8018c38 <_vfiprintf_r+0x1bc>
 8018c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c8c:	07d9      	lsls	r1, r3, #31
 8018c8e:	d405      	bmi.n	8018c9c <_vfiprintf_r+0x220>
 8018c90:	89ab      	ldrh	r3, [r5, #12]
 8018c92:	059a      	lsls	r2, r3, #22
 8018c94:	d402      	bmi.n	8018c9c <_vfiprintf_r+0x220>
 8018c96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c98:	f7fd fb58 	bl	801634c <__retarget_lock_release_recursive>
 8018c9c:	89ab      	ldrh	r3, [r5, #12]
 8018c9e:	065b      	lsls	r3, r3, #25
 8018ca0:	f53f af12 	bmi.w	8018ac8 <_vfiprintf_r+0x4c>
 8018ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ca6:	e711      	b.n	8018acc <_vfiprintf_r+0x50>
 8018ca8:	ab03      	add	r3, sp, #12
 8018caa:	9300      	str	r3, [sp, #0]
 8018cac:	462a      	mov	r2, r5
 8018cae:	4b09      	ldr	r3, [pc, #36]	; (8018cd4 <_vfiprintf_r+0x258>)
 8018cb0:	a904      	add	r1, sp, #16
 8018cb2:	4630      	mov	r0, r6
 8018cb4:	f7fd ff60 	bl	8016b78 <_printf_i>
 8018cb8:	e7e4      	b.n	8018c84 <_vfiprintf_r+0x208>
 8018cba:	bf00      	nop
 8018cbc:	08019f68 	.word	0x08019f68
 8018cc0:	08019f88 	.word	0x08019f88
 8018cc4:	08019f48 	.word	0x08019f48
 8018cc8:	0801a1fc 	.word	0x0801a1fc
 8018ccc:	0801a206 	.word	0x0801a206
 8018cd0:	08016631 	.word	0x08016631
 8018cd4:	08018a57 	.word	0x08018a57
 8018cd8:	0801a202 	.word	0x0801a202

08018cdc <__swbuf_r>:
 8018cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cde:	460e      	mov	r6, r1
 8018ce0:	4614      	mov	r4, r2
 8018ce2:	4605      	mov	r5, r0
 8018ce4:	b118      	cbz	r0, 8018cee <__swbuf_r+0x12>
 8018ce6:	6983      	ldr	r3, [r0, #24]
 8018ce8:	b90b      	cbnz	r3, 8018cee <__swbuf_r+0x12>
 8018cea:	f7fd fa51 	bl	8016190 <__sinit>
 8018cee:	4b21      	ldr	r3, [pc, #132]	; (8018d74 <__swbuf_r+0x98>)
 8018cf0:	429c      	cmp	r4, r3
 8018cf2:	d12b      	bne.n	8018d4c <__swbuf_r+0x70>
 8018cf4:	686c      	ldr	r4, [r5, #4]
 8018cf6:	69a3      	ldr	r3, [r4, #24]
 8018cf8:	60a3      	str	r3, [r4, #8]
 8018cfa:	89a3      	ldrh	r3, [r4, #12]
 8018cfc:	071a      	lsls	r2, r3, #28
 8018cfe:	d52f      	bpl.n	8018d60 <__swbuf_r+0x84>
 8018d00:	6923      	ldr	r3, [r4, #16]
 8018d02:	b36b      	cbz	r3, 8018d60 <__swbuf_r+0x84>
 8018d04:	6923      	ldr	r3, [r4, #16]
 8018d06:	6820      	ldr	r0, [r4, #0]
 8018d08:	1ac0      	subs	r0, r0, r3
 8018d0a:	6963      	ldr	r3, [r4, #20]
 8018d0c:	b2f6      	uxtb	r6, r6
 8018d0e:	4283      	cmp	r3, r0
 8018d10:	4637      	mov	r7, r6
 8018d12:	dc04      	bgt.n	8018d1e <__swbuf_r+0x42>
 8018d14:	4621      	mov	r1, r4
 8018d16:	4628      	mov	r0, r5
 8018d18:	f7ff f8ac 	bl	8017e74 <_fflush_r>
 8018d1c:	bb30      	cbnz	r0, 8018d6c <__swbuf_r+0x90>
 8018d1e:	68a3      	ldr	r3, [r4, #8]
 8018d20:	3b01      	subs	r3, #1
 8018d22:	60a3      	str	r3, [r4, #8]
 8018d24:	6823      	ldr	r3, [r4, #0]
 8018d26:	1c5a      	adds	r2, r3, #1
 8018d28:	6022      	str	r2, [r4, #0]
 8018d2a:	701e      	strb	r6, [r3, #0]
 8018d2c:	6963      	ldr	r3, [r4, #20]
 8018d2e:	3001      	adds	r0, #1
 8018d30:	4283      	cmp	r3, r0
 8018d32:	d004      	beq.n	8018d3e <__swbuf_r+0x62>
 8018d34:	89a3      	ldrh	r3, [r4, #12]
 8018d36:	07db      	lsls	r3, r3, #31
 8018d38:	d506      	bpl.n	8018d48 <__swbuf_r+0x6c>
 8018d3a:	2e0a      	cmp	r6, #10
 8018d3c:	d104      	bne.n	8018d48 <__swbuf_r+0x6c>
 8018d3e:	4621      	mov	r1, r4
 8018d40:	4628      	mov	r0, r5
 8018d42:	f7ff f897 	bl	8017e74 <_fflush_r>
 8018d46:	b988      	cbnz	r0, 8018d6c <__swbuf_r+0x90>
 8018d48:	4638      	mov	r0, r7
 8018d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d4c:	4b0a      	ldr	r3, [pc, #40]	; (8018d78 <__swbuf_r+0x9c>)
 8018d4e:	429c      	cmp	r4, r3
 8018d50:	d101      	bne.n	8018d56 <__swbuf_r+0x7a>
 8018d52:	68ac      	ldr	r4, [r5, #8]
 8018d54:	e7cf      	b.n	8018cf6 <__swbuf_r+0x1a>
 8018d56:	4b09      	ldr	r3, [pc, #36]	; (8018d7c <__swbuf_r+0xa0>)
 8018d58:	429c      	cmp	r4, r3
 8018d5a:	bf08      	it	eq
 8018d5c:	68ec      	ldreq	r4, [r5, #12]
 8018d5e:	e7ca      	b.n	8018cf6 <__swbuf_r+0x1a>
 8018d60:	4621      	mov	r1, r4
 8018d62:	4628      	mov	r0, r5
 8018d64:	f000 f81a 	bl	8018d9c <__swsetup_r>
 8018d68:	2800      	cmp	r0, #0
 8018d6a:	d0cb      	beq.n	8018d04 <__swbuf_r+0x28>
 8018d6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018d70:	e7ea      	b.n	8018d48 <__swbuf_r+0x6c>
 8018d72:	bf00      	nop
 8018d74:	08019f68 	.word	0x08019f68
 8018d78:	08019f88 	.word	0x08019f88
 8018d7c:	08019f48 	.word	0x08019f48

08018d80 <__ascii_wctomb>:
 8018d80:	b149      	cbz	r1, 8018d96 <__ascii_wctomb+0x16>
 8018d82:	2aff      	cmp	r2, #255	; 0xff
 8018d84:	bf85      	ittet	hi
 8018d86:	238a      	movhi	r3, #138	; 0x8a
 8018d88:	6003      	strhi	r3, [r0, #0]
 8018d8a:	700a      	strbls	r2, [r1, #0]
 8018d8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8018d90:	bf98      	it	ls
 8018d92:	2001      	movls	r0, #1
 8018d94:	4770      	bx	lr
 8018d96:	4608      	mov	r0, r1
 8018d98:	4770      	bx	lr
	...

08018d9c <__swsetup_r>:
 8018d9c:	4b32      	ldr	r3, [pc, #200]	; (8018e68 <__swsetup_r+0xcc>)
 8018d9e:	b570      	push	{r4, r5, r6, lr}
 8018da0:	681d      	ldr	r5, [r3, #0]
 8018da2:	4606      	mov	r6, r0
 8018da4:	460c      	mov	r4, r1
 8018da6:	b125      	cbz	r5, 8018db2 <__swsetup_r+0x16>
 8018da8:	69ab      	ldr	r3, [r5, #24]
 8018daa:	b913      	cbnz	r3, 8018db2 <__swsetup_r+0x16>
 8018dac:	4628      	mov	r0, r5
 8018dae:	f7fd f9ef 	bl	8016190 <__sinit>
 8018db2:	4b2e      	ldr	r3, [pc, #184]	; (8018e6c <__swsetup_r+0xd0>)
 8018db4:	429c      	cmp	r4, r3
 8018db6:	d10f      	bne.n	8018dd8 <__swsetup_r+0x3c>
 8018db8:	686c      	ldr	r4, [r5, #4]
 8018dba:	89a3      	ldrh	r3, [r4, #12]
 8018dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018dc0:	0719      	lsls	r1, r3, #28
 8018dc2:	d42c      	bmi.n	8018e1e <__swsetup_r+0x82>
 8018dc4:	06dd      	lsls	r5, r3, #27
 8018dc6:	d411      	bmi.n	8018dec <__swsetup_r+0x50>
 8018dc8:	2309      	movs	r3, #9
 8018dca:	6033      	str	r3, [r6, #0]
 8018dcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018dd0:	81a3      	strh	r3, [r4, #12]
 8018dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018dd6:	e03e      	b.n	8018e56 <__swsetup_r+0xba>
 8018dd8:	4b25      	ldr	r3, [pc, #148]	; (8018e70 <__swsetup_r+0xd4>)
 8018dda:	429c      	cmp	r4, r3
 8018ddc:	d101      	bne.n	8018de2 <__swsetup_r+0x46>
 8018dde:	68ac      	ldr	r4, [r5, #8]
 8018de0:	e7eb      	b.n	8018dba <__swsetup_r+0x1e>
 8018de2:	4b24      	ldr	r3, [pc, #144]	; (8018e74 <__swsetup_r+0xd8>)
 8018de4:	429c      	cmp	r4, r3
 8018de6:	bf08      	it	eq
 8018de8:	68ec      	ldreq	r4, [r5, #12]
 8018dea:	e7e6      	b.n	8018dba <__swsetup_r+0x1e>
 8018dec:	0758      	lsls	r0, r3, #29
 8018dee:	d512      	bpl.n	8018e16 <__swsetup_r+0x7a>
 8018df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018df2:	b141      	cbz	r1, 8018e06 <__swsetup_r+0x6a>
 8018df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018df8:	4299      	cmp	r1, r3
 8018dfa:	d002      	beq.n	8018e02 <__swsetup_r+0x66>
 8018dfc:	4630      	mov	r0, r6
 8018dfe:	f7fd facd 	bl	801639c <_free_r>
 8018e02:	2300      	movs	r3, #0
 8018e04:	6363      	str	r3, [r4, #52]	; 0x34
 8018e06:	89a3      	ldrh	r3, [r4, #12]
 8018e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018e0c:	81a3      	strh	r3, [r4, #12]
 8018e0e:	2300      	movs	r3, #0
 8018e10:	6063      	str	r3, [r4, #4]
 8018e12:	6923      	ldr	r3, [r4, #16]
 8018e14:	6023      	str	r3, [r4, #0]
 8018e16:	89a3      	ldrh	r3, [r4, #12]
 8018e18:	f043 0308 	orr.w	r3, r3, #8
 8018e1c:	81a3      	strh	r3, [r4, #12]
 8018e1e:	6923      	ldr	r3, [r4, #16]
 8018e20:	b94b      	cbnz	r3, 8018e36 <__swsetup_r+0x9a>
 8018e22:	89a3      	ldrh	r3, [r4, #12]
 8018e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018e2c:	d003      	beq.n	8018e36 <__swsetup_r+0x9a>
 8018e2e:	4621      	mov	r1, r4
 8018e30:	4630      	mov	r0, r6
 8018e32:	f000 f84d 	bl	8018ed0 <__smakebuf_r>
 8018e36:	89a0      	ldrh	r0, [r4, #12]
 8018e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e3c:	f010 0301 	ands.w	r3, r0, #1
 8018e40:	d00a      	beq.n	8018e58 <__swsetup_r+0xbc>
 8018e42:	2300      	movs	r3, #0
 8018e44:	60a3      	str	r3, [r4, #8]
 8018e46:	6963      	ldr	r3, [r4, #20]
 8018e48:	425b      	negs	r3, r3
 8018e4a:	61a3      	str	r3, [r4, #24]
 8018e4c:	6923      	ldr	r3, [r4, #16]
 8018e4e:	b943      	cbnz	r3, 8018e62 <__swsetup_r+0xc6>
 8018e50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018e54:	d1ba      	bne.n	8018dcc <__swsetup_r+0x30>
 8018e56:	bd70      	pop	{r4, r5, r6, pc}
 8018e58:	0781      	lsls	r1, r0, #30
 8018e5a:	bf58      	it	pl
 8018e5c:	6963      	ldrpl	r3, [r4, #20]
 8018e5e:	60a3      	str	r3, [r4, #8]
 8018e60:	e7f4      	b.n	8018e4c <__swsetup_r+0xb0>
 8018e62:	2000      	movs	r0, #0
 8018e64:	e7f7      	b.n	8018e56 <__swsetup_r+0xba>
 8018e66:	bf00      	nop
 8018e68:	200001a0 	.word	0x200001a0
 8018e6c:	08019f68 	.word	0x08019f68
 8018e70:	08019f88 	.word	0x08019f88
 8018e74:	08019f48 	.word	0x08019f48

08018e78 <abort>:
 8018e78:	b508      	push	{r3, lr}
 8018e7a:	2006      	movs	r0, #6
 8018e7c:	f000 f898 	bl	8018fb0 <raise>
 8018e80:	2001      	movs	r0, #1
 8018e82:	f7ec f87f 	bl	8004f84 <_exit>

08018e86 <__swhatbuf_r>:
 8018e86:	b570      	push	{r4, r5, r6, lr}
 8018e88:	460e      	mov	r6, r1
 8018e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e8e:	2900      	cmp	r1, #0
 8018e90:	b096      	sub	sp, #88	; 0x58
 8018e92:	4614      	mov	r4, r2
 8018e94:	461d      	mov	r5, r3
 8018e96:	da07      	bge.n	8018ea8 <__swhatbuf_r+0x22>
 8018e98:	2300      	movs	r3, #0
 8018e9a:	602b      	str	r3, [r5, #0]
 8018e9c:	89b3      	ldrh	r3, [r6, #12]
 8018e9e:	061a      	lsls	r2, r3, #24
 8018ea0:	d410      	bmi.n	8018ec4 <__swhatbuf_r+0x3e>
 8018ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ea6:	e00e      	b.n	8018ec6 <__swhatbuf_r+0x40>
 8018ea8:	466a      	mov	r2, sp
 8018eaa:	f000 f89d 	bl	8018fe8 <_fstat_r>
 8018eae:	2800      	cmp	r0, #0
 8018eb0:	dbf2      	blt.n	8018e98 <__swhatbuf_r+0x12>
 8018eb2:	9a01      	ldr	r2, [sp, #4]
 8018eb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018eb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018ebc:	425a      	negs	r2, r3
 8018ebe:	415a      	adcs	r2, r3
 8018ec0:	602a      	str	r2, [r5, #0]
 8018ec2:	e7ee      	b.n	8018ea2 <__swhatbuf_r+0x1c>
 8018ec4:	2340      	movs	r3, #64	; 0x40
 8018ec6:	2000      	movs	r0, #0
 8018ec8:	6023      	str	r3, [r4, #0]
 8018eca:	b016      	add	sp, #88	; 0x58
 8018ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08018ed0 <__smakebuf_r>:
 8018ed0:	898b      	ldrh	r3, [r1, #12]
 8018ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ed4:	079d      	lsls	r5, r3, #30
 8018ed6:	4606      	mov	r6, r0
 8018ed8:	460c      	mov	r4, r1
 8018eda:	d507      	bpl.n	8018eec <__smakebuf_r+0x1c>
 8018edc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018ee0:	6023      	str	r3, [r4, #0]
 8018ee2:	6123      	str	r3, [r4, #16]
 8018ee4:	2301      	movs	r3, #1
 8018ee6:	6163      	str	r3, [r4, #20]
 8018ee8:	b002      	add	sp, #8
 8018eea:	bd70      	pop	{r4, r5, r6, pc}
 8018eec:	ab01      	add	r3, sp, #4
 8018eee:	466a      	mov	r2, sp
 8018ef0:	f7ff ffc9 	bl	8018e86 <__swhatbuf_r>
 8018ef4:	9900      	ldr	r1, [sp, #0]
 8018ef6:	4605      	mov	r5, r0
 8018ef8:	4630      	mov	r0, r6
 8018efa:	f7fd fa9f 	bl	801643c <_malloc_r>
 8018efe:	b948      	cbnz	r0, 8018f14 <__smakebuf_r+0x44>
 8018f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f04:	059a      	lsls	r2, r3, #22
 8018f06:	d4ef      	bmi.n	8018ee8 <__smakebuf_r+0x18>
 8018f08:	f023 0303 	bic.w	r3, r3, #3
 8018f0c:	f043 0302 	orr.w	r3, r3, #2
 8018f10:	81a3      	strh	r3, [r4, #12]
 8018f12:	e7e3      	b.n	8018edc <__smakebuf_r+0xc>
 8018f14:	4b0d      	ldr	r3, [pc, #52]	; (8018f4c <__smakebuf_r+0x7c>)
 8018f16:	62b3      	str	r3, [r6, #40]	; 0x28
 8018f18:	89a3      	ldrh	r3, [r4, #12]
 8018f1a:	6020      	str	r0, [r4, #0]
 8018f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f20:	81a3      	strh	r3, [r4, #12]
 8018f22:	9b00      	ldr	r3, [sp, #0]
 8018f24:	6163      	str	r3, [r4, #20]
 8018f26:	9b01      	ldr	r3, [sp, #4]
 8018f28:	6120      	str	r0, [r4, #16]
 8018f2a:	b15b      	cbz	r3, 8018f44 <__smakebuf_r+0x74>
 8018f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f30:	4630      	mov	r0, r6
 8018f32:	f000 f86b 	bl	801900c <_isatty_r>
 8018f36:	b128      	cbz	r0, 8018f44 <__smakebuf_r+0x74>
 8018f38:	89a3      	ldrh	r3, [r4, #12]
 8018f3a:	f023 0303 	bic.w	r3, r3, #3
 8018f3e:	f043 0301 	orr.w	r3, r3, #1
 8018f42:	81a3      	strh	r3, [r4, #12]
 8018f44:	89a0      	ldrh	r0, [r4, #12]
 8018f46:	4305      	orrs	r5, r0
 8018f48:	81a5      	strh	r5, [r4, #12]
 8018f4a:	e7cd      	b.n	8018ee8 <__smakebuf_r+0x18>
 8018f4c:	08016129 	.word	0x08016129

08018f50 <_malloc_usable_size_r>:
 8018f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f54:	1f18      	subs	r0, r3, #4
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	bfbc      	itt	lt
 8018f5a:	580b      	ldrlt	r3, [r1, r0]
 8018f5c:	18c0      	addlt	r0, r0, r3
 8018f5e:	4770      	bx	lr

08018f60 <_raise_r>:
 8018f60:	291f      	cmp	r1, #31
 8018f62:	b538      	push	{r3, r4, r5, lr}
 8018f64:	4604      	mov	r4, r0
 8018f66:	460d      	mov	r5, r1
 8018f68:	d904      	bls.n	8018f74 <_raise_r+0x14>
 8018f6a:	2316      	movs	r3, #22
 8018f6c:	6003      	str	r3, [r0, #0]
 8018f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f72:	bd38      	pop	{r3, r4, r5, pc}
 8018f74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018f76:	b112      	cbz	r2, 8018f7e <_raise_r+0x1e>
 8018f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018f7c:	b94b      	cbnz	r3, 8018f92 <_raise_r+0x32>
 8018f7e:	4620      	mov	r0, r4
 8018f80:	f000 f830 	bl	8018fe4 <_getpid_r>
 8018f84:	462a      	mov	r2, r5
 8018f86:	4601      	mov	r1, r0
 8018f88:	4620      	mov	r0, r4
 8018f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f8e:	f000 b817 	b.w	8018fc0 <_kill_r>
 8018f92:	2b01      	cmp	r3, #1
 8018f94:	d00a      	beq.n	8018fac <_raise_r+0x4c>
 8018f96:	1c59      	adds	r1, r3, #1
 8018f98:	d103      	bne.n	8018fa2 <_raise_r+0x42>
 8018f9a:	2316      	movs	r3, #22
 8018f9c:	6003      	str	r3, [r0, #0]
 8018f9e:	2001      	movs	r0, #1
 8018fa0:	e7e7      	b.n	8018f72 <_raise_r+0x12>
 8018fa2:	2400      	movs	r4, #0
 8018fa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018fa8:	4628      	mov	r0, r5
 8018faa:	4798      	blx	r3
 8018fac:	2000      	movs	r0, #0
 8018fae:	e7e0      	b.n	8018f72 <_raise_r+0x12>

08018fb0 <raise>:
 8018fb0:	4b02      	ldr	r3, [pc, #8]	; (8018fbc <raise+0xc>)
 8018fb2:	4601      	mov	r1, r0
 8018fb4:	6818      	ldr	r0, [r3, #0]
 8018fb6:	f7ff bfd3 	b.w	8018f60 <_raise_r>
 8018fba:	bf00      	nop
 8018fbc:	200001a0 	.word	0x200001a0

08018fc0 <_kill_r>:
 8018fc0:	b538      	push	{r3, r4, r5, lr}
 8018fc2:	4d07      	ldr	r5, [pc, #28]	; (8018fe0 <_kill_r+0x20>)
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	4604      	mov	r4, r0
 8018fc8:	4608      	mov	r0, r1
 8018fca:	4611      	mov	r1, r2
 8018fcc:	602b      	str	r3, [r5, #0]
 8018fce:	f7eb ffc9 	bl	8004f64 <_kill>
 8018fd2:	1c43      	adds	r3, r0, #1
 8018fd4:	d102      	bne.n	8018fdc <_kill_r+0x1c>
 8018fd6:	682b      	ldr	r3, [r5, #0]
 8018fd8:	b103      	cbz	r3, 8018fdc <_kill_r+0x1c>
 8018fda:	6023      	str	r3, [r4, #0]
 8018fdc:	bd38      	pop	{r3, r4, r5, pc}
 8018fde:	bf00      	nop
 8018fe0:	20016cbc 	.word	0x20016cbc

08018fe4 <_getpid_r>:
 8018fe4:	f7eb bfb6 	b.w	8004f54 <_getpid>

08018fe8 <_fstat_r>:
 8018fe8:	b538      	push	{r3, r4, r5, lr}
 8018fea:	4d07      	ldr	r5, [pc, #28]	; (8019008 <_fstat_r+0x20>)
 8018fec:	2300      	movs	r3, #0
 8018fee:	4604      	mov	r4, r0
 8018ff0:	4608      	mov	r0, r1
 8018ff2:	4611      	mov	r1, r2
 8018ff4:	602b      	str	r3, [r5, #0]
 8018ff6:	f7ec f814 	bl	8005022 <_fstat>
 8018ffa:	1c43      	adds	r3, r0, #1
 8018ffc:	d102      	bne.n	8019004 <_fstat_r+0x1c>
 8018ffe:	682b      	ldr	r3, [r5, #0]
 8019000:	b103      	cbz	r3, 8019004 <_fstat_r+0x1c>
 8019002:	6023      	str	r3, [r4, #0]
 8019004:	bd38      	pop	{r3, r4, r5, pc}
 8019006:	bf00      	nop
 8019008:	20016cbc 	.word	0x20016cbc

0801900c <_isatty_r>:
 801900c:	b538      	push	{r3, r4, r5, lr}
 801900e:	4d06      	ldr	r5, [pc, #24]	; (8019028 <_isatty_r+0x1c>)
 8019010:	2300      	movs	r3, #0
 8019012:	4604      	mov	r4, r0
 8019014:	4608      	mov	r0, r1
 8019016:	602b      	str	r3, [r5, #0]
 8019018:	f7ec f813 	bl	8005042 <_isatty>
 801901c:	1c43      	adds	r3, r0, #1
 801901e:	d102      	bne.n	8019026 <_isatty_r+0x1a>
 8019020:	682b      	ldr	r3, [r5, #0]
 8019022:	b103      	cbz	r3, 8019026 <_isatty_r+0x1a>
 8019024:	6023      	str	r3, [r4, #0]
 8019026:	bd38      	pop	{r3, r4, r5, pc}
 8019028:	20016cbc 	.word	0x20016cbc

0801902c <_init>:
 801902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801902e:	bf00      	nop
 8019030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019032:	bc08      	pop	{r3}
 8019034:	469e      	mov	lr, r3
 8019036:	4770      	bx	lr

08019038 <_fini>:
 8019038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801903a:	bf00      	nop
 801903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801903e:	bc08      	pop	{r3}
 8019040:	469e      	mov	lr, r3
 8019042:	4770      	bx	lr
